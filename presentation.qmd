---
title: "HNB u digitalnom medijskom prostoru (podatcima)"
subtitle: "Prijedlog sustava za medijsko praćenje i analizu"
author: "Luka Sikic, PhD"
date: "`r format(Sys.Date(), '%B %d, %Y')`"
format:
  revealjs:
    theme: simple
    logo: photo.jpg
    footer: "Projektni prijedlog za HNB"
    slide-number: c/t
    css: pptstyle.css
    chalkboard: true
    # Background image settings ONLY for the title slide
    title-slide-attributes:
      data-background-image: "https://upload.wikimedia.org/wikipedia/commons/thumb/3/3b/Croatian_National_Bank.jpg/500px-Croatian_National_Bank.jpg"
      data-background-size: cover
      data-background-opacity: "0.5"
---

```{r setup, include=FALSE}
# Load necessary packages for the presentation
library(scales)#
#library(patchwork)
library(ggrepel)
library(udpipe)
library(dplyr)
library(tidytext)
library(stringr)
library(ggplot2)
library(forcats)
library(tidyr)
library(ggridges)
library(widyr)
library(ggraph)
library(igraph)
library(wordcloud)
library(RColorBrewer)
library(tidyverse)
library(lubridate)
library(data.table)
library(readxl)
library(plotly)
library(patchwork)

# --- 0. SETUP (This should already be in your setup chunk) ---
platform_color_mapping <- c(
  "web"       = "#003366",  # HNB Dark Blue
  "facebook"  = "#5B9BD5",  # HNB Medium Blue
  "comment"   = "#C00000",  # HNB Accent Red
  "twitter"   = "#BF8F00",  # HNB Accent Gold
  "forum"     = "#005F56",  # HNB Dark Green
  "youtube"   = "#7F7F7F",  # HNB Medium Grey
  "reddit"    = "#A0522D"
)

# theme_hnb <- theme_minimal(base_size = 14, base_family = "Roboto Mono") +
#   theme(
#     plot.title = element_text(face = "bold", size = 16, color = hnb_colors["dark_blue"]),
#     plot.subtitle = element_text(size = 12, color = hnb_colors["medium_grey"]),
#     legend.position = "top"
#   )
# theme_set(theme_hnb)


# --- 1. PREPARE THE COLOR MAPPING ---
# Create the named vector that explicitly tells ggplot which color to use for which platform.
# This is the crucial step you were missing.



```

## Kontekst

- > **Digitalni medijski prostor u RH:** [Definiraju](https://raw.githack.com/lusiki/Medijska-matrica/main/docs/chapters/01-kontekst.html) ga politička ekonomija digitalnog klika, razvojni put i algoritamska arhitektura javnog diskursa.

- > **Komunikacija središnjih banaka:** Značajna promjena od [tajnovitosti do transparentnosti](https://www.youtube.com/watch?v=u453NZsw74w&list=PLt9jC4Ylzr6CMEcksfFf_DX7nw6Ox_YgH) (1980e do 2000e), preko [komunikacijske revolucije](https://www.ecb.europa.eu/pub/pdf/scpwps/ecbwp898.pdf) (1990e do ranih 2000ih), do [aktivnog angažmana](https://research.vu.nl/ws/portalfiles/portal/362043989/blinder-et-al-2024-central-bank-communication-with-the-general-public-promise-or-false-hope.pdf) u medijskom prostoru, posebno na [društvenim medijima](https://onlinelibrary.wiley.com/doi/pdfdirect/10.1111/joes.12550).

- > **Ekonomska literatura:** Računalne društvene znanosti i korištenje velikih podataka su standardni u sve većem broju primjena  u makroekonomiji i financijama, posebno [tekstualnih podataka](https://web.stanford.edu/~gentzkow/research/text-as-data.pdf). To je prihvaćeno od strane [središnjih banaka](https://www.economicsobservatory.com/can-textual-analysis-be-used-track-economy-during-pandemic) ([ECB](https://www.ecb.europa.eu/pub/pdf/scpwps/ecb.wp3047~cb0f0cf37f.en.pdf), [Fed](https://arxiv.org/pdf/2111.06365), [BoE](https://www.bankofengland.co.uk/-/media/boe/files/ccbs/resources/text-mining-for-central-banks.pdf), [BIS](https://www.bis.org/review/r250224d.pdf),[BDF](https://www.banque-france.fr/system/files/2024-06/WP950.pdf)).

---

## Digitalni medijski podatci

<br><br>
[Alternativni](https://library.oapen.org/viewer/web/viewer.html?file=/bitstream/handle/20.500.12657/49505/9783030668914.pdf?sequence=1&isAllowed=y) podatci nisu zamjena nego nadopuna!
<br><br>


::: {.columns}
::: {.column width="50%"}
#### Strukturirani ekonomski podatci 

-   DZS ankete, FINA (GIF) izvještaji, GDP
-   **Prednosti:** Kvaliteta, struktura, pouzdanost
-   **Nedostatci:** Spori, skupi, niska frkvencija
:::

::: {.column width="50%"}
#### Digitalni medijski podatci ⚡️

-   Vijesti, društvene mreže, tražilice, senzori
-   **Prednosti:** U stvarnom vremenu, otkrivene preferencije, novi uvidi
-   **Nedostatci:** Bučni, nestrukturirani, pristrani
:::
:::

---

## Digitalni medijski prostor RH

<br>
[Digitalni medijski prostor](https://raw.githack.com/lusiki/Medijska-matrica/main/docs/chapters/02-metodologija.html) sve je važniji dio [medijskog prostora u Hrvatskoj](https://reutersinstitute.politics.ox.ac.uk/digital-news-report/2025/croatia).
<br>

::: {.panel-tabset}
#### Koncept

Podatci uključuju: 
<br><br>
-  razdoblje 2021-06/2024-06
<br><br>
-  uključuju sve javne objave (N~21mil) 
<br><br>
-  web,fb,ig,x,yt,reddit,forum,komentari
<br><br>
-  49 karakteristika po objavi

#### Objave
```{r plot1, echo=FALSE, message=FALSE, warning=FALSE}
# Učitavanje potrebnih paketa
required_packages <- c(
  "duckdb",       # Za efikasno upravljanje podacima slično bazi podataka
  "dplyr",        # Za manipulaciju podacima
  "ggplot2",      # Za vizualizacije
  "lubridate",    # Za rad s datumima i vremenom
  "scales",       # Za formatiranje brojeva u vizualizacijama
  "knitr",        # Za kable tablice
  "RColorBrewer", # Za palete boja
  "stringr",      # Za manipulaciju tekstom
  "tidyr",        # Za pivotiranje podataka za vizualizacije
  "ggrepel",      # Za izbjegavanje preklapanja teksta na grafikonima
  "fmsb",
  "kableExtra"
)

for (pkg in required_packages) {
  # Ovdje pretpostavljamo da su svi paketi instalirani
  library(pkg, character.only = TRUE)
}


# --- Povezivanje s DuckDB bazom podataka ---
# VAŽNO: Prilagodite putanju do vaše .duckdb datoteke!
duckdb_file_path <- "C:/Users/lukas/Determbaza/DetermDB/determDB.duckdb" # <--- PRILAGODITE OVO!
table_name <- "media_data"

if (!file.exists(duckdb_file_path)) {
  stop("DuckDB datoteka nije pronađena na navedenoj putanji: ", duckdb_file_path, 
       "\nMolimo provjerite putanju ili pokrenite skriptu za učitavanje XLSX datoteka.")
}

con <- dbConnect(duckdb::duckdb(), dbdir = duckdb_file_path, read_only = FALSE)
message("Povezano s perzistentnom DuckDB bazom za analizu.")
l <- dbExecute(con, "SET memory_limit='16GB';") # Održavanje memorijskog limita

# --- Provjera statusa tablice i broja objava ---
# Ispravka za izvlačenje numeričke vrijednosti iz data.frame-a
count_result <- dbGetQuery(con, paste0("SELECT COUNT(*) FROM ", table_name, ";"))[[1]]

# --- 2. Dominacija platformi i njihove napredne performanse (Udio, Učinkovitost i Interakcijski Profil) ---
platform_overview_ultimate <- dbGetQuery(con, paste0("
  SELECT
    SOURCE_TYPE,
    COUNT(*) AS num_posts,
    SUM(INTERACTIONS) AS total_interactions,
    SUM(REACH) AS total_reach,
    AVG(INTERACTIONS) AS avg_interactions_per_post,
    AVG(REACH) AS avg_reach_per_post,
    AVG(ENGAGEMENT_RATE) AS platform_avg_engagement_rate,
    AVG(VIRALITY) AS platform_avg_virality,
    (SUM(SHARE_COUNT) * 1.0 / NULLIF(SUM(INTERACTIONS), 0)) * 100 AS platform_shareability_index,
    (SUM(LIKE_COUNT) * 1.0 / NULLIF(SUM(INTERACTIONS), 0)) * 100 AS platform_like_ratio,
    (SUM(COMMENT_COUNT) * 1.0 / NULLIF(SUM(INTERACTIONS), 0)) * 100 AS platform_comment_ratio
  FROM ", table_name, "
  GROUP BY SOURCE_TYPE
  ORDER BY num_posts DESC;
")) %>%
  mutate(across(c(platform_avg_engagement_rate, platform_avg_virality, platform_shareability_index, platform_like_ratio, platform_comment_ratio),
                ~ifelse(is.nan(.), 0, .))) # Handle potential NaN for display



# Vizualizacija 1: Ukupan broj objava po platformi (General Overview - Posts per Platform)
ggplot(
  platform_overview_ultimate, 
  # Modern syntax for horizontal bars: y-axis is the category, x-axis is the value
  aes(x = num_posts, y = reorder(SOURCE_TYPE, num_posts), fill = SOURCE_TYPE)
) +
  
  # geom_col() is the modern replacement for geom_bar(stat="identity")
  geom_col() +
  
  # Add formatted text labels that match the plot's font
  geom_text(
    aes(label = scales::comma(num_posts, accuracy = 1)), 
    hjust = -0.1, 
    size = 3.5, 
    family = "Roboto Mono" # Ensures font consistency with the global theme
  ) +
  
  # THE FIX: Apply your custom color mapping
  scale_fill_manual(values = platform_color_mapping) +
  
  # Format the x-axis and add space for labels
  scale_x_continuous(
    labels = scales::comma, 
    expand = expansion(mult = c(0.01, 0.15))
  ) +
  
  # Remove the redundant legend
  guides(fill = "none") +
  
  # Add clearer, more professional titles
  labs(
    title = "Ukupan broj objava po platformi",
    subtitle = "",
    x = "Broj objava",
    y = "Tip platforme"
  ) +
  
  # Final theme tweaks for a cleaner look
  theme(
    panel.grid.major.y = element_blank(), # Remove horizontal grid lines for focus
    panel.grid.minor.x = element_blank()
  )


```





```{r , eval=FALSE, echo=FALSE, message=FALSE, warning=FALSE}

#### Dnevno
# --- 3. Dnevna deskriptivna statistika po platformi (uklj. varijabilnost) ---

# KORAK 1: Dohvaćanje DNEVNIH zbrojeva iz baze podataka
daily_query <- paste0("
  SELECT
    date(DATETIME) AS date,
    SOURCE_TYPE,
    COUNT(*) AS num_posts,
    SUM(INTERACTIONS) AS total_interactions,
    SUM(REACH) AS total_reach,
    AVG(ENGAGEMENT_RATE) AS daily_avg_engagement_rate,
    AVG(VIRALITY) AS daily_avg_virality
  FROM ", table_name, "
  WHERE DATETIME IS NOT NULL AND SOURCE_TYPE IS NOT NULL
  -- ISPRAVAK JE OVDJE:
  -- Morate grupirati po samoj funkciji, a ne po aliasu 'date'
  GROUP BY date(DATETIME), SOURCE_TYPE
  -- U ORDER BY klauzuli alias 'date' je dozvoljen
  ORDER BY date, SOURCE_TYPE;
")

# Izvršavanje upita
daily_data_per_platform <- dbGetQuery(con, daily_query)

# KORAK 2: Izračun deskriptivnih statistika u R-u
# (Ovaj dio ostaje potpuno isti kao prije)
desc_stats_table <- daily_data_per_platform %>%
  group_by(SOURCE_TYPE) %>%
  summarise(
    platforma = first(SOURCE_TYPE),
    ukupno_aktivnih_dana = n_distinct(date),
    
    # --- Statistika za dnevne objave ---
    prosjek_dnevnih_objava = mean(num_posts, na.rm = TRUE),
    medijan_dnevnih_objava = median(num_posts, na.rm = TRUE),
    varijabilnost_objava_sd = sd(num_posts, na.rm = TRUE),
    min_dnevnih_objava = min(num_posts, na.rm = TRUE),
    max_dnevnih_objava = max(num_posts, na.rm = TRUE),

    # --- Statistika za dnevne interakcije ---
    prosjek_dnevnih_interakcija = mean(total_interactions, na.rm = TRUE),
    medijan_dnevnih_interakcija = median(total_interactions, na.rm = TRUE),
    varijabilnost_interakcija_sd = sd(total_interactions, na.rm = TRUE),

    # --- Statistika za dnevni doseg ---
    prosjek_dnevnog_dosega = mean(total_reach, na.rm = TRUE),
    medijan_dnevnog_dosega = median(total_reach, na.rm = TRUE),
    varijabilnost_dosega_sd = sd(total_reach, na.rm = TRUE),
    
    # --- Prosjeci dnevnih stopa ---
    prosjek_dnevnog_engagement_rate = mean(daily_avg_engagement_rate, na.rm = TRUE),
    prosjek_dnevne_viralnosti = mean(daily_avg_virality, na.rm = TRUE),
    
    .groups = 'drop'
  ) %>%
  mutate(across(where(is.numeric), ~ifelse(is.nan(.) | is.infinite(.), 0, .))) %>%
  select(platforma, ukupno_aktivnih_dana, prosjek_dnevnih_objava, medijan_dnevnih_objava, varijabilnost_objava_sd, everything())

# --- KORAK 3: Prikaz tablice ---
kable(desc_stats_table,
      digits = 2,
      caption = "Dnevna deskriptivna statistika performansi po platformi"
) %>%
  kable_styling(
    # Maknuli smo 'full_width = FALSE'
    # Također smo maknuli 'responsive' što je dobro za scroll_box
    bootstrap_options = c("striped", "hover", "condensed")
  ) %>%
  scroll_box(
    width = "100%",  # Kontejner zauzima punu širinu
    height = "400px" # Za vertikalni scroll ako treba
  )
```


#### Interakcije
```{r , echo=FALSE, message=FALSE, warning=FALSE}
# Vizualizacija 2: Ukupne interakcije po platformi (General Overview - Interactions per Platform)
ggplot(
  platform_overview_ultimate, 
  # Modern syntax: y-axis is the category, x-axis is the value
  aes(x = total_interactions, y = reorder(SOURCE_TYPE, total_interactions), fill = SOURCE_TYPE)
) +
  
  # Use geom_col() for a cleaner look
  geom_col() +
  
  # Add formatted text labels with the correct font
  geom_text(
    aes(label = scales::comma(total_interactions, accuracy = 1)), 
    hjust = -0.1, 
    size = 3.5, 
    family = "Roboto Mono" # Ensures font consistency
  ) +
  
  # APPLY THE FIX: Use your custom color mapping
  scale_fill_manual(values = platform_color_mapping) +
  
  # Format the x-axis and add space for labels
  scale_x_continuous(
    labels = scales::comma, 
    expand = expansion(mult = c(0.01, 0.15))
  ) +
  
  # Remove the redundant legend
  guides(fill = "none") +
  
  # Use the clear, professional titles from your original code
  labs(
    title = "Ukupne interakcije po platformi ",
    subtitle = "",
    x = "Ukupne interakcije",
    y = "Tip platforme"
  ) +
  
  # Final theme tweaks for a clean, professional look
  theme(
    panel.grid.major.y = element_blank(), # Remove horizontal grid lines
    panel.grid.minor.x = element_blank()
  )
```

#### Efikasnost I
```{r , echo=FALSE, message=FALSE, warning=FALSE}
# --- 2. THE REVISED GGPLOT CODE FOR TOTAL REACH ---
# Assuming your data is named 'platform_overview_ultimate'
ggplot(
  platform_overview_ultimate, 
  # Modern syntax: y-axis is the category, x-axis is the value
  aes(x = total_reach, y = reorder(SOURCE_TYPE, total_reach), fill = SOURCE_TYPE)
) +
  
  # Use geom_col() for a cleaner look
  geom_col() +
  
  # Add formatted text labels with the correct font
  geom_text(
    aes(label = scales::comma(total_reach, accuracy = 1)), 
    hjust = -0.1, 
    size = 3.5, 
    family = "Roboto Mono" # Ensures font consistency
  ) +
  
  # APPLY THE FIX: Use your consistent, on-brand color mapping
  scale_fill_manual(values = platform_color_mapping) +
  
  # Format the x-axis and add space for labels
  scale_x_continuous(
    labels = scales::comma, 
    expand = expansion(mult = c(0.01, 0.15))
  ) +
  
  # Remove the redundant legend
  guides(fill = "none") +
  
  # Use the clear, professional titles from your original code
  labs(
    title = "Ukupan doseg po  platformi",
    subtitle = "Gdje se ostvaruje najveći ukupan doseg publike?",
    x = "Ukupan doseg",
    y = "Tip platforme"
  ) +
   # Final theme tweaks for a clean, professional look
  theme(
    panel.grid.major.y = element_blank(), # Remove horizontal grid lines
    panel.grid.minor.x = element_blank())
```

#### Efikasnost II
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# --- 1. THE COLOR MAPPING (Should already be defined in your script) ---
# Reusing this ensures a consistent visual identity across all your plots.
platform_color_mapping <- c(
  "web"       = "#003366",  # HNB Dark Blue
  "facebook"  = "#5B9BD5",  # HNB Medium Blue
  "comment"   = "#C00000",  # HNB Accent Red
  "twitter"   = "#BF8F00",  # HNB Accent Gold
  "forum"     = "#005F56",  # HNB Dark Green
  "reddit"    = "#A0522D",  # Muted Sienna
  
  # --- New Additions ---
  "youtube"   = "#4A4A4A",  # Professional Charcoal Grey
  "tiktok"    = "#8A798C",  # Muted Mauve
  "instagram" = "#5D478B"   # Deep Slate Purple
)

# --- 2. THE REVISED GGPLOT CODE FOR AVERAGE INTERACTIONS ---
# Assuming your data is named 'platform_overview_ultimate'
ggplot(
  platform_overview_ultimate, 
  # Modern syntax: y-axis is the category, x-axis is the value
  aes(x = avg_interactions_per_post, y = reorder(SOURCE_TYPE, avg_interactions_per_post), fill = SOURCE_TYPE)
) +
  
  # Use geom_col() for a cleaner look
  geom_col() +
  
  # Add formatted text labels with the correct font.
  # round() is a great choice for averages with decimals.
  geom_text(
    aes(label = round(avg_interactions_per_post, 2)), 
    hjust = -0.1, 
    size = 3.5, 
    family = "Roboto Mono" # Ensures font consistency
  ) +
  
  # APPLY THE FIX: Use your custom color mapping
  scale_fill_manual(values = platform_color_mapping) +
  
  # Format the x-axis and add space for labels
  scale_x_continuous(
    labels = scales::comma, 
    expand = expansion(mult = c(0.01, 0.15))
  ) +
  
  # Remove the redundant legend
  guides(fill = "none") +
  
  # Use the clear, professional titles from your original code
  labs(
    title = "Prosječne interakcije po objavi po platformi",
    subtitle = "",
    x = "Prosječne interakcije po objavi",
    y = "Tip platforme"
  ) +
  
  # Final theme tweaks for a clean, professional look
  theme(
    panel.grid.major.y = element_blank(), # Remove horizontal grid lines
    panel.grid.minor.x = element_blank()
  )
```


```{r probaI, eval=FALSE, echo=FALSE, message=FALSE, warning=FALSE}


# --- 1. CREATE THE GGPLOT OBJECT 'p' (Your existing code is perfect) ---
p <- ggplot(
  platform_overview_ultimate, 
  aes(
    x = avg_interactions_per_post, 
    y = reorder(SOURCE_TYPE, avg_interactions_per_post), 
    fill = SOURCE_TYPE,
    text = paste("Platforma:", SOURCE_TYPE, "<br>Prosjek interakcija:", round(avg_interactions_per_post, 2))
  )
) +
  geom_col() +
  scale_fill_manual(values = platform_color_mapping) +
  scale_x_continuous(labels = scales::comma, expand = expansion(mult = c(0.01, 0.15))) +
  guides(fill = "none") +
  labs(
    title = "Prosječne interakcije po objavi po platformi",
    subtitle = "Učinkovitost platformi u generiranju angažmana na pojedinačnim objavama",
    x = "Prosječne interakcije po objavi",
    y = "Tip platforme"
  ) +
  theme_minimal(base_family = "Roboto Mono") +
  theme(
    panel.grid.major.y = element_blank(),
    panel.grid.minor.x = element_blank()
  )

# --- 2. CALCULATE A DYNAMIC HEIGHT ---
# Rule of thumb: Give each bar ~40 pixels + ~150 pixels for titles/axes.
num_platforms <- nrow(platform_overview_ultimate)
dynamic_height <- (num_platforms * 40) + 150

# --- 3. CONVERT TO PLOTLY WITH CUSTOM DIMENSIONS ---
# Add the height and width arguments to the ggplotly() call
ggplotly(p, tooltip = "text", height = dynamic_height, width = NULL)


```

```{r probaII, eval=FALSE, echo=FALSE, message=FALSE, warning=FALSE}
# --- 1. PREPARE THE DATA (This part is correct) ---
plot_data <- platform_overview_ultimate %>%
  # Use forcats::fct_reorder for robust ordering
  mutate(SOURCE_TYPE = forcats::fct_reorder(SOURCE_TYPE, avg_interactions_per_post))

# --- 2. BUILD THE NATIVE PLOTLY CHART (REVISED STRUCTURE) ---
plot_ly(
  data = plot_data,
  x = ~avg_interactions_per_post,
  y = ~SOURCE_TYPE
) %>%
  # EXPLICITLY ADD THE BARS: This is the robust way to add a trace
  add_bars(
    color = ~SOURCE_TYPE,          # Map color to the platform
    colors = platform_color_mapping, # Use our custom color palette
    orientation = 'h',
    # Customize the hover text with HTML formatting
    hovertemplate = paste(
      "<b>%{y}</b><br>",
      "Prosjek interakcija: %{x:.2f}",
      "<extra></extra>" # Magic tag to hide the trace name
    )
  ) %>%
  # Now, apply the layout to the finished plot
  layout(
    title = list(
      text = "<b>Prosječne interakcije po objavi po platformi</b><br><sub>Učinkovitost platformi u generiranju angažmana</sub>",
      font = list(family = "Roboto Mono")
    ),
    xaxis = list(title = "Prosječne interakcije po objavi"),
    yaxis = list(title = "Tip platforme"),
    showlegend = FALSE, # Hide the legend
    # FIX: Complete the font list
    font = list(family = "Roboto Mono", color = hnb_colors["medium_grey"]) 
  )
```


#### Dinamika
```{r , echo=FALSE, message=FALSE, warning=FALSE}
monthly_full_trends <- dbGetQuery(con, paste0("
  SELECT
    strftime(DATETIME, '%Y-%m') AS month_label,
    strftime(DATETIME, '%Y') AS year,
    strftime(DATETIME, '%m') AS month_num,
    COUNT(*) AS num_posts,
    SUM(INTERACTIONS) AS total_interactions,
    SUM(REACH) AS total_reach,
    AVG(INTERACTIONS) AS avg_interactions_per_post,
    AVG(REACH) AS avg_reach_per_post,
    AVG(ENGAGEMENT_RATE) AS monthly_avg_engagement_rate,
    AVG(VIRALITY) AS monthly_avg_virality,
    (SUM(SHARE_COUNT) * 1.0 / NULLIF(SUM(INTERACTIONS), 0)) * 100 AS monthly_shareability_index
  FROM ", table_name, "
  WHERE DATETIME IS NOT NULL
  GROUP BY month_label, year, month_num
  ORDER BY month_label;
")) %>%
  mutate(month = ymd(paste0(month_label, "-01"))) %>%
  filter(!is.na(month)) %>%
  mutate(across(c(monthly_avg_engagement_rate, monthly_avg_virality, monthly_shareability_index),
                ~ifelse(is.nan(.), 0, .))) %>%
  
  # --- FIX IS HERE: Remove the last row (the incomplete month) ---
  slice(1:(n()-1))


# The rest of your plotting code remains exactly the same.
# It will now plot without the final drop.
coeff <- max(monthly_full_trends$total_interactions, na.rm = TRUE) / max(monthly_full_trends$num_posts, na.rm = TRUE)

    
# DEFINE LABELS AS VARIABLES to prevent typos
label_posts <- "Broj objava"
label_interactions <- "Ukupne interakcije"

ggplot(monthly_full_trends, aes(x = month)) +
  
  # Use the variables for the color labels
  geom_line(aes(y = num_posts, color = label_posts), linewidth = 1) +
  geom_point(aes(y = num_posts, color = label_posts), size = 2.5) +
  
  geom_line(aes(y = total_interactions / coeff, color = label_interactions), linewidth = 1) +
  geom_point(aes(y = total_interactions / coeff, color = label_interactions), size = 2.5) +
  
  # Define the primary and secondary y-axes
  scale_y_continuous(
    name = label_posts, # Use the variable here too for consistency
    labels = scales::comma,
    sec.axis = sec_axis(~ . * coeff, name = label_interactions, labels = scales::comma)
  ) +
  
  # --- CHANGED: Hard-coded hex values ---
  scale_color_manual(
    name = "Metrika:", 
    values = setNames(
      c("#003366", "#C00000"), 
      c(label_posts, label_interactions)
    )
  ) +
  
  # Use clear, professional labels
  labs(
    title = "Mjesečni trend objava i interakcija",
    subtitle = "Usporedba produkcije sadržaja i angažmana publike (završeni mjeseci)",
    x = "Mjesec",
    y = label_posts
  ) +
  
  # --- CHANGED: Hard-coded hex values in the theme ---
  theme_minimal(base_size = 12) + # Added base_size for better readability
  theme(
    legend.position = "top",
    axis.title.y.left = element_text(color = "#003366", face = "bold"),
    axis.text.y.left = element_text(color = "#003366"),
    axis.title.y.right = element_text(color = "#C00000", face = "bold"),
    axis.text.y.right = element_text(color = "#C00000")
  )

```



:::

---

## Strateška razina
<br> 
Dva svijeta HNB: Stručna rasprava vs. javna arena! 
<br>

::: {.panel-tabset}

#### Koncept

Analiza 20k medijskih objava o HNB pokazuje dva različita svijeta koji se rijetko dodiruju...sve dok ih ključna tema ne prisili na to. Inflacija, od monetarnog do medijskog fenomena!


#### Interakcije
```{r plot22, echo=FALSE, message=FALSE, warning=FALSE}

# --- Priprema podataka (izvršava se u pozadini) ---

# Učitavanje glavne baze podataka
# remove titkok from SOURCE_TYPE
dta <- readRDS("C:/Users/lukas/Determbaza/hnb.rds") %>%
  mutate(
    DATE = as.Date(DATE), # Convert the column to Date class first
    year = as.integer(format(DATE, "%Y"))
  ) %>%
  filter(SOURCE_TYPE != "tiktok") %>%
  mutate(
    SOURCE_TYPE = factor(SOURCE_TYPE, levels = c("web", "youtube", "facebook", "twitter", "reddit", "forum", "comment"))
  ) %>%
  #remove year 2024
  filter(DATE >= as.Date("2021-01-01") & DATE < as.Date("2024-01-01")) %>%
  filter(year != 2024) %>%
  mutate(doc_id = row_number())



# Kreiranje stratificiranog uzorka
# sample_proportion <- 0.05
# set.seed(123)
# dta_stratified_sample <- dta %>%
#   filter(nchar(FULL_TEXT) > 100) %>%
#   group_by(year, SOURCE_TYPE) %>%
#   slice_sample(prop = sample_proportion) %>%
#   ungroup() %>%
#   mutate(doc_id = row_number())

# Učitavanje prethodno obrađenih lingvističkih podataka (štedi vrijeme)
files <- list.files("C:/Users/lukas/Determbaza/Language model sample", full.names = TRUE, pattern = "\\.rds")
nlp_results_df <- lapply(files, readRDS) %>%
  bind_rows() %>%
  mutate(doc_id = as.integer(doc_id))

# Definicija tematskih rječnika v3
thematic_dictionaries_v3 <- list(
  
  # 1. Glavna funkcija HNB-a: kontrola cijena i novčane mase
  MONETARNA_POLITIKA_I_INFLACIJA = sort(c(
    "agregat", "cijen", "ciljan", "deflacij", "dezinflacij", "eskontn", 
    "ekspanzivn", "hro", "inflacij", "kamatn", "kamatna stopa", "kreditni plasmani", 
    "likvidnost", "mas", "monetarn", "novčan", "obvezna pričuva", "otvoreno tržište",
    "ponud", "potražnj", "referentn", "repo", "restriktivn", "stabilnost cijena", 
    "stop", "transmisijsk"
  )),
  
  # 2. Druga glavna funkcija: nadzor banaka i osiguranje zdravlja financijskog sustava
  FINANCIJSKA_STABILNOST_I_NADZOR_BANAKA = sort(c(
    "adekvatnost kapitala", "aml", "bank", "basel", "bonitet", "depozit", "financijsk", 
    "hanfa", "institucij", "kapitalni zahtjev", "kreditn", "leasing", "likvidacij",
    "loš kredit", "makrobonitetn", "nadzor", "nenaplativ", "npl", "osiguranje", 
    "osiguranje depozita", "regulacij", "rizik", "sanacij", "sistemsk",
    "sprečavanje pranja novca", "stabilnost", "stečaj", "stres test", "supervizij"
  )),
  
  # 3. Ključna tema u promatranom razdoblju
  UVODJENJE_EURA_I_TECAJ = sort(c(
    "aprecijacij", "cent", "deprecijacij", "devizn", "devizni tečaj", "dvostruki optjecaj", 
    "erm ii", "eur", "eurozon", "eurosustav", "fiksni tečaj", "konverzij", "kovnica novca",
    "kuna", "lipa", "prilagodb", "tečaj", "uvođenj", "zamjen", "zaokruživanj"
  )),
  
  # 4. HNB kao analitička institucija koja objavljuje projekcije za gospodarstvo
  MAKROEKONOMSKE_ANALIZE_I_PROGNOZE = sort(c(
    "analiz", "bdp", "bilten", "dug", "ekonomsk", "fiskaln", "gospodarsk", 
    "industrijska proizvodnja", "investicij", "izvoz", "izvješć", "javni dug", 
    "konkurentnost", "kretanj", "makroekonomsk", "nezaposlenost", "očekivanj", 
    "potrošnj", "prognoz", "projekcij", "rast", "recesij", "uvoz", "zaposlenost"
  )),
  
  # 5. Funkcioniranje same institucije, njezinih tijela i transparentnost
  UPRAVLJANJE_I_TRANSPARENTNOST_HNB = sort(c(
    "devizne pričuve", "dobit", "guverner", "gubitak", "hnb", "izvješće saboru", 
    "mandat", "neovisnost", "odluk", "pričuv", "proračun hnb", "revizij", "savjet hnb",
    "sjednic", "statut", "transparentnost", "viceguverner", "zakon o hnb", "zlato", 
    "zlatne rezerve"
  )),
  
  # 6. Upravljanje fizičkim i digitalnim novcem te platnim sustavima
  PLATNI_PROMET_I_GOTOVINA = sort(c(
    "beskontaktn", "cbdc", "digitalna valuta", "digitalni euro", "digitalni novac", 
    "fintech", "gotovin", "gotovinsk", "kartic", "kovanic", "kriptovalut", "nks", 
    "novčanic", "platni promet", "target2", "transakcij"
  )),
  
  # 7. Odnosi s ključnim međunarodnim financijskim institucijama
  MEDJUNARODNI_ODNOSI_I_EU = sort(c(
    "banka za međunarodne namire", "bis", "članstv", "ebrd", "ecb", "esb", 
    "europska komisija", "europska središnja banka", "europsk", "fitch", "imf", 
    "kreditni rejting", "mmf", "moody's", "s&p", "suradnj", "svjetska banka"
  )),
  
  # 8. Teme koje izazivaju javnu polemiku i kritike na račun HNB-a
  JAVNA_PERCEPCIJA_I_KRITIKE = sort(c(
    "afer", "dužnic", "etika", "franak", "klub", "kritik", "netransparentnost",
    "odgovornost", "plać", "polemik", "potrošač", "povjerenj", "presud", "skandal",
    "sukob interesa", "švicarac", "troškov", "tužb", "udruga franak", "zaštita potrošača"
  ))
)


hnb_duznosnici_dict <- list(
  HNB_DUZNOSNICI = c(
    # Sadašnji i nedavni čelnici
    "boris vujčić", "vujčić",
    "sandra švaljek", "švaljek",
    "tomislav ćorić", "ćorić",
    "michael faulend", "faulend",
    "bojan fras", "fras",
    "ivana jakir-bajo", "martina jakir-bajo", "jakir-bajo", "jakir", # Uključene obje verzije imena
    "maroje lang", "lang",
    "roman šubić", "šubić",
    "slavko tešija", "tešija",
    "martina drvar", "drvar",
    
    # Bivši guverneri
    "željko rohatinski", "rohatinski",
    "marko škreb", "škreb",
    
    # Povezani stručnjaci iz HNB-a
    "evan kraft", "kraft" # bivši savjetnik
  )
)

# ===================================================================
# 2. POLITIČKI AKTERI (VLADA I PREDSJEDNIK)
# ===================================================================
politicki_akteri_dict <- list(
  POLITICKI_AKTERI = c(
    "andrej plenković", "plenković",
    "zoran milanović", "milanović",
    "davor škrlec", "škrlec" # Bivši EU zastupnik, čest kritičar
  )
)

# ===================================================================
# 3. NEOVISNI ANALITIČARI, AKADEMICI I NOVINARI
# ===================================================================
analiticari_i_mediji_dict <- list(
  ANALITICARI_I_MEDIJI = c(
    # Ekonomski analitičari i profesori
    "velimir šonje", "šonje",
    "ljubo jurčić", "jurčić",
    "ivo družić", "družić",
    
    # Specijalizirani novinari
    "marina klepo", "klepo",
    "boris pavković", "pavković"
  )
)

# ===================================================================
# 4. ČELNICI DRUGIH FINANCIJSKIH INSTITUCIJA
# ===================================================================
financijske_institucije_dict <- list(
  FINANCIJSKE_INSTITUCIJE = c(
    # HANFA
    "ante žigman", "žigman", # sadašnji predsjednik
    "ante matek", "matek",   # bivši predsjednik
    
    # HUB (Hrvatska udruga banaka)
    "tamara perko", "perko", # sadašnja predsjednica
    "zdenko rogić", "rogić", # bivši predsjednik
    
    # HBOR
    "miroslav gržetić", "gržetić"
  )
)

# ===================================================================
# 5. MEĐUNARODNI DUŽNOSNICI (ECB, MMF)
# ===================================================================
medjunarodni_duznosnici_dict <- list(
  MEDJUNARODNI_DUZNOSNICI = c(
    # ECB
    "christine lagarde", "lagarde",
    "mario draghi", "draghi",
    
    # MMF
    "jan kees martijn", "martijn",
    "hans-jörg rudloff", "rudloff" # Napomena: Rudloff je bio predstavnik investicijske banke, ne MMF-a
  )
)

# ===================================================================
# 6. SINDIKALNI I DRUGI PREDSTAVNICI
# ===================================================================
sindikati_i_drugi_dict <- list(
  SINDIKATI_I_DRUGI = c(
    "krešimir sever", "sever",
    "mladen novosel", "novosel"
  )
)



svi_ljudi_dictionary <- c(
  hnb_duznosnici_dict,
  politicki_akteri_dict,
  analiticari_i_mediji_dict,
  financijske_institucije_dict,
  medjunarodni_duznosnici_dict,
  sindikati_i_drugi_dict
)

# Kombiniranje s glavnim tematskim rječnikom
#final_dictionary <- c(hnb_thematic_dictionary_v2, svi_ljudi_dictionary)



# Izračun tematskih scoreova i obogaćivanje baze podataka
calculate_theme_scores <- function(text, dictionaries) {
  text_lower <- tolower(text)
  total_words <- str_count(text_lower, "\\w+")
  if (total_words == 0) return(NULL)
  scores <- purrr::map(dictionaries, ~sum(str_count(text_lower, .x)))
  normalized_scores <- purrr::map(scores, ~(.x / total_words) * 1000)
  names(normalized_scores) <- paste0("norm_", names(scores))
  scores_vec <- unlist(scores)
  if(all(scores_vec == 0)){
    dominant_topic <- "Nema Teme"
  } else {
    dominant_topic <- names(scores)[which.max(scores_vec)]
  }
  return(c(as.list(scores), as.list(normalized_scores), dominant_topic = dominant_topic))
}
theme_analysis_data <- purrr::map_dfr(dta$FULL_TEXT, ~calculate_theme_scores(., thematic_dictionaries_v3))
dta_enriched <- bind_cols(dta, theme_analysis_data)
dta_with_themes <- bind_cols(dta, theme_analysis_data)



theme_analysis_data2 <- purrr::map_dfr(dta$FULL_TEXT, ~calculate_theme_scores(., svi_ljudi_dictionary))
dta_enriched2 <- bind_cols(dta, theme_analysis_data2)
dta_with_themes2 <- bind_cols(dta, theme_analysis_data2)

```


```{r}


topic_palette <- c(
  "#003366",  # Dark Blue
  "#5B9BD5",  # Medium Blue
  "#C00000",  # Accent Red
  "#BF8F00",  # Accent Gold
  "#005F56",  # Dark Green
  "#A0522D",  # Muted Sienna
  "#7F7F7F",
  "#8A798C"  # Muted Mauve
  # Medium Grey
)

# --- 2. The data preparation (assuming it's already run) ---
engagement_by_topic <- dta_enriched %>%
  filter(dominant_topic != "Nema Teme") %>%
  group_by(dominant_topic) %>%
  summarise(
    avg_interactions = mean(INTERACTIONS, na.rm = TRUE),
    total_articles = n()
  ) %>%
  arrange(desc(avg_interactions))


# --- 3. Your plot code with the palette applied ---
ggplot(engagement_by_topic, 
       aes(x = avg_interactions, 
           y = reorder(dominant_topic, avg_interactions), 
           fill = dominant_topic)) +
  
  geom_col(width = 0.8) + 
  geom_text(aes(label = round(avg_interactions)), hjust = -0.2, size = 4) +
  expand_limits(x = max(engagement_by_topic$avg_interactions) * 1.1) +
  
  # --- Apply your custom color palette ---
  scale_fill_manual(values = topic_palette) +
  
  theme_minimal(base_size = 14) +
  labs(title = "Koje teme generiraju najviše interakcija?",
       subtitle = "Prosječan broj interakcija po članku za svaku dominantnu temu",
       x = "Prosječne interakcije", 
       y = "Dominantna tema") +
  theme(legend.position = "none")
```

#### Interakcije II

```{r}
engagement_by_topic2 <- dta_enriched2 %>%
  filter(dominant_topic != "Nema Teme") %>%
  group_by(dominant_topic) %>%
  summarise(
    avg_interactions = mean(INTERACTIONS, na.rm = TRUE),
    total_articles = n()
  ) %>%
  arrange(desc(avg_interactions))

# --- 2. Define your new 6-color palette ---
topic_palette <- c(
  "#003366",  # Dark Blue
  "#5B9BD5",  # Medium Blue
  "#C00000",  # Accent Red
  "#BF8F00",  # Accent Gold
  "#005F56",  # Dark Green
  "#A0522D"   # Muted Sienna
)

# --- 3. The corrected and colored plot code ---
ggplot(engagement_by_topic2, 
       # Map fill color to the topic
       aes(x = avg_interactions, 
           y = reorder(dominant_topic, avg_interactions), 
           fill = dominant_topic)) +
  
  # Remove the single fill color from here
  geom_col(width = 0.8) + 
  
  geom_text(aes(label = round(avg_interactions)), hjust = -0.2, size = 4) +
  
  # Corrected to use the new data frame 'engagement_by_topic2'
  expand_limits(x = max(engagement_by_topic2$avg_interactions) * 1.1) +
  
  # Apply your custom 6-color palette
  scale_fill_manual(values = topic_palette) +
  
  theme_minimal(base_size = 14) +
  labs(title = "Koje teme generiraju najviše interakcija?",
       subtitle = "Prosječan broj interakcija po članku za svaku dominantnu temu",
       x = "Prosječne interakcije", 
       y = "Dominantna tema") +
  
  # Hide the y-axis grid and the redundant legend
  theme(
    panel.grid.major.y = element_blank(),
    legend.position = "none"
  )
```

#### Centralnost

```{r plot3, echo=FALSE, message=FALSE, warning=FALSE}
thematic_intensity_data2 <- dta_enriched2 %>%
  select(starts_with("norm_")) %>%
  pivot_longer(everything(), names_to = "topic", values_to = "intensity") %>%
  mutate(topic = str_remove(topic, "norm_")) %>%
  filter(intensity > 0)

# --- 2. Define your 6-color palette ---
topic_palette <- c(
  "#003366",  # Dark Blue
  "#5B9BD5",  # Medium Blue
  "#C00000",  # Accent Red
  "#BF8F00",  # Accent Gold
  "#005F56",  # Dark Green
  "#A0522D"   # Muted Sienna
)

# --- 3. The colored ggplot code ---
ggplot(thematic_intensity_data2, 
       # Map fill color to the topic variable
       aes(x = intensity, 
           y = fct_reorder(topic, intensity, .fun = median),
           fill = topic)) +
  
  # Remove the static fill color from the geom
  geom_density_ridges(scale = 2, color = "white", alpha = 0.8) +
  
  # Apply your custom color palette
  scale_fill_manual(values = topic_palette) +
  
  scale_x_log10(breaks = c(1, 10, 100, 1000), labels = c("1", "10", "100", "1000")) +
  theme_minimal(base_size = 14) +
  labs(
    title = "Distribucija intenziteta tema",
    subtitle = "Koliko su teme centralne za članke u kojima se pojavljuju?",
    x = "Intenzitet teme (spominjanja na 1000 riječi, log skala)",
    y = "Tema"
  ) +
  # Hide the redundant legend
  theme(legend.position = "none")
```

#### Mreža

```{r lexicons_, echo=FALSE, message=FALSE, warning=FALSE}
# read in lexicons
CroSentilex_n <- read.delim("C:/Users/Lukas/Dropbox/Mislav@Luka/crosentilex-negatives.txt",
                                   header = FALSE,
                                   sep = " ",
                                   stringsAsFactors = FALSE,
                                   fileEncoding = "UTF-8")  %>%
                   rename(word = "V1", sentiment = "V2" ) %>%
                   mutate(brija = "NEG")

CroSentilex_p  <- read.delim("C:/Users/Lukas/Dropbox/Mislav@Luka/crosentilex-positives.txt",
                                   header = FALSE,
                                   sep = " ",
                                   stringsAsFactors = FALSE,
                                   fileEncoding = "UTF-8") %>%
                    rename(word = "V1", sentiment = "V2" ) %>%
                    mutate(brija = "POZ")


library(data.table)
crosentilex  <- rbind(setDT(CroSentilex_n), setDT(CroSentilex_p))
# # check lexicon data 
# #head(sample_n(Crosentilex_sve,1000),15)
# 
#  
CroSentilex_Gold  <- read.delim2("C:/Users/Lukas/Dropbox/Mislav@Luka/gs-sentiment-annotations.txt",
                                 header = FALSE,
                                 sep = " ",
                                 stringsAsFactors = FALSE) %>%
                    rename(word = "V1", sentiment = "V2" )
 # Encoding(CroSentilex_Gold$word) <- "UTF-8"
 # CroSentilex_Gold[1,1] <- "dati"
 # CroSentilex_Gold$sentiment <- str_replace(CroSentilex_Gold$sentiment , "-", "1")
 # CroSentilex_Gold$sentiment <- str_replace(CroSentilex_Gold$sentiment , "\\+", "2")
 # CroSentilex_Gold$sentiment <- as.numeric(unlist(CroSentilex_Gold$sentiment))
# check lexicon data 
#head(sample_n(CroSentilex_Gold,100),15)
crosentilex_gold_prepared <- CroSentilex_Gold %>%
  mutate(
    sentiment_value = case_when(
      sentiment == 2 ~ 1,   # Pozitivno
      sentiment == 1 ~ -1,  # Negativno
      TRUE ~ 0              # Neutralno
    )
  ) %>%
  select(word, sentiment_value)

 
nrc_lexicon  <- read_excel("C:/Users/Lukas/Dropbox/Mislav@Luka/lilaHR_clean.xlsx", sheet = "Sheet1") %>% select (-"...1")


# Prvo definiramo "rječnik" za prevođenje
emotion_translator_hr <- c(
  "Anger"        = "Ljutnja",
  "Anticipation" = "Iščekivanje",
  "Disgust"      = "Gađenje",
  "Fear"         = "Strah",
  "Joy"          = "Radost",
  "Sadness"      = "Tuga",
  "Surprise"     = "Iznenađenje",
  "Trust"        = "Povjerenje"
  # Ne trebamo 'Positive' i 'Negative' jer ih ionako filtriramo
)

# Sada modificiramo originalni cjevovod
nrc_lexicon_long <- nrc_lexicon %>%
  rename(word = HR) %>% 
  pivot_longer(
    cols = -word,
    names_to = "emotion",
    values_to = "value"
  ) %>%
  filter(value == 1) %>%
  select(word, emotion) %>%
  # Filtriramo opće sentimente PRIJE prevođenja
  filter(emotion != "Positive" & emotion != "Negative") %>%
  # DODAJEMO NOVI KORAK: Prevođenje stupca 'emotion'
  mutate(emotion = recode(emotion, !!!emotion_translator_hr))

nrc_lexicon_long_ <- read_excel("C:/Users/Lukas/Dropbox/Mislav@Luka/lilaHR_clean_long.xlsx", sheet = "Sheet1") %>% select (-"...1") 

```

```{r load-lexicons_, echo=FALSE, message=FALSE, warning=FALSE}
# --- FAZA 1: UČITAVANJE I PRIPREMA SVIH LEKSIKONA ---
# Ovaj chunk učitava sve potrebne jezične resurse i pretvara ih u "uredan" (tidy)
# format spreman za spajanje s lingvističkim podacima.
# Ključni koraci su forsiranje UTF-8 kodiranja i standardizacija formata.

# --- 1.1: CroSentilex (fina skala sentimenata) ---
# Učitavamo pozitivne i negativne liste i odmah ih spajamo u jedan leksikon
# sa standardiziranom numeričkom skalom.
crosentilex_full <- bind_rows(
  # Učitavanje negativnih riječi
  read.delim("C:/Users/Lukas/Dropbox/Mislav@Luka/crosentilex-negatives.txt",
             header = FALSE, sep = " ", stringsAsFactors = FALSE, fileEncoding = "UTF-8") %>%
    rename(word = "V1", sentiment_value = "V2") %>%
    mutate(sentiment_value = -sentiment_value), # Pretvaramo score u negativan
  
  # Učitavanje pozitivnih riječi
  read.delim("C:/Users/Lukas/Dropbox/Mislav@Luka/crosentilex-positives.txt",
             header = FALSE, sep = " ", stringsAsFactors = FALSE, fileEncoding = "UTF-8") %>%
    rename(word = "V1", sentiment_value = "V2") # Score je već pozitivan
) %>%
  as_tibble() # Pretvaramo u tibble radi bolje konzistentnosti

# --- 1.2: CroSentilex-Gold (kategorički sentiment) ---
# Učitavamo "zlatni standard" i pretvaramo tekstualne oznake u numeričku skalu (-1, 0, 1).
crosentilex_gold_prepared <- read.delim2("C:/Users/Lukas/Dropbox/Mislav@Luka/gs-sentiment-annotations.txt",
                                         header = FALSE, sep = " ", stringsAsFactors = FALSE, fileEncoding = "UTF-8") %>%
  rename(word = "V1", sentiment_str = "V2") %>%
  mutate(
    sentiment_value = case_when(
      sentiment_str == "+" ~ 1,
      sentiment_str == "-" ~ -1,
      TRUE ~ 0
    )
  ) %>%
  select(word, sentiment_value) %>%
  as_tibble()

# --- 1.3: NRC Leksikon Emocija (za psihološke procese) ---
# Učitavamo NRC leksikon, pretvaramo ga u "dugi" format i prevodimo na hrvatski.
nrc_lexicon_raw <- read_excel("C:/Users/Lukas/Dropbox/Mislav@Luka/lilaHR_clean.xlsx", sheet = "Sheet1") %>% 
                   select(-"...1") %>%
                   rename(word = HR)

# Rječnik za prevođenje engleskih naziva emocija
emotion_translator_hr <- c(
  "Anger" = "Ljutnja", "Anticipation" = "Iščekivanje", "Disgust" = "Gađenje",
  "Fear" = "Strah", "Joy" = "Radost", "Sadness" = "Tuga",
  "Surprise" = "Iznenađenje", "Trust" = "Povjerenje"
)

# Transformacija u dugi, prevedeni format
nrc_lexicon_long <- nrc_lexicon_raw %>% 
  pivot_longer(
    cols = all_of(names(emotion_translator_hr)), # Koristimo samo 8 glavnih emocija
    names_to = "emotion",
    values_to = "value"
  ) %>%
  filter(value == 1) %>% # Zadržavamo samo postojeće veze riječ-emocija
  mutate(emotion = recode(emotion, !!!emotion_translator_hr)) %>% # Prevodimo na hrvatski
  select(word, emotion)

# --- Provjera Učitanih Leksikona (opcionalno) ---
# print("Primjer CroSentilex-Full:")
# print(head(crosentilex_full))
# print("Primjer CroSentilex-Gold Prepared:")
# print(head(crosentilex_gold_prepared))
# print("Primjer NRC Long:")
# print(head(nrc_lexicon_long))
```

```{r , echo=FALSE, message=FALSE, warning=FALSE}
# --- MODUL ZA MREŽU NARATIVNE ATMOSFERE (ISPRAVLJENA I POBOLJŠANA VERZIJA) ---
library(widyr)
library(ggraph)
library(igraph)
library(textreg)


# 1. KORAK: Izračun frekvencija riječi iz 'nlp_results_df'
lemmatized_words_with_freq <- nlp_results_df %>%
  # Brojimo koliko se puta svaka lema pojavljuje u svakom dokumentu
  count(doc_id, lemma, name = "word_frequency")

# 2. KORAK: Izračun Sentiment Score-a (CroSentilex-Gold)
document_sentiments_gold <- lemmatized_words_with_freq %>%
  inner_join(crosentilex_gold_prepared, by = c("lemma" = "word")) %>%
  mutate(
    sentiment_value = as.numeric(sentiment_value),
    word_frequency = as.numeric(word_frequency)
  ) %>%
  group_by(doc_id) %>%
  summarise(sentiment_score_gold = sum(sentiment_value * word_frequency, na.rm = TRUE)) %>%
  ungroup()


# 3. KORAK: Izračun Indeksa Konfliktnog Jezika (CLI)
conflict_lexicon <- unique(c(
  (nrc_lexicon_long %>% filter(emotion %in% c("Ljutnja", "Gađenje", "Strah")) %>% pull(word)),
  (crosentilex_full %>% filter(sentiment_value <= -0.75) %>% pull(word)),
  c("laž", "skandal", "napad", "radikalan", "ideologija", "licemjerje", "sramotno", "mržnja", "podjela", "raskol", "manipulacija", "propaganda", "ekstrem", "kontroverz", "sukob", "kriza")
))


cli_scores <- lemmatized_words_with_freq %>%
  mutate(is_conflict = lemma %in% conflict_lexicon) %>%
  group_by(doc_id) %>%
  summarise(
    total_words = sum(word_frequency),
    conflict_words = sum(word_frequency[is_conflict])
  ) %>%
  mutate(cli = (conflict_words / total_words) * 1000) %>%
  ungroup()

# 4. KORAK: Spajanje SVIH metrika u jedan 'dta_final' dataframe
dta_final <- dta_enriched %>%
  left_join(document_sentiments_gold, by = "doc_id") %>%
  left_join(cli_scores %>% select(doc_id, cli), by = "doc_id") %>%
  mutate(
    sentiment_score_gold = ifelse(is.na(sentiment_score_gold), 0, sentiment_score_gold),
    cli = ifelse(is.na(cli), 0, cli)
  )


# 5. KORAK: Izračun Relativnog Indeksa Konflikta (RCI)
avg_cli_media <- dta_final %>% group_by(FROM) %>% summarise(avg_cli_media = mean(cli))
avg_cli_topic <- dta_final %>% group_by(dominant_topic) %>% summarise(avg_cli_topic = mean(cli))

dta_final <- dta_final %>%
  left_join(avg_cli_media, by = "FROM") %>%
  left_join(avg_cli_topic, by = "dominant_topic") %>%
  mutate(
    expected_cli = 0.5 * avg_cli_media + 0.5 * avg_cli_topic,
    rci = cli - expected_cli
  )


# --- ANALIZA MREŽE NARATIVNE ATMOSFERE ---

# 6. KORAK: Identifikacija dokumenata s više tema
mixed_topic_docs <- dta_final %>%
  select(doc_id, starts_with("norm_")) %>%
  pivot_longer(-doc_id, names_to = "topic", values_to = "intensity") %>%
  mutate(topic = str_remove(topic, "norm_")) %>%
  filter(intensity > 1.5) %>%
  add_count(doc_id) %>%
  filter(n >= 2) %>%
  select(doc_id, topic)

# 7. KORAK: Izoliranje atmosfere za relevantne dokumente
atmosphere_of_mixed_docs <- dta_final %>%
  filter(doc_id %in% unique(mixed_topic_docs$doc_id)) %>%
  select(doc_id, sentiment_score = sentiment_score_gold, rci)

# 8. KORAK: Efikasno računanje ko-okurencija i atmosfere parova
pair_data <- mixed_topic_docs %>%
  inner_join(atmosphere_of_mixed_docs, by = "doc_id")

narrative_pairs <- pair_data %>%
  pairwise_count(item = topic, feature = doc_id, upper = FALSE)


# document_topic_pairs <- pair_data %>%
#   # Stvaramo parove unutar svakog dokumenta
#   pairwise_count(item = topic, feature = doc_id, upper = FALSE) %>%
#   # Spajamo s originalnim podacima da bismo dobili atmosferu za svaki DOKUMENT u kojem se par pojavio
#   inner_join(atmosphere_of_mixed_docs, by = c("feature" = "doc_id"))


narrative_pair_data <- dta_final %>%
  # Odabiremo samo potrebne stupce
  select(doc_id, sentiment_score_gold, rci, starts_with("norm_")) %>%
  # Pretvaramo u dugi format
  pivot_longer(
    cols = starts_with("norm_"),
    names_to = "topic",
    values_to = "intensity"
  ) %>%
  # Uklanjamo prefiks 'norm_'
  mutate(topic = str_remove(topic, "norm_")) %>%
  # Zadržavamo samo jake teme
  filter(intensity > 1.5) %>%
  # KLJUČNI DIO: Spajamo dataframe sam sa sobom da stvorimo parove
  inner_join(., ., by = "doc_id") %>%
  # Zadržavamo samo jedinstvene parove (npr. izbjegavamo A-B i B-A)
  filter(topic.x < topic.y) %>%
  # Sada imamo dataframe gdje svaki redak predstavlja par tema u jednom dokumentu
  # i imamo atmosferu tog dokumenta
  select(doc_id, 
         item1 = topic.x, 
         item2 = topic.y, 
         sentiment_score = sentiment_score_gold.x, # .x jer su se imena duplicirala
         rci = rci.x)


graph_data <- narrative_pair_data %>%
  group_by(item1, item2) %>%
  summarise(
    n = n(), # Brojimo koliko se puta par pojavio
    avg_sentiment = mean(sentiment_score, na.rm = TRUE),
    avg_rci = mean(rci, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  filter(n > 10) # Zadržavamo samo parove s dovoljno članaka



set.seed(123)
graph_from_data_frame(graph_data, directed = FALSE) %>%
  ggraph(layout = "fr") +
    geom_edge_fan(
      aes(
        color = avg_sentiment, 
        width = avg_rci,
        alpha = n
      ), 
      arrow = NULL
    ) +
    geom_node_point(color = "black", size = 10) +
    geom_node_text(aes(label = str_wrap(name, 15)), color = "black", size = 3.5) +
    scale_edge_color_gradient2(
      low = "firebrick", mid = "lightgrey", high = "steelblue", midpoint = 0, 
      name="Prosj. sentiment\nnarativnog okvira"
    ) +
    scale_edge_width(
      range = c(1, 4), 
      name="Prosj. intenzitet konflikta (RCI)"
    ) +
    scale_edge_alpha(
      range = c(0.3, 1),
      name = "Broj članaka\n(Pouzdanost veze)"
    ) +
    theme_graph(base_family = "sans") +
    labs(
      title = "Mreža narativne atmosfere",
      subtitle = "Boja veze = tonalitet | Debljina veze = konflikt | Prozirnost veze = oouzdanost"
    )



```

#### Guverner


```{r}


lemmatized_words_with_freq <- nlp_results_df %>%
  count(doc_id, lemma, name = "word_frequency")

# --- 3.2: Izračun Sentiment Score-a (CroSentilex-Gold) ---
sentiment_counts_gold <- lemmatized_words_with_freq %>%
  inner_join(crosentilex_gold_prepared, by = c("lemma" = "word")) %>%
  filter(sentiment_value != 0) %>%
  count(doc_id, sentiment_value) %>%
  pivot_wider(names_from = sentiment_value, values_from = n, values_fill = 0)
if (!"1" %in% names(sentiment_counts_gold)) { sentiment_counts_gold <- sentiment_counts_gold %>% mutate(`1` = 0) }
if (!"-1" %in% names(sentiment_counts_gold)) { sentiment_counts_gold <- sentiment_counts_gold %>% mutate(`-1` = 0) }
document_sentiments_gold <- sentiment_counts_gold %>%
  rename(positive_words = `1`, negative_words = `-1`) %>%
  mutate(sentiment_score_gold = (positive_words - negative_words) / (positive_words + negative_words + 1e-6)) %>%
  select(doc_id, sentiment_score_gold)

# --- 3.3: Izračun Dominantne Emocije (NRC) ---
document_emotions <- lemmatized_words_with_freq %>%
  inner_join(nrc_lexicon_long, by = c("lemma" = "word")) %>%
  group_by(doc_id, emotion) %>%
  summarise(total_freq = sum(word_frequency), .groups="drop") %>%
  group_by(doc_id) %>%
  slice_max(order_by = total_freq, n = 1, with_ties = FALSE) %>%
  ungroup() %>%
  select(doc_id, dominant_emotion = emotion)

# --- 3.4: Izračun Indeksa Konflikta (CLI i RCI) za financijske teme ---
conflict_lexicon <- unique(c(
  (nrc_lexicon_long %>% filter(emotion %in% c("Ljutnja", "Gađenje", "Strah")) %>% pull(word)),
  (crosentilex_full %>% filter(sentiment_value <= -0.75) %>% pull(word)),
  c("kriza", "kolaps", "neuspjeh", "pogreška", "kritika", "neodgovorno", "rizično", "zabrinjavajuće", "nestabilno", "problematično", "kontroverzno", "sporno", "sumnjivo", "loš", "katastrofal", "kaotičan", "recesija", "inflacija", "deflacija", "bankrot")
))
cli_scores <- lemmatized_words_with_freq %>%
  mutate(is_conflict = lemma %in% conflict_lexicon) %>%
  group_by(doc_id) %>%
  summarise(
    total_words = sum(word_frequency),
    conflict_words = sum(word_frequency[is_conflict])
  ) %>%
  mutate(cli = (conflict_words / total_words) * 1000) %>% ungroup()

dta_temp <- dta_enriched %>%
  left_join(document_sentiments_gold, by = "doc_id") %>%
  left_join(document_emotions, by = "doc_id") %>%
  left_join(cli_scores %>% select(doc_id, cli), by = "doc_id") %>%
  mutate(
    sentiment_score = ifelse(is.na(sentiment_score_gold), 0, sentiment_score_gold),
    dominant_emotion = ifelse(is.na(dominant_emotion), "Neutralno", dominant_emotion),
    cli = ifelse(is.na(cli), 0, cli)
  )

avg_cli_media <- dta_temp %>% group_by(FROM) %>% summarise(avg_cli_media = mean(cli))
avg_cli_topic <- dta_temp %>% group_by(dominant_topic) %>% summarise(avg_cli_topic = mean(cli))

dta_final <- dta_temp %>%
  left_join(avg_cli_media, by = "FROM") %>%
  left_join(avg_cli_topic, by = "dominant_topic") %>%
  mutate(
    expected_cli = 0.5 * avg_cli_media + 0.5 * avg_cli_topic,
    rci = cli - expected_cli
  )
```




```{r narrative-biography-robust, fig.height=9}
# --- KOD ZA "ŽIVOTOPIS" MONETARNOG NARATIVA (ROBUSNA VERZIJA) ---

# (Koraci 1 i 2 - pronalaženje dokumenata i izdvajanje konteksta)
target_keyword <- "guverner"
docs_with_target <- nlp_results_df %>%
  filter(lemma == target_keyword) %>%
  distinct(doc_id) %>%
  pull(doc_id)

context_words <- nlp_results_df %>%
  filter(doc_id %in% docs_with_target) %>%
  filter(upos %in% c("NOUN", "ADJ")) %>%
  filter(lemma != target_keyword) %>%
  inner_join(dta_final %>% select(doc_id, year, sentiment_score), by = "doc_id")

# 3. KORAK: Agregacija
associated_words_atmosphere <- context_words %>%
  group_by(year, lemma) %>%
  summarise(
    total_cooccurrences = n(),
    avg_sentiment = mean(sentiment_score, na.rm = TRUE),
    .groups = "drop"
  )

# 4. KORAK: Prilagodljivo filtriranje
top_associated_words_final <- associated_words_atmosphere %>%
  group_by(year) %>%
  # Uzimamo top 12 riječi po co-okurencijama za svaku godinu
  arrange(desc(total_cooccurrences)) %>%
  slice_head(n = 12) %>%
  ungroup()

# 5. KORAK: Vizualizacija
ggplot(top_associated_words_final, aes(x = total_cooccurrences, y = reorder_within(lemma, total_cooccurrences, year), fill = avg_sentiment)) +
  geom_col() +
  scale_y_reordered() +
  scale_fill_gradient2(low = "firebrick", mid = "white", high = "steelblue", midpoint = 0, name="Prosj. sentiment\nove kombinacije") +
  facet_wrap(~ year, scales = "free_y") +
  theme_minimal(base_size = 12) +
  theme(strip.text = element_text(face = "bold")) +
  labs(
    title = "Evolucija i atmosfera narativa o guverneru HNB-a",
    subtitle = "",
    x = "Broj pojavljivanja riječi", y = "Asocirana riječ"
  )
```

:::

---

## Operativna razina

<br>
Komunikacijska strategija HNB-a koja ima uporište u podatcima!
<br>

::: {.panel-tabset}
#### Koncept

Nekoliko primjera...

#### Gdje 
```{r load-data}
# load only the pre-computed tables
platform_summary        <- readRDS("./platform_summary.rds")
proportions_summary     <- readRDS("./proportions_summary.rds")
source_summary          <- readRDS("./source_summary.rds")
top_sources_by_year     <- readRDS("./top_sources_by_year.rds")

top_web_sources         <- readRDS("./top_web_sources.rds")
top_youtube_sources     <- readRDS("./top_youtube_sources.rds")
top_facebook_sources    <- readRDS("./top_facebook_sources.rds")

web_actors              <- readRDS("./web_actors.rds")
youtube_actors          <- readRDS("./youtube_actors.rds")
facebook_actors         <- readRDS("./facebook_actors.rds")


```


```{r}

platform_color_mapping <- c(
  "web"       = "#003366",  # HNB Dark Blue
  "facebook"  = "#5B9BD5",  # HNB Medium Blue
  "comment"   = "#C00000",  # HNB Accent Red
  "twitter"   = "#BF8F00",  # HNB Accent Gold
  "forum"     = "#005F56",  # HNB Dark Green
  "youtube"   = "#7F7F7F",  # HNB Medium Grey
  "reddit"    = "#A0522D"
)



plot_volume <- platform_summary %>%
  # No need for tolower() as your data is already lowercase
  arrange(year, total_posts) %>%
  mutate(SOURCE_TYPE_ordered = factor(SOURCE_TYPE, levels = unique(SOURCE_TYPE))) %>%
  
  # --- CORRECTED AES MAPPING ---
  ggplot(aes(x = total_posts, y = SOURCE_TYPE_ordered, fill = SOURCE_TYPE_ordered)) +
  
  geom_col() +
  geom_text(aes(label = comma(total_posts, accuracy = 1)), hjust = -0.1, size = 3, color = "black") +
  facet_wrap(~year, scales = "free_y") +
  scale_x_continuous(labels = label_number(suffix = " K", scale = 1e-3)) +
  scale_fill_manual(values = platform_color_mapping) +
  theme_minimal(base_size = 14) +
  theme(
    legend.position = "none",
    strip.text = element_text(face = "bold", size = 16),
    panel.grid.major.y = element_blank(),
    axis.text.x = element_text(angle = 45, hjust = 1)
  ) +
  labs(
    title = "Broj objava po platformama (2021-2023)",
    subtitle = "",
    x = "Ukupan broj objava (u tisućama)",
    y = NULL, # Removed redundant y-axis title
    caption = "Napomena: Stupci su sortirani po volumenu."
  )

print(plot_volume)

```
#### Gdje II

```{r}
# Now, the adjusted ggplot code
plot_interactions <- platform_summary %>%
  filter(total_interactions > 0) %>%
  # ADDED: Clean data to ensure it matches the color map names
  mutate(SOURCE_TYPE = tolower(trimws(SOURCE_TYPE))) %>%
  arrange(year, total_interactions) %>%
  mutate(SOURCE_TYPE_ordered = factor(SOURCE_TYPE, levels = unique(SOURCE_TYPE))) %>%
  
  # CORRECTED: Use the same ordered variable for both y and fill
  ggplot(aes(x = total_interactions, y = SOURCE_TYPE_ordered, fill = SOURCE_TYPE_ordered)) +
  
  geom_col() +
  geom_text(aes(label = comma(total_interactions, accuracy = 1)), hjust = -0.1, size = 3, color = "black") +
  facet_wrap(~year, scales = "free_y") +
  scale_x_continuous(labels = label_number(suffix = " M", scale = 1e-6)) +
  
  # CORRECTED: Use the correct color map variable
  scale_fill_manual(values = platform_color_mapping) +
  
  theme_minimal(base_size = 14) +
  theme(
    legend.position = "none",
    strip.text = element_text(face = "bold", size = 16),
    panel.grid.major.y = element_blank(),
    axis.text.x = element_text(angle = 45, hjust = 1)
  ) +
  labs(
    title = "Ukupan broj interakcija na objave o HNB-u (2021–2023)",
    x = "Interakcije (u milijunima)",
    y = NULL, # Changed for a cleaner look
    caption = "Napomena: Stupci su sortirani po interakcijama. Prikazane su samo platforme s >0 interakcija."
  )

print(plot_interactions)

```

#### Gdje III

```{r}
# Adjusted ggplot code for the reach plot
plot_reach <- platform_summary %>%
  # ADDED: Clean data to ensure it matches the color map names
  mutate(SOURCE_TYPE = tolower(trimws(SOURCE_TYPE))) %>%
  arrange(year, total_reach) %>%
  mutate(
    SOURCE_TYPE_ordered = factor(SOURCE_TYPE, levels = unique(SOURCE_TYPE))
  ) %>%
  
  # CORRECTED: Use the same ordered variable for both y and fill
  ggplot(aes(x = total_reach, y = SOURCE_TYPE_ordered, fill = SOURCE_TYPE_ordered)) +
  
  geom_col() +
  geom_text(
    aes(label = comma(total_reach, accuracy = 1)),
    hjust = -0.1, size = 3, color = "black"
  ) +
  facet_wrap(~year, scales = "free_y") +
  scale_x_continuous(
    labels = label_number(suffix = " M", scale = 1e-6)
  ) +
  
  # CORRECTED: Use the correct color map variable
  scale_fill_manual(values = platform_color_mapping) +
  
  theme_minimal(base_size = 14) +
  theme(
    legend.position    = "none",
    strip.text         = element_text(face = "bold", size = 16),
    panel.grid.major.y = element_blank(),
    axis.text.x        = element_text(angle = 45, hjust = 1)
  ) +
  labs(
    title    = "Ukupan doseg po platformama (2021–2023)",
    x        = "Doseg (u milijunima)",
    y        = NULL, # Changed for a cleaner look
    caption  = "Napomena: Stupci su sortirani po dosegu."
  )

print(plot_reach)
```
#### Važnost

```{r}

plot_share_posts <- proportions_summary %>%
  mutate(SOURCE_TYPE = tolower(trimws(SOURCE_TYPE))) %>%
  ggplot(aes(x = year, y = post_share, fill = SOURCE_TYPE)) +
  geom_col(position = "fill") +
  scale_y_continuous(labels = percent_format()) +
  scale_x_continuous(breaks = c(2021, 2022, 2023)) +
  scale_fill_manual(values = platform_color_mapping) +
  theme_minimal(base_size = 14) +
  labs(title = "Udio objava", x = "Godina", y = "Postotak", fill = "Platforma") +
  
  # --- ADDED: Move the legend to the right ---
  theme(legend.position = "right")

plot_share_interactions <- proportions_summary %>%
  filter(total_interactions > 0) %>%
  mutate(SOURCE_TYPE = tolower(trimws(SOURCE_TYPE))) %>%
  ggplot(aes(x = year, y = interaction_share, fill = SOURCE_TYPE)) +
  geom_col(position = "fill") +
  scale_y_continuous(labels = percent_format()) +
  scale_x_continuous(breaks = c(2021, 2022, 2023)) +
  scale_fill_manual(values = platform_color_mapping, guide = "none") +
  theme_minimal(base_size = 14) +
  labs(title = "Udio interakcija", x = "Godina", y = "Postotak")

plot_share_reach <- proportions_summary %>%
  filter(total_reach > 0) %>%
  mutate(SOURCE_TYPE = tolower(trimws(SOURCE_TYPE))) %>%
  ggplot(aes(x = year, y = reach_share, fill = SOURCE_TYPE)) +
  geom_col(position = "fill") +
  scale_y_continuous(labels = percent_format()) +
  scale_x_continuous(breaks = c(2021, 2022, 2023)) +
  scale_fill_manual(values = platform_color_mapping, guide = "none") +
  theme_minimal(base_size = 14) +
  labs(title = "Udio dosega", x = "Godina", y = "Postotak")

# --- Combine the plots ---

plot_combined_share <- (plot_share_posts + plot_share_interactions + plot_share_reach) +
  plot_layout(guides = 'collect') & # Using '&' applies theme to all plots
  theme(legend.position = "right") # This is a more robust way with patchwork

plot_combined_share <- plot_combined_share +
  plot_annotation(
    title    = "Struktura digitalnog ekosustava (2021–2023)",
    subtitle = "Usporedba udjela platformi u ukupnom broju objava, interakcija i dosega.",
    caption  = "Web generira najviše sadržaja, ali YouTube i Facebook preuzimaju sve veći dio 'kolača' utjecaja."
  )

print(plot_combined_share)
```

#### Top20


```{r plot-lollipops-interactions, fig.width=13, fig.height=10, dpi=500}
create_top_source_plot <- function(data, platform_name, platform_color) {
  data <- data %>% arrange(total_interactions) %>% mutate(FROM = factor(FROM, levels = FROM))
  ggplot(data, aes(x = FROM, y = total_interactions)) +
    geom_segment(aes(x = FROM, xend = FROM, y = 0, yend = total_interactions), color = "grey", linewidth = 0.5) +
    geom_point(aes(size = total_posts), color = platform_color, alpha = 0.8) +
    coord_flip() +
    scale_y_continuous(labels = label_number(suffix = " K", scale = 1e-3)) +
    scale_size_continuous(range = c(2, 10), name = "Broj objava") +
    theme_light(base_size = 12) +
    theme(
      panel.grid.major.y = element_blank(), panel.border = element_blank(),
      axis.ticks.y = element_blank(), legend.position = "bottom",
      axis.text.x = element_text(angle = 45, hjust = 1)
    ) +
    labs(title = platform_name, x = "", y = "Ukupne interakcije (u tisućama)")
}

plot_web <- create_top_source_plot(top_web_sources, "Web portali", "#003366")
plot_youtube <- create_top_source_plot(top_youtube_sources, "YouTube kanali", "#7F7F7F")
plot_facebook <- create_top_source_plot(top_facebook_sources, "Facebook stranice", "#5B9BD5")

final_dashboard <- plot_web + plot_youtube + plot_facebook +
  plot_annotation(
    title = "Top 20 profila u digitalnom medijskom prostoru o HNB-u (2021-2023)",
    subtitle = "Rangirano prema ukupnim interakcijama. Veličina točke predstavlja ukupan broj objava.",
    caption = "Izvor: Analiza projekta 'Prikaz i analiza prisutnosti HNB-a u digitalnom medijskom prostoru'",
    theme = theme(plot.title = element_text(size = 20, face = "bold"))
  )
print(final_dashboard)
```

#### Utjecaj

```{r,  fig.width=13, fig.height=10, dpi=500}
create_actor_map_plot <- function(data, platform_name, platform_color) {
  if(nrow(data) < 2) { return(ggplot() + labs(title = paste("Nema dovoljno podataka za", platform_name)) + theme_void()) }
  
  median_interactions <- median(data$total_interactions, na.rm = TRUE)
  median_reach <- median(data$total_reach, na.rm = TRUE)

  ggplot(data, aes(x = total_interactions, y = total_reach)) +
    geom_vline(xintercept = median_interactions, linetype = "dashed", color = "grey70") +
    geom_hline(yintercept = median_reach, linetype = "dashed", color = "grey70") +
    geom_point(aes(size = total_posts), color = platform_color, alpha = 0.7) +
    geom_text_repel(aes(label = FROM), size = 3, max.overlaps = 15) +
    scale_x_log10(labels = label_number(big.mark = ".", suffix = " K", scale = 1e-3)) +
    scale_y_log10(labels = label_number(big.mark = ".", suffix = " M", scale = 1e-6)) +
    scale_size_continuous(range = c(2, 12), name = "Broj objava") +
    theme_minimal(base_size = 12) +
    theme(legend.position = "bottom") +
    labs(
      title = platform_name, x = "Ukupne interakcije (Log)", y = "Ukupan doseg (Log)"
    )
}

plot_map_web <- create_actor_map_plot(web_actors, "Web Portali", "#003366")
plot_map_youtube <- create_actor_map_plot(youtube_actors, "YouTube Kanali", "#7F7F7F")
plot_map_facebook <- create_actor_map_plot(facebook_actors, "Facebook Stranice", "#5B9BD5")

final_map_dashboard <- plot_map_web + plot_map_youtube + plot_map_facebook +
  plot_annotation(
    title = "Mapa utjecaja najvažnijih profila u raspravama o HNB-u (2021-2023)",
    subtitle = "Usporedba dosega i angažmana. Veličina točke predstavlja produktivnost (broj objava).",
    caption = "Izvor: Analiza projekta 'Prikaz i analiza prisutnosti HNB-a u digitalnom medijskom prostoru' | Osi su na logaritamskoj skali.",
    theme = theme(plot.title = element_text(size = 20, face = "bold"))
  ) & theme(plot.background = element_rect(fill = "white", color = NA))

print(final_map_dashboard)
```



#### Atmosfera


```{r}
sentiment_counts_gold <- nlp_results_df %>%
  inner_join(crosentilex_gold_prepared, by = c("lemma" = "word")) %>%
  # Filtriramo neutralne riječi jer nam ne trebaju za ovu formulu
  filter(sentiment_value != 0) %>% 
  # Brojimo koliko je pozitivnih (1) i negativnih (-1) riječi
  count(doc_id, sentiment_value) %>%
  # Pretvaramo u široki format da imamo stupce za 'pozitivne' i 'negativne'
  pivot_wider(names_from = sentiment_value, values_from = n, values_fill = 0)

# --- DEFENZIVNI BLOK KODA ---
# Provjeravamo postoji li stupac '1' (pozitivni). Ako ne, dodajemo ga s nulama.
if (!"1" %in% names(sentiment_counts_gold)) {
  sentiment_counts_gold <- sentiment_counts_gold %>% mutate(`1` = 0) }
# Provjeravamo postoji li stupac '-1' (negativni). Ako ne, dodajemo ga s nulama.
if (!"-1" %in% names(sentiment_counts_gold)) {
  sentiment_counts_gold <- sentiment_counts_gold %>% mutate(`-1` = 0) }
# --- KRAJ DEFENZIVNOG BLOKA ---

# Sada sigurno preimenujemo stupce jer znamo da postoje
sentiment_counts_gold <- sentiment_counts_gold %>%
  rename(
    positive_words = `1`,
    negative_words = `-1` )


epsilon <- 1e-6 

document_sentiments_gold <- sentiment_counts_gold %>%
  mutate(
    sentiment_score_gold = (positive_words - negative_words) / (positive_words + negative_words + epsilon)
  ) %>%
  select(doc_id, sentiment_score_gold)

# Sloj 2: Dominantni Psihološki Proces (NRC)
document_emotions <- nlp_results_df %>%
  inner_join(nrc_lexicon_long, by = c("lemma" = "word")) %>%
  count(doc_id, emotion) %>%
  group_by(doc_id) %>%
  slice_max(order_by = n, n = 1, with_ties = FALSE) %>%
  ungroup() %>%
  select(doc_id, dominant_emotion = emotion)

# Spajanje svega u jedan dataframe
dta_atmosphere <- dta_enriched %>%
  left_join(document_sentiments_gold, by = "doc_id") %>%
  left_join(document_emotions, by = "doc_id") %>%
  mutate(
    sentiment_score = ifelse(is.na(sentiment_score_gold), 0, sentiment_score_gold),
    dominant_emotion = ifelse(is.na(dominant_emotion), "Neutralno", dominant_emotion)
  )

# Priprema podataka za vizualizaciju
heatmap_data <- dta_atmosphere %>%
  filter(dominant_topic != "Nema Teme") %>%
  group_by(dominant_topic, dominant_emotion) %>%
  summarise(avg_sentiment = mean(sentiment_score),
            n_articles = n()) %>%
  ungroup() %>%
  # Prikazujemo samo emocije s dovoljno članaka za analizu
  filter(n_articles > 3)
```

```{r}
ggplot(heatmap_data, aes(x = dominant_emotion, y = dominant_topic, fill = avg_sentiment)) +
  geom_tile(color = "white", linewidth = 0.5) +
  geom_text(aes(label = round(avg_sentiment, 2)), size = 3, color = "black") +
  scale_fill_gradient2(low = "firebrick", mid = "white", high = "steelblue", midpoint = 0, name = "Prosj. Sentiment") +
  theme_minimal(base_size = 12) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(
    title = "Matrica atmosfere: Kako psihološki okvir utječe na tonalitet teme",
    subtitle = "Boja ćelije predstavlja prosječni sentiment (CroSentilex) unutar svake kombinacije teme i dominantne emocije (NRC)",
    x = "Dominantni psihološki proces (NRC)",
    y = "Dominantna tema"
  )
```



#### Događaji I


```{r}


lemmatized_words_with_freq <- nlp_results_df %>%
  count(doc_id, lemma, name = "word_frequency")

# --- 3.2: Izračun Sentiment Score-a (CroSentilex-Gold) ---
sentiment_counts_gold <- lemmatized_words_with_freq %>%
  inner_join(crosentilex_gold_prepared, by = c("lemma" = "word")) %>%
  filter(sentiment_value != 0) %>%
  count(doc_id, sentiment_value) %>%
  pivot_wider(names_from = sentiment_value, values_from = n, values_fill = 0)
if (!"1" %in% names(sentiment_counts_gold)) { sentiment_counts_gold <- sentiment_counts_gold %>% mutate(`1` = 0) }
if (!"-1" %in% names(sentiment_counts_gold)) { sentiment_counts_gold <- sentiment_counts_gold %>% mutate(`-1` = 0) }
document_sentiments_gold <- sentiment_counts_gold %>%
  rename(positive_words = `1`, negative_words = `-1`) %>%
  mutate(sentiment_score_gold = (positive_words - negative_words) / (positive_words + negative_words + 1e-6)) %>%
  select(doc_id, sentiment_score_gold)

# --- 3.3: Izračun Dominantne Emocije (NRC) ---
document_emotions <- lemmatized_words_with_freq %>%
  inner_join(nrc_lexicon_long, by = c("lemma" = "word")) %>%
  group_by(doc_id, emotion) %>%
  summarise(total_freq = sum(word_frequency), .groups="drop") %>%
  group_by(doc_id) %>%
  slice_max(order_by = total_freq, n = 1, with_ties = FALSE) %>%
  ungroup() %>%
  select(doc_id, dominant_emotion = emotion)

# --- 3.4: Izračun Indeksa Konflikta (CLI i RCI) za financijske teme ---
conflict_lexicon <- unique(c(
  (nrc_lexicon_long %>% filter(emotion %in% c("Ljutnja", "Gađenje", "Strah")) %>% pull(word)),
  (crosentilex_full %>% filter(sentiment_value <= -0.75) %>% pull(word)),
  c("kriza", "kolaps", "neuspjeh", "pogreška", "kritika", "neodgovorno", "rizično", "zabrinjavajuće", "nestabilno", "problematično", "kontroverzno", "sporno", "sumnjivo", "loš", "katastrofal", "kaotičan", "recesija", "inflacija", "deflacija", "bankrot")
))
cli_scores <- lemmatized_words_with_freq %>%
  mutate(is_conflict = lemma %in% conflict_lexicon) %>%
  group_by(doc_id) %>%
  summarise(
    total_words = sum(word_frequency),
    conflict_words = sum(word_frequency[is_conflict])
  ) %>%
  mutate(cli = (conflict_words / total_words) * 1000) %>% ungroup()

dta_temp <- dta_enriched %>%
  left_join(document_sentiments_gold, by = "doc_id") %>%
  left_join(document_emotions, by = "doc_id") %>%
  left_join(cli_scores %>% select(doc_id, cli), by = "doc_id") %>%
  mutate(
    sentiment_score = ifelse(is.na(sentiment_score_gold), 0, sentiment_score_gold),
    dominant_emotion = ifelse(is.na(dominant_emotion), "Neutralno", dominant_emotion),
    cli = ifelse(is.na(cli), 0, cli)
  )

avg_cli_media <- dta_temp %>% group_by(FROM) %>% summarise(avg_cli_media = mean(cli))
avg_cli_topic <- dta_temp %>% group_by(dominant_topic) %>% summarise(avg_cli_topic = mean(cli))

dta_final <- dta_temp %>%
  left_join(avg_cli_media, by = "FROM") %>%
  left_join(avg_cli_topic, by = "dominant_topic") %>%
  mutate(
    expected_cli = 0.5 * avg_cli_media + 0.5 * avg_cli_topic,
    rci = cli - expected_cli
  )
```



```{r anomaly-detection_, eval= T, message=FALSE, warning=FALSE}
# --- KOD ZA DETEKCIJU ANOMALIJA (POBOLJŠANA VERZIJA) ---
daily_summary <- dta_final %>%
  mutate(date = as.Date(DATE)) %>%
  group_by(date) %>%
  summarise(
    n_articles = n(),
    avg_cli = mean(cli, na.rm = TRUE)
  ) %>%
  ungroup()

# Računamo pragove (99-i percentil)
volume_threshold <- quantile(daily_summary$n_articles, 0.99)
cli_threshold <- quantile(daily_summary$avg_cli, 0.99)

# Identificiramo "potrese"
spikes_detected <- daily_summary %>%
  mutate(
    is_volume_spike = n_articles > volume_threshold,
    is_cli_spike = avg_cli > cli_threshold
  )

# Vizualizacija
p_volume <- ggplot(spikes_detected, aes(x = date, y = n_articles)) +
  geom_line(color = "grey") +
  geom_point(data = filter(spikes_detected, is_volume_spike), color = "red", size = 3) +
  geom_hline(yintercept = volume_threshold, linetype="dashed", color="red") +
  theme_minimal() +
  labs(title = "Ekstremni volumen objava", y = "Broj članaka dnevno", x = "")

p_cli <- ggplot(spikes_detected, aes(x = date, y = avg_cli)) +
  geom_line(color = "grey") +
  geom_point(data = filter(spikes_detected, is_cli_spike), color = "red", size = 3) +
  geom_hline(yintercept = cli_threshold, linetype="dashed", color="red") +
  theme_minimal() +
  labs(title = "Ekstremni intenzitet konflikta", y = "Prosječni CLI dnevno", x = "Datum")

#p_volume / p_cli
```

```{r standardized-anomaly-detection}
# --- KOD ZA STANDARDIZIRANU DETEKCIJU ANOMALIJA ---

# Agregiramo podatke po danu
daily_summary <- dta_final %>%
  mutate(date = as.Date(DATE),
         year = year(date)) %>% # Dodajemo godinu za godišnju standardizaciju
  group_by(date, year) %>%
  summarise(
    n_articles = n(),
    avg_cli = mean(cli, na.rm = TRUE),
    .groups = "drop"
  )

# Standardiziramo vrijednosti (računamo Z-score) unutar svake godine
standardized_summary <- daily_summary %>%
  group_by(year) %>%
  mutate(
    # Z-score = (vrijednost - prosjek) / standardna devijacija
    z_score_volume = (n_articles - mean(n_articles)) / sd(n_articles),
    z_score_cli = (avg_cli - mean(avg_cli)) / sd(avg_cli)
  ) %>%
  ungroup()

# Definiramo prag za "šiljak" (npr. 3 standardne devijacije)
spike_threshold_z <- 3

# Identificiramo "potrese"
spikes_detected_z <- standardized_summary %>%
  mutate(
    is_volume_spike = z_score_volume > spike_threshold_z,
    is_cli_spike = z_score_cli > spike_threshold_z
  )

# --- ISPIS DATUMA S ANOMALIJAMA ---
volume_spike_dates <- spikes_detected_z %>%
  filter(is_volume_spike) %>%
  select(date, n_articles, z_score_volume) %>%
  arrange(desc(z_score_volume))

cli_spike_dates <- spikes_detected_z %>%
  filter(is_cli_spike) %>%
  select(date, avg_cli, z_score_cli) %>%
  arrange(desc(z_score_cli))

# # (Ovaj dio ispod će ispisati tablice direktno u vaš HTML dokument)
# cat("### Dani s Ekstremnim Volumom Objava\n\n")
# knitr::kable(volume_spike_dates, caption = "Top datumi rangirani po Z-scoreu volumena.")
# 
# cat("\n### Dani s Ekstremnim Intenzitetom Konflikta\n\n")
# knitr::kable(cli_spike_dates, caption = "Top datumi rangirani po Z-scoreu konflikta.")


# --- VIZUALIZACIJA STANDARDIZIRANIH VRIJEDNOSTI ---
p_volume_z <- ggplot(spikes_detected_z, aes(x = date, y = z_score_volume)) +
  geom_line(color = "grey") +
  geom_point(data = filter(spikes_detected_z, is_volume_spike), color = "red", size = 3) +
  geom_hline(yintercept = spike_threshold_z, linetype = "dashed", color = "red") +
  theme_minimal() +
  labs(
    title = "Anomalije u volumenu objava (Standardizirano)",
    y = "Odstupanje od prosjeka (u st. dev.)",
    x = ""
  )

p_cli_z <- ggplot(spikes_detected_z, aes(x = date, y = z_score_cli)) +
  geom_line(color = "grey") +
  geom_point(data = filter(spikes_detected_z, is_cli_spike), color = "red", size = 3) +
  geom_hline(yintercept = spike_threshold_z, linetype = "dashed", color = "red") +
  theme_minimal() +
  labs(
    title = "Anomalije u intenzitetu konflikta (Standardizirano)",
    y = "Odstupanje od prosjeka (u st. dev.)",
    x = "Datum"
  )


```

```{r}
p_volume_z
```

#### Događaji II

```{r}
p_cli_z
```

:::

---

## Istraživačka razina

<br>
[Literatura](https://www.sciencedirect.com/science/article/pii/S130307012500023X) o komunikaciji središnjih banaka je bogata i [aktualna](https://resolve.cambridge.org/core/journals/macroeconomic-dynamics/article/ecbs-central-bank-communication-and-monetary-policy-transmission-predictability-from-textbased-sentiment-indicators/9A8225BEFA56175C87F3FD7DA47DE35C)!
<br>

:::{.panel-tabset}

#### Koncept

Nekoliko  je istraživačkih pravaca koji se ističu:
[inflacija](https://www.ecb.europa.eu/press/conferences/ecbforum/shared/pdf/2025/EFCB_2025_Trebbi_Paper.pdf), nowcasting, [ekonomska politika](https ://www.policyuncertainty.com/media/EPU_BBD_Mar2016.pdf) i [nesigurnost](https://www.nber.org/system/files/working_papers/w22740/w22740.pdf), [komunikacija sa ne-stručnjacima](https://www.sciencedirect.com/science/article/abs/pii/S0304393222000204), komunikacija kao transmisijski kanal...

#### Inflacija 

[Očekivanja](https://archiv.ub.uni-heidelberg.de/volltextserver/34992/7/Arndt_dp748_2024.pdf)

[Komunikacija CB](https://www.ecb.europa.eu/pub/pdf/scpwps/ecb.wp3047~cb0f0cf37f.en.pdf)

[Financijska pismenost](https://www.rba.gov.au/publications/bulletin/2024/jan/inflation-expectations-and-economic-literacy.html)


```{r}
# --- 0. SETUP: Load Libraries and Connect to Database ---
library(duckdb)
library(dplyr)
library(ggplot2)
library(lubridate)
library(scales)
library(tidyr)
library(eurostat)

# IMPORTANT: Adjust the path to your .duckdb file!
duckdb_file_path <- "C:/Users/lukas/Determbaza/DetermDB/determDB.duckdb" # <--- ADJUST THIS!
table_name <- "media_data"

# Establish connection to the database
con <- dbConnect(duckdb::duckdb(), dbdir = duckdb_file_path, read_only = TRUE)
invisible(dbExecute(con, "SET memory_limit='16GB';"))

```


```{r}
# --- 1. DOWNLOAD EUROSTAT INFLATION DATA ---
#cat("Downloading inflation data from Eurostat...\n")
hicp_data <- get_eurostat(id = "prc_hicp_midx", filters = list(geo = "HR", coicop = "CP00", unit = "I15"))
inflation_data <- hicp_data %>%
  arrange(time) %>%
  mutate(inflation_rate = ((values / lag(values, 12)) - 1) * 100) %>%
  filter(!is.na(inflation_rate))

# --- 2. RETRIEVE AND PROCESS MEDIA DATA (OVERALL) ---
#cat("Aggregating overall media data...\n")
# Query for total posts and total inflation mentions per month
sql_totals <- "SELECT STRFTIME(DATETIME, '%Y-%m') AS year_month, COUNT(*) AS total_posts FROM media_data GROUP BY year_month"
inflation_trends <- dbGetQuery(con, sql_totals)

# Query for mentions by location (title vs. text)
sql_location <- "
  SELECT STRFTIME(DATETIME, '%Y-%m') AS year_month,
    SUM(CASE WHEN LOWER(TITLE) LIKE '%inflacij%' THEN 1 ELSE 0 END) AS in_title,
    SUM(CASE WHEN LOWER(TITLE) NOT LIKE '%inflacij%' AND LOWER(FULL_TEXT) LIKE '%inflacij%' THEN 1 ELSE 0 END) AS in_text_only
  FROM media_data GROUP BY year_month ORDER BY year_month;"
inflation_location_counts <- dbGetQuery(con, sql_location)

# --- 3. RETRIEVE AND PROCESS MEDIA DATA (BY SOURCE TYPE) ---
#cat("Aggregating media data by source type...\n")
# Query for total posts per month AND per source type
sql_totals_by_source <- "
  SELECT STRFTIME(DATETIME, '%Y-%m') AS year_month, SOURCE_TYPE, COUNT(*) AS total_posts
  FROM media_data GROUP BY year_month, SOURCE_TYPE ORDER BY year_month, SOURCE_TYPE;"
inflation_trends_by_source <- dbGetQuery(con, sql_totals_by_source)

# Query for mentions by location per month AND per source type
sql_location_by_source <- "
  SELECT STRFTIME(DATETIME, '%Y-%m') AS year_month, SOURCE_TYPE,
    SUM(CASE WHEN LOWER(TITLE) LIKE '%inflacij%' THEN 1 ELSE 0 END) AS in_title,
    SUM(CASE WHEN LOWER(TITLE) NOT LIKE '%inflacij%' AND LOWER(FULL_TEXT) LIKE '%inflacij%' THEN 1 ELSE 0 END) AS in_text_only
  FROM media_data GROUP BY year_month, SOURCE_TYPE ORDER BY year_month, SOURCE_TYPE;"
inflation_location_by_source <- dbGetQuery(con, sql_location_by_source)

# All data is retrieved, we can now close the connection
dbDisconnect(con, shutdown = TRUE)
#cat("Database connection closed.\n")


# --- 4. CREATE FINAL ANALYSIS DATASETS ---
# Dataset 1: Absolute counts for the first plot
inflation_location_long <- inflation_location_counts %>%
  mutate(month_date = ymd(paste0(year_month, "-01"))) %>%
  pivot_longer(cols = c("in_title", "in_text_only"), names_to = "location", values_to = "count") %>%
  mutate(location = factor(location, levels = c("in_text_only", "in_title"), labels = c("Samo u tekstu", "U naslovu")))

# Dataset 2: Relative frequency for the second plot
relative_data <- left_join(inflation_location_long, inflation_trends, by = "year_month") %>%
  mutate(relative_frequency = count / total_posts) %>%
  filter(!is.na(relative_frequency))

# Dataset 3: Relative frequency by source type for the third plot
relative_data_by_source <- left_join(
    inflation_location_by_source %>% pivot_longer(cols = c("in_title", "in_text_only"), names_to = "location", values_to = "count"),
    inflation_trends_by_source,
    by = c("year_month", "SOURCE_TYPE")
  ) %>%
  mutate(
    relative_frequency = count / total_posts,
    month_date = ymd(paste0(year_month, "-01")),
    location = factor(location, levels = c("in_text_only", "in_title"), labels = c("Samo u tekstu", "U naslovu"))
  ) %>%
  filter(!is.na(relative_frequency) & total_posts > 50) # Filter out platforms with very low activity
```

#### Inflacija I

```{r}
# -- Filter and Scale Data for this specific plot --
media_absolute_filtered <- inflation_location_long %>% filter(year(month_date) >= 2021)
last_media_date <- max(media_absolute_filtered$month_date)
inflation_rate_filtered <- inflation_data %>% filter(year(time) >= 2021 & time <= last_media_date)

# This calculation is simplified, as the scaling factor was slightly incorrect before
max_count <- media_absolute_filtered %>% group_by(month_date) %>% summarise(total = sum(count)) %>% pull(total) %>% max()
scaling_factor <- max_count / max(inflation_rate_filtered$inflation_rate)

# -- Create Plot (Corrected Structure) --
# Aesthetics are now defined inside each geom layer
ggplot() +
  # Layer 1: Bar chart for media mentions
  geom_col(
    data = media_absolute_filtered,
    aes(x = month_date, y = count, fill = location)
  ) +
  # Layer 2: Line chart for official inflation rate
  geom_line(
    data = inflation_rate_filtered,
    aes(x = time, y = inflation_rate * scaling_factor, color = "Službena stopa inflacije"),
    linewidth = 1.5
  ) +
  scale_y_continuous(
    name = "Broj medijskih objava",
    labels = comma,
    sec.axis = sec_axis(~ . / scaling_factor, name = "Godišnja stopa inflacije (%)", labels = function(x) paste0(round(x), "%"))
  ) +
  scale_x_date(date_breaks = "1 year", date_labels = "%Y", expand = c(0.01, 0.01)) +
  scale_fill_manual(name = "Spominjanje u objavi:", values = c("U naslovu" = "#C00000", "Samo u tekstu" = "#5B9BD5")) +
  scale_color_manual(name = NULL, values = c("Službena stopa inflacije" = "#003366")) +
  labs(
    title = "Medijsko praćenje inflacije vs. službena stopa inflacije (apsolutno)",
    subtitle = "Usporedba apsolutnog broja medijskih objava i stvarne stope inflacije",
    x = "Godina", y = "Broj medijskih objava"
  ) +
  theme_minimal() +
  theme(legend.position = "top")
```


#### Inflacija II

```{r}
# -- Filter and Scale Data for this specific plot --
media_relative_filtered <- relative_data %>% filter(year(month_date) >= 2021)
last_media_date <- max(media_relative_filtered$month_date)
inflation_rate_filtered <- inflation_data %>% filter(year(time) >= 2021 & time <= last_media_date)

max_rel_freq <- media_relative_filtered %>% group_by(month_date) %>% summarise(total = sum(relative_frequency)) %>% pull(total) %>% max()
scaling_factor <- max_rel_freq / max(inflation_rate_filtered$inflation_rate)

# -- Create Plot (Corrected Structure) --
ggplot() +
  # Layer 1: Bar chart for relative mentions
  geom_col(
    data = media_relative_filtered,
    aes(x = month_date, y = relative_frequency, fill = location)
  ) +
  # Layer 2: Line chart for official inflation rate
  geom_line(
    data = inflation_rate_filtered,
    aes(x = time, y = inflation_rate * scaling_factor, color = "Službena stopa inflacije"),
    linewidth = 1.5
  ) +
  scale_y_continuous(
    name = "Udio objava o inflaciji",
    labels = percent_format(accuracy = 1),
    sec.axis = sec_axis(~ . / scaling_factor, name = "Godišnja stopa inflacije (%)", labels = function(x) paste0(round(x), "%"))
  ) +
  scale_x_date(date_breaks = "1 year", date_labels = "%Y", expand = c(0.01, 0.01)) +
  scale_fill_manual(name = "Spominjanje u objavi:", values = c("U naslovu" = "#C00000", "Samo u tekstu" = "#5B9BD5")) +
  scale_color_manual(name = NULL, values = c("Službena stopa inflacije" = "#003366")) +
  labs(
    title = "Medijsko praćenje inflacije vs. službena stopa inflacije (relativno)",
    subtitle = "Usporedba udjela medijskih objava o inflaciji i stvarne stope inflacije",
    x = "Godina", y = "Udio objava o inflaciji"
  ) +
  theme_minimal() +
  theme(legend.position = "top")
```


#### Inflacija III

```{r}
# -- Filter and Scale Data for this specific plot --
media_faceted_filtered <- relative_data_by_source %>% filter(year(month_date) >= 2021)
last_media_date <- max(media_faceted_filtered$month_date)
inflation_rate_filtered <- inflation_data %>% filter(year(time) >= 2021 & time <= last_media_date)

max_rel_freq_faceted <- media_faceted_filtered %>% group_by(month_date, SOURCE_TYPE) %>% summarise(total = sum(relative_frequency), .groups = 'drop') %>% pull(total) %>% max()
scaling_factor <- max_rel_freq_faceted / max(inflation_rate_filtered$inflation_rate)

# -- Create Plot (Corrected Structure) --
ggplot() +
  # Layer 1: Bar chart for faceted relative mentions
  geom_col(
    data = media_faceted_filtered,
    aes(x = month_date, y = relative_frequency, fill = location)
  ) +
  # Layer 2: Line chart for official inflation rate
  geom_line(
    data = inflation_rate_filtered,
    aes(x = time, y = inflation_rate * scaling_factor, color = "Službena stopa inflacije"),
    linewidth = 1.2
  ) +
  facet_wrap(~ SOURCE_TYPE, scales = "free_y", ncol = 2) +
  scale_y_continuous(
    name = "Udio objava o inflaciji",
    labels = percent_format(accuracy = 1),
    sec.axis = sec_axis(~ . / scaling_factor, name = "Godišnja stopa inflacije (%)", labels = function(x) paste0(round(x), "%"))
  ) +
  scale_x_date(date_breaks = "1 year", date_labels = "%Y", expand = c(0.01, 0.01)) +
  scale_fill_manual(name = "Spominjanje u medijima:", values = c("U naslovu" = "#C00000", "Samo u tekstu" = "#5B9BD5")) +
  scale_color_manual(name = NULL, values = c("Službena stopa inflacije" = "#003366")) +
  labs(
    title = "Relativna učestalost praćenja inflacije po tipu platforme",
    subtitle = "Usporedba udjela objava o inflaciji unutar svake platforme i službene stope inflacije",
    x = "Godina"
  ) +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    strip.text = element_text(face = "bold", size = 11)
  )
```


#### Nesigurnost 

- Izračunato prema [istraživanju](https://www.nber.org/system/files/working_papers/w22740/w22740.pdf)


```{r}


library(duckdb)
library(dplyr)
library(ggplot2)
library(lubridate)
library(scales)
library(tidyr)
library(eurostat)

# IMPORTANT: Adjust the path to your .duckdb file!
duckdb_file_path <- "C:/Users/lukas/Determbaza/DetermDB/determDB.duckdb" # <--- ADJUST THIS!
table_name <- "media_data"

# Establish connection to the database
con <- dbConnect(duckdb::duckdb(), dbdir = duckdb_file_path, read_only = TRUE)
invisible(dbExecute(con, "SET memory_limit='16GB';"))



# --- 1. SETUP: Define Keyword Dictionaries ---
# These lists are based on the provided table and use word stems for broader matching.
economy_terms <- c(
  "ekonom", "gospodarstv", "financij", "proračun", "bdp",
  "bruto domaći proizvod", "poduzeć", "tvrtk", "tržišt",
  "dionic", "kamatn", "stop"
)

policy_terms <- c(
  "politik", "vlada", " sabor", "ministarstv", "regulativ", "zakon",
  "uredb", "hnb", "narodna banka", "fina", "porez", "carin",
  "deficit", "javni dug"
)

uncertainty_terms <- c(
  "nesigurn", "neizvjesn", "rizik", "prijetnj", "nestabiln",
  "neodređen", "dvojb", "zabrinut"
)


# --- 2. DYNAMIC SQL QUERY CONSTRUCTION ---
# This approach programmatically builds the complex search conditions,
# which is much more robust and readable than a single, massive SQL string.

# We'll search a concatenated and lowercased version of TITLE and FULL_TEXT
search_column <- "LOWER(TITLE || ' ' || FULL_TEXT)"

# Function to create a SQL 'OR' chain for a list of terms
create_sql_condition <- function(terms, column) {
  conditions <- paste0(sprintf("%s LIKE '%%%s%%'", column, terms), collapse = " OR ")
  return(paste0("(", conditions, ")"))
}

# Create the condition for each category
e_condition <- create_sql_condition(economy_terms, search_column)
p_condition <- create_sql_condition(policy_terms, search_column)
u_condition <- create_sql_condition(uncertainty_terms, search_column)


# --- 3. DATA RETRIEVAL ---
# This query counts both the total number of web articles and the number of articles
# matching all three (E, P, and U) criteria, aggregated by month.
sql_query_epu <- sprintf("
  SELECT
    STRFTIME(DATETIME, '%%Y-%%m') AS year_month,
    COUNT(*) AS total_articles,
    SUM(CASE
          WHEN (%s) AND (%s) AND (%s)
          THEN 1
          ELSE 0
        END) AS epu_articles
  FROM %s
  WHERE SOURCE_TYPE = 'web'
  GROUP BY year_month
  ORDER BY year_month;
", e_condition, p_condition, u_condition, table_name)

#cat("Executing EPU query... This may take some time depending on database size.\n")
epu_counts <- dbGetQuery(con, sql_query_epu)
#cat("Data successfully retrieved.\n")


# --- 4. INDEX CALCULATION ---
# This section follows the Baker, Bloom, and Davis methodology for scaling and standardization.
epu_index_data <- epu_counts %>%
  # Ensure there are no months with zero total articles to avoid division by zero
  filter(total_articles > 0) %>%
  mutate(
    # Step 1: Scale the monthly EPU count by the total number of articles that month
    scaled_freq = epu_articles / total_articles,
    
    # Step 2: Standardize the resulting series to have a mean of 100
    # This makes the index easily comparable over time.
    epu_index = (scaled_freq / mean(scaled_freq, na.rm = TRUE)) * 100,
    
    # Create a date column for plotting
    month_date = ymd(paste0(year_month, "-01"))
  ) %>%
  # Filter to the main period of analysis for a stable index
  filter(year(month_date) >= 2021 & year(month_date) <= 2024)

#cat("EPU Index calculated successfully.\n")


# --- 5. VISUALIZATION ---
epu_index_filtered <- epu_index_data %>%
  filter(month_date <= ymd("2023-12-31"))

# --- Create the Plot ---
ggplot(epu_index_filtered, aes(x = month_date, y = epu_index)) +
  geom_line(color = "#003366", linewidth = 1.2) +
  geom_hline(yintercept = 100, linetype = "dashed", color = "#C00000") +
  labs(
    title = "Indeks ekonomske i političke nesigurnosti (EPU)",
    subtitle = "Podaci za razdoblje 2021. - siječanj 2024.",
    x = "Godina",
    y = "Vrijednost EPU indeksa (Prosjek = 100)"
  ) +
  # Adjust x-axis for a multi-year view
  scale_x_date(
    date_breaks = "6 months",
    date_labels = "%b %Y" # e.g., "Sij 2024"
  ) +
  theme_minimal(base_family = "sans") +
  theme(
    plot.title = element_text(face = "bold", size = 16),
    plot.subtitle = element_text(size = 12, color = "gray30"),
    axis.text.x = element_text(angle = 45, hjust = 1) # Angle labels for better fit
  )

```

---

#### Druge ideje

- [Komunikacija središnjih banaka I](https://www.nber.org/system/files/working_papers/w28592/w28592.pdf)

- [Komunikacija središnjih banaka II](https://www.tandfonline.com/doi/pdf/10.1080/1406099X.2024.2303904?needAccess=true)

- [Nowcasting](https://publications.banque-france.fr/sites/default/files/medias/documents/wp921.pdf)

- [Međunarodna ekonomija](https://www.nber.org/system/files/working_papers/w25353/w25353.pdf)

- [AI](https://www.bis.org/publ/arpdf/ar2024e3.pdf)

- [Pregled](https://www.banque-france.fr/system/files/2024-06/WP950.pdf)
:::

---

## Prijedlog projekta

<br>
Kako iskoristiti postojeće podatke?
<br>

::: {.panel-tabset}

#### Koncept

Presscut podatci za 08/2025; 190 objva i 15 karakteristika.

#### Pojmovi 

```{r, mesage=FALSE, warning=FALSE}
#| include: false 
#| message: false # Good practice to keep, 
#| warning: false # Good practice to keep

library(readr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(scales)
library(forcats)

# Postavljanje hrvatskog locale-a za ispravno čitanje datuma i znakova
# Ovo pomaže ako nazivi mjeseci ili posebni znakovi stvaraju problem
# Ako i dalje imate problema, pokušajte s "hr_HR.UTF-8" ili izostavite ovaj redak
tryCatch({
  Sys.setlocale("LC_TIME", "hrvatski")
}, warning = function(w) {
  message("Nije moguće postaviti 'hrvatski' locale. Koristim defaultni.")
})

# --- 1. Učitavanje i priprema podataka ---

# Učitavanje CSV datoteke
# read_csv će automatski pokušati prepoznati tipove stupaca
file_path <- "C:/Users/lukas/Determbaza/PresscutHNB/HNB 8 2025 puni sadržaj.xlsx"
tryCatch({
  # Koristimo read_excel za učitavanje
  df <- read_excel(file_path, sheet = "Popis")
}, error = function(e) {
  # Ako list 'Popis' ne postoji, pokušaj učitati prvi list
  message("List 'Popis' nije pronađen, pokušavam učitati prvi list...")
  tryCatch({
     df <<- read_excel(file_path, sheet = 1)
  }, error = function(e2) {
     stop(paste("Nije moguće učitati Excel datoteku:", e2))
  })
})



```



```{r}
#| include: false 
#| message: false # Good practice to keep, 
#| warning: false # Good practice to keep


library(readr)
library(dplyr)
library(lubridate)
library(purrr)
library(stringr)


# Preimenujemo stupce iz CSV-a da odgovaraju kodu iz prezentacije
dta <- df %>%
  rename(
    FULL_TEXT = `Puni sadržaj`,
    DATE = `Datum izdanja`,
    SOURCE_TYPE = `Vrsta medija`
    # Ovdje bi se mogli preimenovati i ostali stupci da su potrebni
  ) %>%
  mutate(
    DATE = as.Date(DATE), # Osiguravamo da je Date objekt
    year = as.integer(format(DATE, "%Y"))
  ) %>%
  filter(SOURCE_TYPE != "tiktok") %>% # Filter iz vašeg koda
  mutate(doc_id = row_number())

date_range <- range(dta$DATE, na.rm = TRUE)
message(paste("CSV podaci učitani. Raspon datuma:", date_range[1], "do", date_range[2]))
message("NAPOMENA: Originalni filter (2021-2023) je uklonjen da bi se mogli analizirati podaci iz 2025.")


# --- 3. Učitavanje NLP podataka (Preskočeno) ---
message("--- UPOZORENJE: Preskačem učitavanje 'nlp_results_df' ---")
message("Nemam pristup lokalnoj putanji 'D:/LUKA/HNB/Language model sample'.")
# files <- list.files("D:/LUKA/HNB/Language model sample", ...)
# nlp_results_df <- ...


# --- 4. Definicija tematskih rječnika (iz vašeg koda) ---
message("--- Učitavam rječnike tema i aktera... ---")

# Definicija tematskih rječnika v3
thematic_dictionaries_v3 <- list(
  MONETARNA_POLITIKA_I_INFLACIJA = sort(c(
    "agregat", "cijen", "ciljan", "deflacij", "dezinflacij", "eskontn", 
    "ekspanzivn", "hro", "inflacij", "kamatn", "kamatna stopa", "kreditni plasmani", 
    "likvidnost", "mas", "monetarn", "novčan", "obvezna pričuva", "otvoreno tržište",
    "ponud", "potražnj", "referentn", "repo", "restriktivn", "stabilnost cijena", 
    "stop", "transmisijsk"
  )),
  FINANCIJSKA_STABILNOST_I_NADZOR_BANAKA = sort(c(
    "adekvatnost kapitala", "aml", "bank", "basel", "bonitet", "depozit", "financijsk", 
    "hanfa", "institucij", "kapitalni zahtjev", "kreditn", "leasing", "likvidacij",
    "loš kredit", "makrobonitetn", "nadzor", "nenaplativ", "npl", "osiguranje", 
    "osiguranje depozita", "regulacij", "rizik", "sanacij", "sistemsk",
    "sprečavanje pranja novca", "stabilnost", "stečaj", "stres test", "supervizij"
  )),
  UVODJENJE_EURA_I_TECAJ = sort(c(
    "aprecijacij", "cent", "deprecijacij", "devizn", "devizni tečaj", "dvostruki optjecaj", 
    "erm ii", "eur", "eurozon", "eurosustav", "fiksni tečaj", "konverzij", "kovnica novca",
    "kuna", "lipa", "prilagodb", "tečaj", "uvođenj", "zamjen", "zaokruživanj"
  )),
  MAKROEKONOMSKE_ANALIZE_I_PROGNOZE = sort(c(
    "analiz", "bdp", "bilten", "dug", "ekonomsk", "fiskaln", "gospodarsk", 
    "industrijska proizvodnja", "investicij", "izvoz", "izvješć", "javni dug", 
    "konkurentnost", "kretanj", "makroekonomsk", "nezaposlenost", "očekivanj", 
    "potrošnj", "prognoz", "projekcij", "rast", "recesij", "uvoz", "zaposlenost"
  )),
  UPRAVLJANJE_I_TRANSPARENTNOST_HNB = sort(c(
    "devizne pričuve", "dobit", "guverner", "gubitak", "hnb", "izvješće saboru", 
    "mandat", "neovisnost", "odluk", "pričuv", "proračun hnb", "revizij", "savjet hnb",
    "sjednic", "statut", "transparentnost", "viceguverner", "zakon o hnb", "zlato", 
    "zlatne rezerve"
  )),
  PLATNI_PROMET_I_GOTOVINA = sort(c(
    "beskontaktn", "cbdc", "digitalna valuta", "digitalni euro", "digitalni novac", 
    "fintech", "gotovin", "gotovinsk", "kartic", "kovanic", "kriptovalut", "nks", 
    "novčanic", "platni promet", "target2", "transakcij"
  )),
  MEDJUNARODNI_ODNOSI_I_EU = sort(c(
    "banka za međunarodne namire", "bis", "članstv", "ebrd", "ecb", "esb", 
    "europska komisija", "europska središnja banka", "europsk", "fitch", "imf", 
    "kreditni rejting", "mmf", "moody's", "s&p", "suradnj", "svjetska banka"
  )),
  JAVNA_PERCEPCIJA_I_KRITIKE = sort(c(
    "afer", "dužnic", "etika", "franak", "klub", "kritik", "netransparentnost",
    "odgovornost", "plać", "polemik", "potrošač", "povjerenj", "presud", "skandal",
    "sukob interesa", "švicarac", "troškov", "tužb", "udruga franak", "zaštita potrošača"
  ))
)

# Definicija rječnika aktera
hnb_duznosnici_dict <- list(HNB_DUZNOSNICI = c("boris vujčić", "vujčić", "sandra švaljek", "švaljek", "tomislav ćorić", "ćorić", "michael faulend", "faulend", "bojan fras", "fras", "ivana jakir-bajo", "martina jakir-bajo", "jakir-bajo", "jakir", "maroje lang", "lang", "roman šubić", "šubić", "slavko tešija", "tešija", "martina drvar", "drvar", "željko rohatinski", "rohatinski", "marko škreb", "škreb", "evan kraft", "kraft"))
politicki_akteri_dict <- list(POLITICKI_AKTERI = c("andrej plenković", "plenković", "zoran milanović", "milanović", "davor škrlec", "škrlec"))
analiticari_i_mediji_dict <- list(ANALITICARI_I_MEDIJI = c("velimir šonje", "šonje", "ljubo jurčić", "jurčić", "ivo družić", "družić", "marina klepo", "klepo", "boris pavković", "pavković"))
financijske_institucije_dict <- list(FINANCIJSKE_INSTITUCIJE = c("ante žigman", "žigman", "ante matek", "matek", "tamara perko", "perko", "zdenko rogić", "rogić", "miroslav gržetić", "gržetić"))
medjunarodni_duznosnici_dict <- list(MEDJUNARODNI_DUZNOSNICI = c("christine lagarde", "lagarde", "mario draghi", "draghi", "jan kees martijn", "martijn", "hans-jörg rudloff", "rudloff"))
sindikati_i_drugi_dict <- list(SINDIKATI_I_DRUGI = c("krešimir sever", "sever", "mladen novosel", "novosel"))

svi_ljudi_dictionary <- c(
  hnb_duznosnici_dict,
  politicki_akteri_dict,
  analiticari_i_mediji_dict,
  financijske_institucije_dict,
  medjunarodni_duznosnici_dict,
  sindikati_i_drugi_dict
)


# --- 5. Definicija funkcije (iz vašeg koda) ---
calculate_theme_scores <- function(text, dictionaries) {
  text_lower <- tolower(text)
  total_words <- str_count(text_lower, "\\w+")
  if (total_words == 0) return(NULL)
  scores <- purrr::map(dictionaries, ~sum(str_count(text_lower, .x)))
  normalized_scores <- purrr::map(scores, ~(.x / total_words) * 1000)
  names(normalized_scores) <- paste0("norm_", names(scores))
  scores_vec <- unlist(scores)
  if(all(scores_vec == 0)){
    dominant_topic <- "Nema Teme"
  } else {
    dominant_topic <- names(scores)[which.max(scores_vec)]
  }
  return(c(as.list(scores), as.list(normalized_scores), dominant_topic = dominant_topic))
}

# --- 6. Izvršavanje analize ---
if("FULL_TEXT" %in% names(dta) && nrow(dta) > 0) {
  message("--- 6a. Pokrećem analizu glavnih tema (thematic_dictionaries_v3)... ---")
  theme_analysis_data <- purrr::map_dfr(dta$FULL_TEXT, ~calculate_theme_scores(., thematic_dictionaries_v3))
  dta_enriched <- bind_cols(dta, theme_analysis_data)
  message("...završeno. Kreiran 'dta_enriched'.")
  
  message("--- 6b. Pokrećem analizu aktera (svi_ljudi_dictionary)... ---")
  people_analysis_data <- purrr::map_dfr(dta$FULL_TEXT, ~calculate_theme_scores(., svi_ljudi_dictionary))
  # Kreiramo poseban dataframe za ljude da se ne miješa s dta_enriched
  dta_enriched_people <- bind_cols(dta, people_analysis_data) 
  message("...završeno. Kreiran 'dta_enriched_people'.")

  message("\n--- Analiza uspješna! ---")
  message("Prikazujem pregled NOVIH programatskih tema vs. STARIH tema iz CSV-a:")
  print(dta_enriched %>% 
        select(doc_id, 
               Tema, # Stari stupac iz CSV-a
               dominant_topic # Novi stupac iz R koda
               ) %>% 
        head())
        
  message("\nPrikazujem pregled NOVIH programatskih aktera vs. STARIH autora iz CSV-a:")
  print(dta_enriched_people %>% 
        select(doc_id, 
               Autor, # Stari stupac iz CSV-a
               dominant_topic # Novi stupac (akter) iz R koda
               ) %>% 
        head())

} else {
   if(nrow(dta) == 0) {
      message("Greška: Nema podataka za analizu (vjerojatno zbog filtriranja).")
   } else {
      message("GREŠKA: Stupac 'FULL_TEXT' (originalno 'Puni sadržaj') nije pronađen.")
   }
}

theme_analysis_data <- purrr::map_dfr(dta$FULL_TEXT, ~calculate_theme_scores(., thematic_dictionaries_v3))
dta_enriched <- bind_cols(dta, theme_analysis_data)
dta_with_themes <- bind_cols(dta, theme_analysis_data)

theme_analysis_data2 <- purrr::map_dfr(dta$FULL_TEXT, ~calculate_theme_scores(., svi_ljudi_dictionary))
dta_enriched2 <- bind_cols(dta, theme_analysis_data2)
dta_with_themes2 <- bind_cols(dta, theme_analysis_data2)


```


```{r}
files <- list.files("C:/Users/lukas/Determbaza/Language model sample II", full.names = TRUE, pattern = "\\.rds")
nlp_results_df <- lapply(files, readRDS) %>%
  bind_rows() %>%
  mutate(doc_id = as.integer(doc_id))

```



```{r plot-wordcloud, fig.height=8, fig.width=12}
# 1. Priprema teksta: Lematizacija i uklanjanje zaustavnih riječi
# Učitajmo standardne hrvatske zaustavne riječi (možete ih naći online ili napraviti svoju listu)
stop_words_hr <- tibble(word = c(
  # Originalna lista
  "i", "u", "je", "na", "se", "su", "s", "za", "od", "o", "a", "te", "koji", "koja", "koje", "ga", "mu", "joj", "smo", "kao",

  # Prijedlozi (Prepositions)
  "bez", "blizu", "do", "duž", "ispred", "iza", "između", "iznad", "izvan", "k", "kod", "kraj", "mimo", "na", "nad", "nakon", "niže", "o", "od", "oko", "osim", "po", "pod", "pokraj", "poput", "pored", "poslije", "povrh", "preko", "prema", "pri", "prije", "protiv", "put", "radi", "s", "sa", "skupa", "tijekom", "u", "unatoč", "unutar", "usprkos", "uz", "van", "više", "zaradi", "zbog",

  # Veznici (Conjunctions)
  "a", "ali", "ama", "bilo", "da", "dakle", "dok", "eda", "i", "ili", "inače", "jer", "kad", "kako", "li", "makar", "mada", "nego", "negoli", "no", "pa", "pak", "premda", "samo", "što", "te", "ter", "već", "zatim", "zato",

  # Zamjenice (Pronouns)
  "ja", "ti", "on", "ona", "ono", "mi", "vi", "oni", "one", "ona", "sebe", "svoj", "moj", "tvoj", "njegov", "njezin", "naš", "vaš", "njihov", "ovaj", "ova", "ovo", "taj", "ta", "to", "onaj", "ona", "ono", "koji", "koja", "koje", "čiji", "čija", "čije", "kakav", "kakva", "kakvo", "kolik", "kolika", "koliko", "tko", "što", "nitko", "ništa", "itko", "išta", "svatko", "svašta", "netko", "nešto", "svakakav", "nikakav", "ikakav", "nekakav",

  # Čestice (Particles)
  "da", "ne", "li", "zar", "čak", "dapače", "evo", "eto", "eno", "gle", "god", "pak", "samo", "valjda", "vjerojatno", "zaista",

  # Prilozi (Adverbs)
  "gdje", "kamo", "kuda", "otkud", "odakle", "dokle", "ovdje", "ondje", "onamo", "ovamo", "ovuda", "onuda", "tada", "sada", "onda", "nikada", "nekada", "ponekad", "često", "rijetko", "uvijek", "stalno", "povremeno", "danas", "sutra", "jučer", "preksutra", "prekjučer", "lani", "zimus", "ljetos", "proljetos", "jesenas", "kako", "tako", "nikako", "nekako", "ovako", "onako", "zašto", "zato", "stoga", "koliko", "toliko", "ovoliko", "onoliko", "malo", "puno", "mnogo", "više", "manje", "najviše", "najmanje", "brzo", "sporo", "dobro", "loše", "jako", "slabo", "vrlo", "prilično", "sasvim", "gotovo", "jedva",

  # Pomoćni glagoli (Auxiliary Verbs)
  "biti", "jesam", "jesi", "jest", "jesmo", "jeste", "jesu", "bih", "bi", "bismo", "biste", "biše", "ću", "ćeš", "će", "ćemo", "ćete", "hoću", "hoćeš", "hoće", "hoćemo", "hoćete", "htjeti", "imam", "imaš", "ima", "imamo", "imate", "imaju", "imati", "nemam", "nemaš", "nema", "nemamo", "nemate", "nemaju", "nemati",

  # Česti glagoli (Common Verbs)
  "ići", "doći", "otići", "reći", "kazati", "govoriti", "pitati", "odgovoriti", "vidjeti", "gledati", "znati", "misliti", "moći", "morati", "trebati", "željeti", "htjeti", "dati", "uzeti", "napraviti", "raditi", "živjeti", "umrijeti", "roditi", "stajati", "sjediti", "ležati", "postati", "ostati", "nalaziti",

  # Česte imenice (Common Nouns)
  "stvar", "dio", "godina", "dan", "vrijeme", "čovjek", "ljudi", "žena", "muškarac", "dijete", "život", "svijet", "zemlja", "grad", "kuća", "posao", "ruka", "noga", "oko", "glava", "srce", "broj", "primjer", "način", "pitanje", "odgovor", "početak", "kraj", "strana", "slučaj",

  # Česti pridjevi (Common Adjectives)
  "velik", "malen", "dobar", "loš", "nov", "star", "lijep", "ružan", "visok", "nizak", "mlad", "star", "jak", "slab", "brz", "spor", "topao", "hladan", "pun", "prazan", "lak", "težak", "isti", "drugi", "različit", "jednostavan", "složen", "moguć", "nemoguć", "poznat", "nepoznat", "pravi", "krivi",

  # Česte imenice (Common Verbs)
  "godina", "moći"
  
  
))

# Naša inovacija: Prilagođena lista religijskih zaustavnih riječi
custom_stop_words <- tibble(word = c(
  # Originalna lista
  "bog", "isus", "gospodin", "moliti", "molitva", "amen",

  # Kršćanstvo (Christianity) - Općenito
  "krist", "biblija", "sveto pismo", "evanđelje", "crkva", "vjera", "vjernik", "grijeh", "pokajanje", "spasenje", "uskrsnuće", "krštenje", "euharistija", "sakrament", "apostol", "prorok", "svetac", "anđeo", "đavao", "sotona", "raj", "pakao", "čistilište", "milost", "blagoslov", "žrtva", "otkupljenje", "trojstvo", "duh sveti", "gospa", "djevica marija", "molitva", "post", "hodočašće", "župa", "župnik", "biskup", "kardinal", "papa", "pastir", "stado", "jaganjac božji",

  # Katolicizam (Catholicism)
  "katolički", "rimokatolički", "sveta stolica", "vatikan", "krunica", "misa", "ispovijed", "pričest", "krizma", "blaženi", "sveti", "nadbiskup", "opat", "časna sestra", "fratar", "svećenik", "kapelan", "celibat", "enciklika", "koncil",

  # Pravoslavlje (Orthodoxy)
  "pravoslavni", "patrijarh", "episkop", "mitropolit", "ikona", "ikonostas", "liturgija", "pričešće", "krst", "slava", "parohija", "paroh", "manastir", "iguman", "monah", "pravoslavlje",

  # Protestantizam (Protestantism)
  "protestantski", "evangelički", "reformacija", "luteran", "kalvinist", "baptist", "pentekostalac", "adventist", "pastor", "prezbiter", "đakon", "propovijed", "slavljenje",

  # Islam
  "islam", "musliman", "kur'an", "muhamed", "alah", "džamija", "minaret", "imam", "hodža", "efendija", "ramazan", "bajram", "hadž", "meka", "medina", "šerijat", "suniti", "šijiti", "džihad", "halal", "haram", "salat", "zekat", "šehadet",

  # Judaizam (Judaism)
  "judaizam", "židov", "tora", "talmud", "sinagoga", "rabin", "košer", "šabat", "pasha", "jom kipur", "roš hašana", "hanuka", "menora", "jahve", "adonaj",

  # Budizam (Buddhism)
  "budizam", "buda", "dharma", "sangha", "karma", "nirvana", "reinkarnacija", "meditacija", "zen", "dalaj lama", "sutre", "mantra", "stupa", "bodisatva",

  # Hinduizam (Hinduism)
  "hinduizam", "hindus", "vede", "upanišade", "bhagavad gita", "brahma", "višnu", "šiva", "krišna", "rama", "šakti", "ganeša", "guru", "svami", "ašram", "joga", "mokša", "samsara", "pudža",

  # Opći religijski i duhovni pojmovi (General Religious and Spiritual Terms)
  "religija", "duhovnost", "božanstvo", "božica", "mitologija", "obred", "ritual", "hram", "svetište", "oltar", "proročanstvo", "otkrivenje", "sudnji dan", "eshatologija", "teologija", "filozofija", "etika", "moral", "duša", "duh", "zagrobni život", "vječnost", "stvaranje", "stvoritelj", "prosvjetljenje", "spoznaja", "transcendencija", "imanencija", "sveto", "profano", "hereza", "sekta", "kult"
))



# Kombiniramo liste
all_stop_words <- bind_rows(stop_words_hr, custom_stop_words)

words_to_remove <- c("godina", "moći") # Dodajte ovdje svoje riječi

word_freq_for_cloud <- nlp_results_df %>%
  filter(upos %in% c("NOUN", "ADJ", "VERB")) %>%
  filter(!lemma %in% stop_words_hr) %>% # Uklanjanje općih stop-riječi
  filter(!lemma %in% words_to_remove) %>% # Uklanjanje vaših specifičnih riječi
  count(lemma, sort = TRUE)




# 2. Kreiranje vizualizacije s ggwordcloud
#set.seed(123) # Za reproduktivnost izgleda oblaka
wordcloud(
  words = word_freq_for_cloud$lemma,    # Riječi
  freq = word_freq_for_cloud$n,         # Frekvencije
  min.freq = 50,                        # Prikazuj samo riječi koje se pojave bar 50 puta
  max.words = 100,                      # Maksimalan broj riječi za prikaz
  random.order = FALSE,                 # Najčešće riječi idu u centar
  rot.per = 0.30,                       # Postotak riječi koje će biti rotirane
  colors = brewer.pal(8, "Dark2")       # Paleta boja
)

# Dodajemo naslo

```

#### Teme

```{r lexicons, include=FALSE, eval=FALSE}
# read in lexicons
CroSentilex_n <- read.delim("C:/Users/Lukas/Dropbox/Mislav@Luka/crosentilex-negatives.txt",
                                   header = FALSE,
                                   sep = " ",
                                   stringsAsFactors = FALSE,
                                   fileEncoding = "UTF-8")  %>%
                   rename(word = "V1", sentiment = "V2" ) %>%
                   mutate(brija = "NEG")

CroSentilex_p  <- read.delim("C:/Users/Lukas/Dropbox/Mislav@Luka/crosentilex-positives.txt",
                                   header = FALSE,
                                   sep = " ",
                                   stringsAsFactors = FALSE,
                                   fileEncoding = "UTF-8") %>%
                    rename(word = "V1", sentiment = "V2" ) %>%
                    mutate(brija = "POZ")

crosentilex  <- rbind(setDT(CroSentilex_n), setDT(CroSentilex_p))
# # check lexicon data 
# #head(sample_n(Crosentilex_sve,1000),15)
# 
#  
CroSentilex_Gold  <- read.delim2("C:/Users/Lukas/Dropbox/Mislav@Luka/gs-sentiment-annotations.txt",
                                 header = FALSE,
                                 sep = " ",
                                 stringsAsFactors = FALSE) %>%
                    rename(word = "V1", sentiment = "V2" )
 # Encoding(CroSentilex_Gold$word) <- "UTF-8"
 # CroSentilex_Gold[1,1] <- "dati"
 # CroSentilex_Gold$sentiment <- str_replace(CroSentilex_Gold$sentiment , "-", "1")
 # CroSentilex_Gold$sentiment <- str_replace(CroSentilex_Gold$sentiment , "\\+", "2")
 # CroSentilex_Gold$sentiment <- as.numeric(unlist(CroSentilex_Gold$sentiment))
# check lexicon data 
#head(sample_n(CroSentilex_Gold,100),15)
crosentilex_gold_prepared <- CroSentilex_Gold %>%
  mutate(
    sentiment_value = case_when(
      sentiment == 2 ~ 1,   # Pozitivno
      sentiment == 1 ~ -1,  # Negativno
      TRUE ~ 0              # Neutralno
    )
  ) %>%
  select(word, sentiment_value)

 
nrc_lexicon  <- read_excel("C:/Users/Lukas/Dropbox/Mislav@Luka/lilaHR_clean.xlsx", sheet = "Sheet1") %>% select (-"...1")


# Prvo definiramo "rječnik" za prevođenje
emotion_translator_hr <- c(
  "Anger"        = "Ljutnja",
  "Anticipation" = "Iščekivanje",
  "Disgust"      = "Gađenje",
  "Fear"         = "Strah",
  "Joy"          = "Radost",
  "Sadness"      = "Tuga",
  "Surprise"     = "Iznenađenje",
  "Trust"        = "Povjerenje"
  # Ne trebamo 'Positive' i 'Negative' jer ih ionako filtriramo
)

# Sada modificiramo originalni cjevovod
nrc_lexicon_long <- nrc_lexicon %>%
  rename(word = HR) %>% 
  pivot_longer(
    cols = -word,
    names_to = "emotion",
    values_to = "value"
  ) %>%
  filter(value == 1) %>%
  select(word, emotion) %>%
  # Filtriramo opće sentimente PRIJE prevođenja
  filter(emotion != "Positive" & emotion != "Negative") %>%
  # DODAJEMO NOVI KORAK: Prevođenje stupca 'emotion'
  mutate(emotion = recode(emotion, !!!emotion_translator_hr))

nrc_lexicon_long_ <- read_excel("C:/Users/Lukas/Dropbox/Mislav@Luka/lilaHR_clean_long.xlsx", sheet = "Sheet1") %>% select (-"...1") 

```


```{r load-lexicons}
# --- FAZA 1: UČITAVANJE I PRIPREMA SVIH LEKSIKONA ---
# Ovaj chunk učitava sve potrebne jezične resurse i pretvara ih u "uredan" (tidy)
# format spreman za spajanje s lingvističkim podacima.
# Ključni koraci su forsiranje UTF-8 kodiranja i standardizacija formata.

# --- 1.1: CroSentilex (fina skala sentimenata) ---
# Učitavamo pozitivne i negativne liste i odmah ih spajamo u jedan leksikon
# sa standardiziranom numeričkom skalom.
crosentilex_full <- bind_rows(
  # Učitavanje negativnih riječi
  read.delim("C:/Users/Lukas/Dropbox/Mislav@Luka/crosentilex-negatives.txt",
             header = FALSE, sep = " ", stringsAsFactors = FALSE, fileEncoding = "UTF-8") %>%
    rename(word = "V1", sentiment_value = "V2") %>%
    mutate(sentiment_value = -sentiment_value), # Pretvaramo score u negativan
  
  # Učitavanje pozitivnih riječi
  read.delim("C:/Users/Lukas/Dropbox/Mislav@Luka/crosentilex-positives.txt",
             header = FALSE, sep = " ", stringsAsFactors = FALSE, fileEncoding = "UTF-8") %>%
    rename(word = "V1", sentiment_value = "V2") # Score je već pozitivan
) %>%
  as_tibble() # Pretvaramo u tibble radi bolje konzistentnosti

# --- 1.2: CroSentilex-Gold (kategorički sentiment) ---
# Učitavamo "zlatni standard" i pretvaramo tekstualne oznake u numeričku skalu (-1, 0, 1).
crosentilex_gold_prepared <- read.delim2("C:/Users/Lukas/Dropbox/Mislav@Luka/gs-sentiment-annotations.txt",
                                         header = FALSE, sep = " ", stringsAsFactors = FALSE, fileEncoding = "UTF-8") %>%
  rename(word = "V1", sentiment_str = "V2") %>%
  mutate(
    sentiment_value = case_when(
      sentiment_str == "+" ~ 1,
      sentiment_str == "-" ~ -1,
      TRUE ~ 0
    )
  ) %>%
  select(word, sentiment_value) %>%
  as_tibble()

# --- 1.3: NRC Leksikon Emocija (za psihološke procese) ---
# Učitavamo NRC leksikon, pretvaramo ga u "dugi" format i prevodimo na hrvatski.
nrc_lexicon_raw <- read_excel("C:/Users/Lukas/Dropbox/Mislav@Luka/lilaHR_clean.xlsx", sheet = "Sheet1") %>% 
                   select(-"...1") %>%
                   rename(word = HR)

# Rječnik za prevođenje engleskih naziva emocija
emotion_translator_hr <- c(
  "Anger" = "Ljutnja", "Anticipation" = "Iščekivanje", "Disgust" = "Gađenje",
  "Fear" = "Strah", "Joy" = "Radost", "Sadness" = "Tuga",
  "Surprise" = "Iznenađenje", "Trust" = "Povjerenje"
)

# Transformacija u dugi, prevedeni format
nrc_lexicon_long <- nrc_lexicon_raw %>% 
  pivot_longer(
    cols = all_of(names(emotion_translator_hr)), # Koristimo samo 8 glavnih emocija
    names_to = "emotion",
    values_to = "value"
  ) %>%
  filter(value == 1) %>% # Zadržavamo samo postojeće veze riječ-emocija
  mutate(emotion = recode(emotion, !!!emotion_translator_hr)) %>% # Prevodimo na hrvatski
  select(word, emotion)

# --- Provjera Učitanih Leksikona (opcionalno) ---
# print("Primjer CroSentilex-Full:")
# print(head(crosentilex_full))
# print("Primjer CroSentilex-Gold Prepared:")
# print(head(crosentilex_gold_prepared))
# print("Primjer NRC Long:")
# print(head(nrc_lexicon_long))
```



```{r}
thematic_intensity_data2 <- dta_enriched2 %>%
  select(starts_with("norm_")) %>%
  pivot_longer(everything(), names_to = "topic", values_to = "intensity") %>%
  mutate(topic = str_remove(topic, "norm_")) %>%
  filter(intensity > 0)

ggplot(thematic_intensity_data2, aes(x = intensity, y = fct_reorder(topic, intensity, .fun = median))) +
  geom_density_ridges(scale = 2, fill = "#0072B2", color = "white", alpha = 0.8) +
  scale_x_log10(breaks = c(1, 10, 100, 1000), labels = c("1", "10", "100", "1000")) +
  theme_minimal(base_size = 14) +
  labs(
    title = "Distribucija intenziteta tema",
    subtitle = "Koliko su teme centralne za članke u kojima se pojavljuju?",
    x = "Intenzitet teme (spominjanja na 1000 riječi, log skala)",
    y = "Tema"
  ) +
  theme(panel.grid.major.y = element_blank())
```

#### Teme II

```{r plot-topic-intensity}
thematic_intensity_data <- dta_enriched %>%
  select(starts_with("norm_")) %>%
  pivot_longer(everything(), names_to = "topic", values_to = "intensity") %>%
  mutate(topic = str_remove(topic, "norm_")) %>%
  filter(intensity > 0)

ggplot(thematic_intensity_data, aes(x = intensity, y = fct_reorder(topic, intensity, .fun = median))) +
  geom_density_ridges(scale = 2, fill = "#0072B2", color = "white", alpha = 0.8) +
  scale_x_log10(breaks = c(1, 10, 100, 1000), labels = c("1", "10", "100", "1000")) +
  theme_minimal(base_size = 14) +
  labs(
    title = "Distribucija intenziteta tema",
    subtitle = "Koliko su teme centralne za članke u kojima se pojavljuju?",
    x = "Intenzitet teme (spominjanja na 1000 riječi, log skala)",
    y = "Tema"
  ) +
  theme(panel.grid.major.y = element_blank())
```

#### Teme III

```{r}

topic_palette <- c(
  "#003366",  # Dark Blue
  "#5B9BD5",  # Medium Blue
  "#C00000",  # Accent Red
  "#BF8F00",  # Accent Gold
  "#005F56",  # Dark Green
  "#A0522D",  # Muted Sienna
  "#7F7F7F",  # Medium Grey
  "#8A798C"   # Muted Mauve
)



engagement_by_topic <- dta_enriched %>%
  filter(dominant_topic != "Nema Teme") %>%
  group_by(dominant_topic) %>%
  summarise(
    # --- IZMJENA: Koristimo Vrijednost_EUR ---
    avg_vrijednost = mean(`Vrijednost €`, na.rm = TRUE), 
    total_articles = n()
  ) %>%
  arrange(desc(avg_vrijednost))

# --- 3. Crtanje grafikona (primijenjena tema i paleta) ---
graf_teme_avg_vrijednost <- ggplot(engagement_by_topic, 
       aes(x = avg_vrijednost, 
           y = fct_reorder(dominant_topic, avg_vrijednost),
           fill = dominant_topic)) + # Mapiramo fill na temu
  
  geom_col(width = 0.8) +
  
  # --- IZMJENA: Formatiramo labelu kao Euro ---
  geom_text(aes(label = scales::comma(avg_vrijednost, suffix = " €", big.mark = ".", decimal.mark = ",", accuracy = 1)), 
            hjust = -0.05, 
            size = 4) +
            
  # Proširujemo os da stane tekst
  expand_limits(x = max(engagement_by_topic$avg_vrijednost, na.rm = TRUE) * 1.15) +
  
  # --- PRIMJENA PALETE ---
  scale_fill_manual(values = topic_palette) +
  
  # --- PRIMJENA TEME ---
  theme_minimal(base_size = 14) +
  labs(
    title = "Koje teme generiraju najviše prosječne vrijednosti (€)?",
    subtitle = "Prosječna medijska vrijednost (€) po članku za svaku dominantnu temu",
    x = "Prosječna vrijednost (€)", 
    y = "Dominantna tema"
  ) +
  theme(
    legend.position = "none",
    panel.grid.major.y = element_blank(),
    panel.grid.minor.x = element_blank()
  )

graf_teme_avg_vrijednost


```


#### Teme IV


```{r}
engagement_by_topic2 <- dta_enriched_people %>%
  filter(dominant_topic != "Nema Teme") %>%
  group_by(dominant_topic) %>%
  summarise(
    # --- IZMJENA: Koristimo Vrijednost_EUR ---
    avg_vrijednost = mean(`Vrijednost €`, na.rm = TRUE),
    total_articles = n()
  ) %>%
  arrange(desc(avg_vrijednost))

# --- 3. Crtanje grafikona (primijenjena tema i paleta) ---
graf_akteri_avg_vrijednost <- ggplot(engagement_by_topic2, 
       aes(x = avg_vrijednost, 
           y = fct_reorder(dominant_topic, avg_vrijednost),
           fill = dominant_topic)) + # Mapiramo fill na aktera
           
  geom_col(width = 0.8) +
  
  # --- IZMJENA: Formatiramo labelu kao Euro ---
  geom_text(aes(label = scales::comma(avg_vrijednost, suffix = " €", big.mark = ".", decimal.mark = ",", accuracy = 1)), 
            hjust = -0.05, 
            size = 4) +
            
  expand_limits(x = max(engagement_by_topic2$avg_vrijednost, na.rm = TRUE) * 1.15) +
  
  # --- PRIMJENA PALETE ---
  scale_fill_manual(values = topic_palette) +
  
  # --- PRIMJENA TEME ---
  theme_minimal(base_size = 14) +
  labs(
    title = "Koji akteri generiraju najviše prosječne vrijednosti (€)?",
    subtitle = "Prosječna medijska vrijednost (€) po članku za svakog dominantnog aktera",
    x = "Prosječna vrijednost (€)", 
    y = "Dominantni akter"
  ) +
  theme(
    legend.position = "none",
    panel.grid.major.y = element_blank(),
    panel.grid.minor.x = element_blank()
  )
graf_akteri_avg_vrijednost



```


#### Teme V


```{r plot-topic-network, fig.height=10}
# Ovaj kod je iz vašeg RMD-a, samo ga prikazujemo ovdje.
topic_pairs <- dta_enriched %>%
  select(doc_id, starts_with("norm_")) %>%
  pivot_longer(-doc_id, names_to = "topic", values_to = "intensity") %>%
  mutate(topic = str_remove(topic, "norm_")) %>%
  filter(intensity > 0) %>%
  pairwise_cor(item = topic, feature = doc_id, upper = FALSE)

set.seed(123)
topic_pairs %>%
  filter(correlation > 0.1) %>%
  graph_from_data_frame() %>%
  ggraph(layout = "fr") +
  geom_edge_link(aes(edge_alpha = correlation, edge_width = correlation), color = "lightblue") +
  geom_node_point(color = "darkblue", size = 5) +
  geom_node_text(aes(label = str_wrap(name, 20)), repel = TRUE, size = 4) +
  theme_void() +
  labs(
    title = "Mreža povezanosti tema",
    subtitle = "Koje se teme najčešće pojavljuju zajedno u istim člancima?",
    edge_width = "Snaga veze (korelacija)",
    edge_alpha = ""
  )
```





```{r emotional-analysis, include=FALSE, eval=T}
# --- Izračuni za dvoslojnu analizu (izvršava se u pozadini) ---

# Sloj 1: Sentiment Score (CroSentilex)
# document_sentiments <- nlp_results_df %>%
#   inner_join(crosentilex_gold_prepared, by = c("lemma" = "word")) %>%
#   group_by(doc_id) %>%
#   summarise(sentiment_score = median(sentiment_value, na.rm = TRUE)) %>%
#   ungroup()
# files <- list.files("D:/LUKA/Language model", full.names = TRUE, pattern = "\\.rds")
# nlp_results_df <- lapply(files, readRDS) %>%
#   bind_rows() %>%
#   mutate(doc_id = as.integer(doc_id))


sentiment_counts_gold <- nlp_results_df %>%
  inner_join(crosentilex_gold_prepared, by = c("lemma" = "word")) %>%
  # Filtriramo neutralne riječi jer nam ne trebaju za ovu formulu
  filter(sentiment_value != 0) %>% 
  # Brojimo koliko je pozitivnih (1) i negativnih (-1) riječi
  count(doc_id, sentiment_value) %>%
  # Pretvaramo u široki format da imamo stupce za 'pozitivne' i 'negativne'
  pivot_wider(names_from = sentiment_value, values_from = n, values_fill = 0)

# --- DEFENZIVNI BLOK KODA ---
# Provjeravamo postoji li stupac '1' (pozitivni). Ako ne, dodajemo ga s nulama.
if (!"1" %in% names(sentiment_counts_gold)) {
  sentiment_counts_gold <- sentiment_counts_gold %>% mutate(`1` = 0) }
# Provjeravamo postoji li stupac '-1' (negativni). Ako ne, dodajemo ga s nulama.
if (!"-1" %in% names(sentiment_counts_gold)) {
  sentiment_counts_gold <- sentiment_counts_gold %>% mutate(`-1` = 0) }
# --- KRAJ DEFENZIVNOG BLOKA ---

# Sada sigurno preimenujemo stupce jer znamo da postoje
sentiment_counts_gold <- sentiment_counts_gold %>%
  rename(
    positive_words = `1`,
    negative_words = `-1` )


epsilon <- 1e-6 

document_sentiments_gold <- sentiment_counts_gold %>%
  mutate(
    sentiment_score_gold = (positive_words - negative_words) / (positive_words + negative_words + epsilon)
  ) %>%
  select(doc_id, sentiment_score_gold)

# Sloj 2: Dominantni Psihološki Proces (NRC)
document_emotions <- nlp_results_df %>%
  inner_join(nrc_lexicon_long, by = c("lemma" = "word")) %>%
  count(doc_id, emotion) %>%
  group_by(doc_id) %>%
  slice_max(order_by = n, n = 1, with_ties = FALSE) %>%
  ungroup() %>%
  select(doc_id, dominant_emotion = emotion)

# Spajanje svega u jedan dataframe
dta_atmosphere <- dta_enriched %>%
  left_join(document_sentiments_gold, by = "doc_id") %>%
  left_join(document_emotions, by = "doc_id") %>%
  mutate(
    sentiment_score = ifelse(is.na(sentiment_score_gold), 0, sentiment_score_gold),
    dominant_emotion = ifelse(is.na(dominant_emotion), "Neutralno", dominant_emotion)
  )

# Priprema podataka za vizualizaciju
heatmap_data <- dta_atmosphere %>%
  filter(dominant_topic != "Nema Teme") %>%
  group_by(dominant_topic, dominant_emotion) %>%
  summarise(avg_sentiment = mean(sentiment_score),
            n_articles = n()) %>%
  ungroup() %>%
  # Prikazujemo samo emocije s dovoljno članaka za analizu
  filter(n_articles > 1)
```

:::

---


## Prijedlog projekta

<br>
Kako iskoristiti postojeće podatke?
<br>

::: {.panel-tabset}
#### Uokvirivanje


```{r plot-emotion-heatmap, fig.width=10, fig.height=6, echo=FALSE}



ggplot(heatmap_data, aes(x = dominant_emotion, y = dominant_topic, fill = avg_sentiment)) +
  geom_tile(color = "white", linewidth = 0.5) +
  geom_text(aes(label = round(avg_sentiment, 2)), size = 3, color = "black") +
  scale_fill_gradient2(low = "firebrick", mid = "white", high = "steelblue", midpoint = 0, name = "Prosj. Sentiment") +
  theme_minimal(base_size = 12) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(
    title = "Matrica atmosfere: Kako psihološki okvir utječe na tonalitet teme",
    subtitle = "Boja ćelije predstavlja prosječni sentiment (CroSentilex) unutar svake kombinacije teme i dominantne emocije (NRC)",
    x = "Dominantni psihološki proces (NRC)",
    y = "Dominantna tema"
  )
```


```{r rci-calculation, include=FALSE}
# --- Izračuni za RCI (izvršava se u pozadini) ---
conflict_lexicon <- nrc_lexicon_long %>% 
  filter(emotion %in% c("Ljutnja", "Gađenje")) %>% 
  pull(word) %>% 
  unique()


conflict_lexicon <- unique(c(
  (nrc_lexicon_long %>% filter(emotion %in% c("Ljutnja", "Gađenje", "Strah")) %>% pull(word)),
  (crosentilex_full %>% filter(sentiment_value <= -0.75) %>% pull(word)),
  c(
  # Opći konflikt i kritika (General Conflict & Criticism)
  "kritik", "laž", "napad", "upozorenj", "licemjerje", "sramotno", "manipulacij", 
  "propaganda", "ekstrem", "kontroverz", "sukob", "optužb", "prijetnj", "opasnost",

  # Kriza i neuspjeh (Crisis & Failure)
  "kriza", "kolaps", "slom", "propast", "gubitak", "šteta", "neuspjeh", "recesija",

  # Nezakonitosti i skandali (Illegality & Scandals)
  "skandal", "afera", "korupcij", "prevara", "prijevara", "zlouporaba", "tužb", 
  "presuda", "nezakonito", "sukob interesa", "netransparentnost",
  
  # Ekonomski pritisci i rizici (Economic Pressures & Risks)
  "rizik", "dug", "deficit", "teret", "namet", "trošak", "siromaštv", "špekulacij", 
  "mjehur", # (npr. nekretninski mjehur)

  # Specifične povijesne kontroverze (Specific Historical Controversies)
  "franak", "švicarac", "klub"
)
))





cli_scores <- nlp_results_df %>%
  mutate(is_conflict = lemma %in% conflict_lexicon) %>%
  group_by(doc_id) %>%
  summarise(
    cli = (sum(is_conflict) / n()) * 1000
  )

dta_atmosphere <- dta_enriched %>% 
  left_join(cli_scores, by = "doc_id") %>%
  mutate(cli = ifelse(is.na(cli), 0, cli))

avg_cli_media <- dta_atmosphere %>% group_by(Medij) %>% summarise(avg_cli_media = mean(cli))
avg_cli_topic <- dta_atmosphere %>% group_by(dominant_topic) %>% summarise(avg_cli_topic = mean(cli))

dta_atmosphere <- dta_atmosphere %>%
  left_join(avg_cli_media, by = "Medij") %>%
  left_join(avg_cli_topic, by = "dominant_topic") %>%
  mutate(
    expected_cli = 0.5 * avg_cli_media + 0.5 * avg_cli_topic,
    rci = cli - expected_cli
  )
```


```{r}
# --- MODUL ZA MAPU MEDIJSKIH STRATEGIJA (ISPRAVLJENA VERZIJA) ---

# Izračun CLI-a (ostaje isto)
cli_scores <- nlp_results_df %>%
  mutate(is_conflict = lemma %in% conflict_lexicon) %>%
  group_by(doc_id) %>%
  summarise(
    cli = (sum(is_conflict) / n()) * 1000
  ) %>% ungroup()

# Spajanje i izračun RCI-a (ostaje isto)
dta_atmosphere <- dta_enriched %>% 
  left_join(cli_scores, by = "doc_id") %>%
  mutate(cli = ifelse(is.na(cli), 0, cli))

avg_cli_media <- dta_atmosphere %>% group_by(Medij) %>% summarise(avg_cli_media = mean(cli))
avg_cli_topic <- dta_atmosphere %>% group_by(dominant_topic) %>% summarise(avg_cli_topic = mean(cli))

dta_atmosphere_final <- dta_atmosphere %>%
  left_join(avg_cli_media, by = "Medij") %>%
  left_join(avg_cli_topic, by = "dominant_topic") %>%
  mutate(
    expected_cli = 0.5 * avg_cli_media + 0.5 * avg_cli_topic,
    rci = cli - expected_cli
  )
```

#### Konfliktnost

```{r plot-rci-strategy, fig.width=10, fig.height=7, warning=FALSE, message=FALSE}
media_strategy_data <- dta_atmosphere_final %>%
  # Grupiramo po mediju
  group_by(Medij) %>%
  # Računamo naše metrike I broj članaka
  summarise(
    avg_cli = mean(cli, na.rm = TRUE),
    rci_sd = sd(rci, na.rm = TRUE),
    n_articles = n()
  ) %>%
  ungroup() #%>%
  # Filtriramo medije s premalo članaka i one gdje je devijacija NA
  #filter(n_articles > 1, !is.na(rci_sd), rci_sd > 0) %>%
  # Uzimamo top 30 po broju članaka radi preglednosti
  #slice_max(order_by = n_articles, n = 2)

# Vizualizacija s poboljšanjima
ggplot(media_strategy_data, aes(x = avg_cli, y = rci_sd, size = n_articles)) + # Dodajemo size = n_articles
  # Dodajemo malo "jittera" da se točke koje su blizu razdvoje
  geom_jitter(color = "darkred", alpha = 0.7, width = 0.01, height = 0.01) + 
  
  geom_text_repel(aes(label = Medij), size = 3.5, max.overlaps = 15) +
  
  # KORISTIMO LOGARITAMSKU SKALU za bolju distribuciju
  scale_x_log10(labels = scales::number_format(accuracy = 0.1)) +
  scale_y_log10(labels = scales::number_format(accuracy = 0.1)) +
  
  scale_size_continuous(range = c(2, 10), name = "Broj članaka") +
  
  theme_minimal(base_size = 14) +
  labs(
    title = "Mapa medijskih strategija konflikta",
    subtitle = "Pozicija medija temeljena na prosječnoj razini i varijabilnosti konfliktnog jezika",
    x = "Prosječni indeks konfliktnog jezika (CLI) - 'Kućni Ton' (Log Skala)",
    y = "Standardna devijacija RCI-a - 'Nepredvidivost' (Log Skala)"
  )
```

#### Narativi

```{r figure=TRUE, fig.width=12, fig.height=10, warning=FALSE, message=FALSE}
# --- MODUL ZA MREŽU NARATIVNE ATMOSFERE (ISPRAVLJENA I POBOLJŠANA VERZIJA) ---
library(widyr)
library(ggraph)
library(igraph)
library(textreg)


# 1. KORAK: Izračun frekvencija riječi iz 'nlp_results_df'
lemmatized_words_with_freq <- nlp_results_df %>%
  # Brojimo koliko se puta svaka lema pojavljuje u svakom dokumentu
  count(doc_id, lemma, name = "word_frequency")

# 2. KORAK: Izračun Sentiment Score-a (CroSentilex-Gold)
document_sentiments_gold <- lemmatized_words_with_freq %>%
  inner_join(crosentilex_gold_prepared, by = c("lemma" = "word")) %>%
  mutate(
    sentiment_value = as.numeric(sentiment_value),
    word_frequency = as.numeric(word_frequency)
  ) %>%
  group_by(doc_id) %>%
  summarise(sentiment_score_gold = sum(sentiment_value * word_frequency, na.rm = TRUE)) %>%
  ungroup()


# 3. KORAK: Izračun Indeksa Konfliktnog Jezika (CLI)
conflict_lexicon <- unique(c(
  (nrc_lexicon_long %>% filter(emotion %in% c("Ljutnja", "Gađenje", "Strah")) %>% pull(word)),
  (crosentilex_full %>% filter(sentiment_value <= -0.75) %>% pull(word)),
  c("laž", "skandal", "napad", "radikalan", "ideologija", "licemjerje", "sramotno", "mržnja", "podjela", "raskol", "manipulacija", "propaganda", "ekstrem", "kontroverz", "sukob", "kriza")
))

cli_scores <- lemmatized_words_with_freq %>%
  mutate(is_conflict = lemma %in% conflict_lexicon) %>%
  group_by(doc_id) %>%
  summarise(
    total_words = sum(word_frequency),
    conflict_words = sum(word_frequency[is_conflict])
  ) %>%
  mutate(cli = (conflict_words / total_words) * 1000) %>%
  ungroup()

# 4. KORAK: Spajanje SVIH metrika u jedan 'dta_final' dataframe
dta_final <- dta_enriched %>%
  left_join(document_sentiments_gold, by = "doc_id") %>%
  left_join(cli_scores %>% select(doc_id, cli), by = "doc_id") %>%
  mutate(
    sentiment_score_gold = ifelse(is.na(sentiment_score_gold), 0, sentiment_score_gold),
    cli = ifelse(is.na(cli), 0, cli)
  )


# 5. KORAK: Izračun Relativnog Indeksa Konflikta (RCI)
avg_cli_media <- dta_final %>% group_by(Medij) %>% summarise(avg_cli_media = mean(cli))
avg_cli_topic <- dta_final %>% group_by(dominant_topic) %>% summarise(avg_cli_topic = mean(cli))

dta_final <- dta_final %>%
  left_join(avg_cli_media, by = "Medij") %>%
  left_join(avg_cli_topic, by = "dominant_topic") %>%
  mutate(
    expected_cli = 0.5 * avg_cli_media + 0.5 * avg_cli_topic,
    rci = cli - expected_cli
  )


# --- ANALIZA MREŽE NARATIVNE ATMOSFERE ---

# 6. KORAK: Identifikacija dokumenata s više tema
mixed_topic_docs <- dta_final %>%
  select(doc_id, starts_with("norm_")) %>%
  pivot_longer(-doc_id, names_to = "topic", values_to = "intensity") %>%
  mutate(topic = str_remove(topic, "norm_")) %>%
  filter(intensity > 1.5) %>%
  add_count(doc_id) %>%
  filter(n >= 2) %>%
  select(doc_id, topic)

# 7. KORAK: Izoliranje atmosfere za relevantne dokumente
atmosphere_of_mixed_docs <- dta_final %>%
  filter(doc_id %in% unique(mixed_topic_docs$doc_id)) %>%
  select(doc_id, sentiment_score = sentiment_score_gold, rci)

# 8. KORAK: Efikasno računanje ko-okurencija i atmosfere parova
pair_data <- mixed_topic_docs %>%
  inner_join(atmosphere_of_mixed_docs, by = "doc_id")

narrative_pairs <- pair_data %>%
  pairwise_count(item = topic, feature = doc_id, upper = FALSE)


# document_topic_pairs <- pair_data %>%
#   # Stvaramo parove unutar svakog dokumenta
#   pairwise_count(item = topic, feature = doc_id, upper = FALSE) %>%
#   # Spajamo s originalnim podacima da bismo dobili atmosferu za svaki DOKUMENT u kojem se par pojavio
#   inner_join(atmosphere_of_mixed_docs, by = c("feature" = "doc_id"))


narrative_pair_data <- dta_final %>%
  # Odabiremo samo potrebne stupce
  select(doc_id, sentiment_score_gold, rci, starts_with("norm_")) %>%
  # Pretvaramo u dugi format
  pivot_longer(
    cols = starts_with("norm_"),
    names_to = "topic",
    values_to = "intensity"
  ) %>%
  # Uklanjamo prefiks 'norm_'
  mutate(topic = str_remove(topic, "norm_")) %>%
  # Zadržavamo samo jake teme
  filter(intensity > 1.5) %>%
  # KLJUČNI DIO: Spajamo dataframe sam sa sobom da stvorimo parove
  inner_join(., ., by = "doc_id") %>%
  # Zadržavamo samo jedinstvene parove (npr. izbjegavamo A-B i B-A)
  filter(topic.x < topic.y) %>%
  # Sada imamo dataframe gdje svaki redak predstavlja par tema u jednom dokumentu
  # i imamo atmosferu tog dokumenta
  select(doc_id, 
         item1 = topic.x, 
         item2 = topic.y, 
         sentiment_score = sentiment_score_gold.x, # .x jer su se imena duplicirala
         rci = rci.x)


graph_data <- narrative_pair_data %>%
  group_by(item1, item2) %>%
  summarise(
    n = n(), # Brojimo koliko se puta par pojavio
    avg_sentiment = mean(sentiment_score, na.rm = TRUE),
    avg_rci = mean(rci, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  filter(n > 10) # Zadržavamo samo parove s dovoljno članaka



set.seed(123)
graph_from_data_frame(graph_data, directed = FALSE) %>%
  ggraph(layout = "fr") +
    geom_edge_fan(
      aes(
        color = avg_sentiment, 
        width = avg_rci,
        alpha = n
      ), 
      arrow = NULL
    ) +
    geom_node_point(color = "black", size = 10) +
    geom_node_text(aes(label = str_wrap(name, 15)), color = "black", size = 3.5) +
    scale_edge_color_gradient2(
      low = "firebrick", mid = "lightgrey", high = "steelblue", midpoint = 0, 
      name="Prosj. sentiment\nnarativnog okvira"
    ) +
    scale_edge_width(
      range = c(1, 4), 
      name="Prosj. intenzitet konflikta (RCI)"
    ) +
    scale_edge_alpha(
      range = c(0.3, 1),
      name = "Broj članaka\n(Pouzdanost veze)"
    ) +
    theme_graph(base_family = "sans") +
    labs(
      title = "Mreža narativne atmosfere",
      subtitle = "Boja veze = tonalitet | Debljina veze = konflikt | Prozirnost veze = oouzdanost"
    )





```

#### Dinamika I

```{r anomaly-detection, eval= T, message=FALSE, warning=FALSE}
# --- KOD ZA DETEKCIJU ANOMALIJA (POBOLJŠANA VERZIJA) ---
daily_summary <- dta_final %>%
  mutate(date = as.Date(DATE)) %>%
  group_by(date) %>%
  summarise(
    n_articles = n(),
    avg_cli = mean(cli, na.rm = TRUE)
  ) %>%
  ungroup()

# Računamo pragove (99-i percentil)
volume_threshold <- quantile(daily_summary$n_articles, 0.97)
cli_threshold <- quantile(daily_summary$avg_cli, 0.97)

# Identificiramo "potrese"
spikes_detected <- daily_summary %>%
  mutate(
    is_volume_spike = n_articles > volume_threshold,
    is_cli_spike = avg_cli > cli_threshold
  )

# Vizualizacija
p_volume <- ggplot(spikes_detected, aes(x = date, y = n_articles)) +
  geom_line(color = "grey") +
  geom_point(data = filter(spikes_detected, is_volume_spike), color = "red", size = 3) +
  geom_hline(yintercept = volume_threshold, linetype="dashed", color="red") +
  theme_minimal() +
  labs(title = "Ekstremni volumen objava", y = "Broj članaka dnevno", x = "")

p_cli <- ggplot(spikes_detected, aes(x = date, y = avg_cli)) +
  geom_line(color = "grey") +
  geom_point(data = filter(spikes_detected, is_cli_spike), color = "red", size = 3) +
  geom_hline(yintercept = cli_threshold, linetype="dashed", color="red") +
  theme_minimal() +
  labs(title = "Ekstremni intenzitet konflikta", y = "Prosječni CLI dnevno", x = "Datum")


```



```{r standardized-anomaly-detection_}
# --- KOD ZA STANDARDIZIRANU DETEKCIJU ANOMALIJA ---

# Agregiramo podatke po danu
daily_summary <- dta_final %>%
  mutate(date = as.Date(DATE),
         year = year(date)) %>% # Dodajemo godinu za godišnju standardizaciju
  group_by(date, year) %>%
  summarise(
    n_articles = n(),
    avg_cli = mean(cli, na.rm = TRUE),
    .groups = "drop"
  )

# Standardiziramo vrijednosti (računamo Z-score) unutar svake godine
standardized_summary <- daily_summary %>%
  group_by(year) %>%
  mutate(
    # Z-score = (vrijednost - prosjek) / standardna devijacija
    z_score_volume = (n_articles - mean(n_articles)) / sd(n_articles),
    z_score_cli = (avg_cli - mean(avg_cli)) / sd(avg_cli)
  ) %>%
  ungroup()

# Definiramo prag za "šiljak" (npr. 3 standardne devijacije)
spike_threshold_z <- 3

# Identificiramo "potrese"
spikes_detected_z <- standardized_summary %>%
  mutate(
    is_volume_spike = z_score_volume > spike_threshold_z,
    is_cli_spike = z_score_cli > spike_threshold_z
  )

# --- ISPIS DATUMA S ANOMALIJAMA ---
volume_spike_dates <- spikes_detected_z %>%
  filter(is_volume_spike) %>%
  select(date, n_articles, z_score_volume) %>%
  arrange(desc(z_score_volume))

cli_spike_dates <- spikes_detected_z %>%
  filter(is_cli_spike) %>%
  select(date, avg_cli, z_score_cli) %>%
  arrange(desc(z_score_cli))

# # (Ovaj dio ispod će ispisati tablice direktno u vaš HTML dokument)
# cat("### Dani s Ekstremnim Volumom Objava\n\n")
# knitr::kable(volume_spike_dates, caption = "Top datumi rangirani po Z-scoreu volumena.")
# 
# cat("\n### Dani s Ekstremnim Intenzitetom Konflikta\n\n")
# knitr::kable(cli_spike_dates, caption = "Top datumi rangirani po Z-scoreu konflikta.")


# --- VIZUALIZACIJA STANDARDIZIRANIH VRIJEDNOSTI ---
p_volume_z <- ggplot(spikes_detected_z, aes(x = date, y = z_score_volume)) +
  geom_line(color = "grey") +
  geom_point(data = filter(spikes_detected_z, is_volume_spike), color = "red", size = 3) +
  geom_hline(yintercept = spike_threshold_z, linetype = "dashed", color = "red") +
  theme_minimal() +
  labs(
    title = "Anomalije u volumenu objava (Standardizirano)",
    y = "Odstupanje od prosjeka (u st. dev.)",
    x = ""
  )

p_cli_z <- ggplot(spikes_detected_z, aes(x = date, y = z_score_cli)) +
  geom_line(color = "grey") +
  geom_point(data = filter(spikes_detected_z, is_cli_spike), color = "red", size = 3) +
  geom_hline(yintercept = spike_threshold_z, linetype = "dashed", color = "red") +
  theme_minimal() +
  labs(
    title = "Anomalije u intenzitetu konflikta (Standardizirano)",
    y = "Odstupanje od prosjeka (u st. dev.)",
    x = "Datum"
  )


```



```{r}
p_volume_z
```

#### Dinamika II

```{r}
p_cli_z
```

:::

---

## Prijedlog projekta

<br>
Kako iskoristiti postojeće podatke?
<br>

::: {.panel-tabset}

#### Platforme

```{r}
df_clean <- df %>%
  # Pretvaramo 'Vrijednost €' u numeričku vrijednost.
  mutate(Vrijednost_EUR = as.numeric(`Vrijednost €`)) %>%
  
  # Pretvaramo 'Datum izdanja' u Date objekt
  # read_excel često sam prepozna datume, ali osiguravamo da je Date objekt
  mutate(Datum_Izdanja_Clean = as_date(`Datum izdanja`)) %>%
  
  # Izbacujemo retke gdje datum nije prepoznat ili gdje je vrijednost 0 ili NA
  filter(!is.na(Datum_Izdanja_Clean) & !is.na(Vrijednost_EUR) & Vrijednost_EUR > 0)

# Provjera imamo li podataka nakon filtriranja
if (nrow(df_clean) == 0) {
  stop("Nema podataka za analizu nakon filtriranja (Vrijednost > 0 i ispravan datum).")
} else {
  message(paste("Podatci uspješno učitani i pročišćeni. Nastavljam s", nrow(df_clean), "redaka."))
}


```


```{r}
topic_palette <- c(
  "#003366",  # Dark Blue
  "#5B9BD5",  # Medium Blue
  "#C00000",  # Accent Red
  "#BF8F00",  # Accent Gold
  "#005F56",  # Dark Green
  "#A0522D",  # Muted Sienna
  "#7F7F7F",  # Medium Grey
  "#8A798C"   # Muted Mauve
)

# --- 2. Priprema podataka (iz vašeg koda) ---
# Pretpostavka: df_clean već postoji i obrađen je
vrsta_medija_data <- df_clean %>%
  group_by(`Vrsta medija`) %>%
  summarise(Ukupna_Vrijednost = sum(Vrijednost_EUR, na.rm = TRUE))

# --- 3. Kreiranje grafikona (s primijenjenom temom i paletom) ---
graf_3_stupcasti_themed <- vrsta_medija_data %>%
  # Mapiramo estetiku
  ggplot(aes(x = fct_reorder(`Vrsta medija`, Ukupna_Vrijednost, .desc = TRUE), 
             y = Ukupna_Vrijednost, 
             fill = `Vrsta medija`)) +
  
  # Stupci (širina iz naučenog primjera)
  geom_col(width = 0.8) + 
  
  # Tekstualne labele (veličina iz naučenog primjera)
  geom_text(aes(label = scales::comma(Ukupna_Vrijednost, suffix = " €", big.mark = ".", decimal.mark = ",")), 
            vjust = -0.5, 
            color = "black", 
            size = 4) + 
  
  # Prilagođavamo Y-os da stane tekst (slično expand_limits)
  scale_y_continuous(labels = label_comma(suffix = " €", big.mark = ".", decimal.mark = ","),
                     expand = expansion(mult = c(0, 0.15))) +
  
  # --- PRIMJENA NAUČENE PALETE ---
  scale_fill_manual(values = topic_palette) +
  
  # Labele
  labs(
    title = "Ukupna medijska vrijednost (€) po vrsti platforme",
    subtitle = "",
    x = "Vrsta platforme",
    y = "Ukupna vrijednost (€)"
  ) +
  
  # --- PRIMJENA NAUČENE TEME ---
  theme_minimal(base_size = 14) +
  theme(
    legend.position = "none",                # Uklanja legendu (kako je traženo)
    panel.grid.major.x = element_blank(),    # Uklanja vertikalne linije
    panel.grid.minor.y = element_blank()     # Uklanja sitne horizontalne linije
  )

graf_3_stupcasti_themed
```


#### Top mediji

```{r}
topic_palette <- c(
  "#003366",  # Dark Blue
  "#5B9BD5",  # Medium Blue
  "#C00000",  # Accent Red
  "#BF8F00",  # Accent Gold
  "#005F56",  # Dark Green
  "#A0522D",  # Muted Sienna
  "#7F7F7F",  # Medium Grey
  "#8A798C"   # Muted Mauve
)

# --- 2. Priprema podataka (iz vašeg koda) ---
# Pretpostavka: df_clean već postoji i obrađen je
top_mediji_po_vrsti <- df_clean %>%
  filter(!is.na(`Vrsta medija`) & !is.na(Medij)) %>%
  group_by(`Vrsta medija`, Medij) %>%
  summarise(Ukupna_Vrijednost = sum(Vrijednost_EUR, na.rm = TRUE), .groups = "drop") %>%
  group_by(`Vrsta medija`) %>%
  slice_max(order_by = Ukupna_Vrijednost, n = 10) %>%
  ungroup() %>%
  mutate(
    Medij_reordered = reorder_within(Medij, Ukupna_Vrijednost, `Vrsta medija`)
  )

# --- 3. Crtanje Facet Grafikona (s primijenjenom temom) ---
graf_top_mediji_faceted_themed <- top_mediji_po_vrsti %>%
  ggplot(aes(x = Ukupna_Vrijednost, y = Medij_reordered, fill = `Vrsta medija`)) +
  
  # Stupci (širina iz naučenog stila)
  geom_col(width = 0.8) +
  
  # Tekstualne labele (iz naučenog stila)
  geom_text(
    aes(label = scales::comma(Ukupna_Vrijednost, suffix = " €", big.mark = ".", decimal.mark = ",")),
    hjust = -0.05, 
    size = 3.5, # Malo manja veličina zbog faceta
    color = "black"
  ) +
  
  # Čišćenje Y-osi
  scale_y_reordered() +
  
  # Formatiranje X-osi (s prostorom za labele)
  scale_x_continuous(
    labels = label_comma(suffix = " €", big.mark = ".", decimal.mark = ","),
    expand = expansion(mult = c(0, 0.25)) # Proširujemo os da stane tekst
  ) +
  
  # --- PRIMJENA NAUČENE PALETE ---
  scale_fill_manual(values = topic_palette) +
  
  # Facete (iz vašeg koda)
  facet_wrap(~ `Vrsta medija`, scales = "free") +
  
  # Labele (iz vašeg koda)
  labs(
    title = "Top 10 medija po ukupnoj vrijednosti (€)",
    subtitle = "",
    x = "Ukupna vrijednost (€)",
    y = "Medij"
  ) +
  
  # --- PRIMJENA NAUČENE TEME ---
  theme_minimal(base_size = 14) + # Osnovna veličina iz naučenog stila
  theme(
    legend.position = "none",                # Uklanja legendu
    panel.grid.major.y = element_blank(),    # Uklanja horizontalne linije
    panel.grid.minor.y = element_blank(),
    panel.grid.major.x = element_line(color = "grey90"), # Ostavljamo suptilne vertikalne
    strip.text = element_text(face = "bold", size = 12) # Ističemo naslove faceta
  )

graf_top_mediji_faceted_themed
```

#### Top autori

```{r}
top_autori_data <- df_clean %>%
  filter(!is.na(Autor)) %>%
  group_by(Autor) %>%
  summarise(
    Ukupna_Vrijednost = sum(Vrijednost_EUR, na.rm = TRUE)
  ) %>%
  slice_max(order_by = Ukupna_Vrijednost, n = 15) %>%
  ungroup()

# --- 2. Crtanje grafikona (s jednom bojom) ---
# Ovdje NE mapiramo 'fill' u aes(), nego ga postavljamo statički u geom_col()
graf_top_autori_single_color <- top_autori_data %>%
  ggplot(aes(x = Ukupna_Vrijednost, 
             y = fct_reorder(Autor, Ukupna_Vrijednost))) +
  
  # --- IZMJENA: 'fill' je postavljen na statičnu boju iz vaše palete ---
  geom_col(fill = "#005F56", width = 0.8) + # Tamno zelena
  
  geom_text(
    aes(label = scales::comma(Ukupna_Vrijednost, suffix = " €", big.mark = ".", decimal.mark = ",")),
    hjust = -0.05, 
    size = 4,
    color = "black"
  ) +
  
  scale_x_continuous(
    labels = label_comma(suffix = " €", big.mark = ".", decimal.mark = ","),
    expand = expansion(mult = c(0, 0.25)) 
  ) +
  
  labs(
    title = "Top 15 autora po ukupnoj vrijednosti (€)",
    subtitle = "",
    x = "Ukupna vrijednost (€)",
    y = "Autor"
  ) +
  
  # --- Primjena naučenog stila teme ---
  theme_minimal(base_size = 14) +
  theme(
    legend.position = "none", # Legenda nije ni potrebna
    panel.grid.major.y = element_blank(),
    panel.grid.minor.x = element_blank()
  )
graf_top_autori_single_color
```

#### Top autori II


```{r}


sentiment_palette <- c(
  "Negativna" = "#C00000",  # Accent Red
  "Pozitivna" = "#005F56",  # Dark Green
  "Neutralna" = "#7F7F7F"   # Medium Grey
)
top_15_autori_lista <- df_clean %>%
  filter(!is.na(Autor) & !is.na(`Događajna orijentacija`)) %>%
  group_by(Autor) %>%
  summarise(Ukupna_Vrijednost_Total = sum(Vrijednost_EUR, na.rm = TRUE)) %>%
  slice_max(order_by = Ukupna_Vrijednost_Total, n = 15) %>%
  pull(Autor) # Izvuci samo imena

# Sada pripremamo podatke za grafikon, grupirane po autoru I sentimentu
autori_po_sentimentu_data <- df_clean %>%
  filter(!is.na(Autor) & !is.na(`Događajna orijentacija`) & `Događajna orijentacija` != "") %>%
  # Filtriramo samo one autore koji su u naših Top 15
  filter(Autor %in% top_15_autori_lista) %>%
  
  # Grupiramo po autoru I sentimentu
  group_by(Autor, `Događajna orijentacija`) %>%
  summarise(Ukupna_Vrijednost = sum(Vrijednost_EUR, na.rm = TRUE), .groups = "drop")

# --- 2b. Crtanje grafikona za Autore ---
graf_autori_po_sentimentu <- autori_po_sentimentu_data %>%
  ggplot(aes(
    # Sortiramo Y-os po ukupnoj vrijednosti
    y = fct_reorder(Autor, Ukupna_Vrijednost, .fun = sum, .desc = FALSE), 
    x = Ukupna_Vrijednost, 
    fill = `Događajna orijentacija`
  )) +
  
  geom_col(width = 0.8) +
  
  # Primjenjujemo našu definiranu paletu za sentiment
  scale_fill_manual(values = sentiment_palette) +
  
  scale_x_continuous(
    labels = label_comma(suffix = " €", big.mark = ".", decimal.mark = ","),
    expand = expansion(mult = c(0, 0.05)) # Malo prostora na desno
  ) +
  
  labs(
    title = "Vrijednost Top 15 autora po sentimentu",
    subtitle = "",
    x = "Ukupna vrijednost (€)",
    y = "Autor",
    fill = "Sentiment:"
  )

graf_autori_po_sentimentu
```

#### Top teme

```{r}
sentiment_palette <- c(
  "Negativna" = "#C00000",  # Accent Red
  "Pozitivna" = "#005F56",  # Dark Green
  "Neutralna" = "#7F7F7F"   # Medium Grey
)

# --- 1. Priprema podataka s kraćim nazivima ---
top_teme_data <- df_clean %>%
  filter(!is.na(Tema) & Tema != "") %>%
  group_by(Tema) %>%
  summarise(Ukupna_Vrijednost = sum(Vrijednost_EUR, na.rm = TRUE), .groups = "drop") %>%
  slice_max(order_by = Ukupna_Vrijednost, n = 15) %>%
  
  # --- OVDJE JE IZMJENA ---
  # Kreiramo novu varijablu 'Kratka_Tema'
  mutate(
    # Brojimo riječi (bilo koji niz znakova koji nije razmak)
    broj_rijeci = str_count(Tema, "\\S+"), 
    
    # Ako ima više od 4 riječi, skrati i dodaj "..."
    # inače, ostavi kako je. Funkcija word() uzima prvih 'n' riječi.
    Kratka_Tema = ifelse(broj_rijeci > 4,
                         paste(word(Tema, 1, 4, sep = " "), "..."),
                         Tema)
  )

# --- 2. Crtanje grafikona (s novom varijablom) ---
graf_top_teme_kratko <- top_teme_data %>%
  # Koristimo 'Kratka_Tema' za Y os, ali je sortiramo po 'Ukupna_Vrijednost'
  ggplot(aes(x = Ukupna_Vrijednost, y = fct_reorder(Kratka_Tema, Ukupna_Vrijednost))) +
  
  geom_col(fill = "#C00000") +
  
  # Dodajemo tekstualnu labelu s punom vrijednosti
  geom_text(
    aes(label = scales::comma(Ukupna_Vrijednost, suffix = " €", big.mark = ".", decimal.mark = ",")),
    hjust = -0.05,
    size = 3.5,
    color = "black"
  ) +
  
  scale_x_continuous(
    labels = label_comma(suffix = " €", big.mark = ".", decimal.mark = ","),
    # Proširujemo os (za 25%) da stane tekst
    expand = expansion(mult = c(0, 0.25)) 
  ) +
  
  labs(
    title = "Top 15 tema po ukupnoj  vrijednosti (€)",
    subtitle = "", # Ažuriran podnaslov
    x = "Ukupna vrijednost (€)",
    y = "Tema"
  ) +
  
  # Koristimo temu iz prethodnih primjera
  theme_minimal() +
  theme(
    panel.grid.major.y = element_blank(),
    panel.grid.minor.x = element_blank()
  )

graf_top_teme_kratko

```

#### Top teme II


```{r}
sentiment_palette <- c(
  "Negativna" = "#C00000",  # Accent Red
  "Pozitivna" = "#005F56",  # Dark Green
  "Neutralna" = "#7F7F7F"   # Medium Grey
)

# --- 2. Postavljanje naučene TEME za grafikone ---
theme_set(
  theme_minimal(base_size = 14) +
  theme(
    legend.position = "bottom",               # Legenda je ovdje važna
    panel.grid.major.y = element_blank(),     # Uklanja horizontalne linije
    panel.grid.minor.y = element_blank(),
    panel.grid.major.x = element_line(color = "grey90"), # Ostavlja suptilne vertikalne
    plot.title = element_text(face = "bold", size = 16)
  )
)

# ===================================================================
#   GRAFIKON 1: TOP 15 TEMA PO VRIJEDNOSTI I SENTIMENTU
# ===================================================================

# --- 1a. Priprema podataka za Teme ---

# Prvo, pronalazimo Top 15 tema po UKUPNOJ vrijednosti
top_15_teme_lista <- df_clean %>%
  filter(!is.na(Tema) & Tema != "" & !is.na(`Događajna orijentacija`)) %>%
  # Kreiramo skraćene nazive tema (max 4 riječi)
  mutate(
    Kratka_Tema = ifelse(str_count(Tema, "\\S+") > 4,
                         paste(word(Tema, 1, 4, sep = " "), "..."),
                         Tema)
  ) %>%
  group_by(Kratka_Tema) %>%
  summarise(Ukupna_Vrijednost_Total = sum(Vrijednost_EUR, na.rm = TRUE)) %>%
  slice_max(order_by = Ukupna_Vrijednost_Total, n = 15) %>%
  pull(Kratka_Tema) # Izvuci samo imena

# Sada pripremamo podatke za grafikon, grupirane po temi I sentimentu
teme_po_sentimentu_data <- df_clean %>%
  filter(!is.na(`Događajna orijentacija`) & `Događajna orijentacija` != "") %>%
  # Kreiramo skraćene nazive tema
  mutate(
    Kratka_Tema = ifelse(str_count(Tema, "\\S+") > 4,
                         paste(word(Tema, 1, 4, sep = " "), "..."),
                         Tema)
  ) %>%
  # Filtriramo samo one teme koje su u naših Top 15
  filter(Kratka_Tema %in% top_15_teme_lista) %>%
  
  # Grupiramo po temi I sentimentu
  group_by(Kratka_Tema, `Događajna orijentacija`) %>%
  summarise(Ukupna_Vrijednost = sum(Vrijednost_EUR, na.rm = TRUE), .groups = "drop")

# --- 1b. Crtanje grafikona za Teme ---
graf_teme_po_sentimentu <- teme_po_sentimentu_data %>%
  ggplot(aes(
    # Sortiramo Y-os po ukupnoj vrijednosti (zbrajamo sve sentimente za taj red)
    y = fct_reorder(Kratka_Tema, Ukupna_Vrijednost, .fun = sum, .desc = FALSE), 
    x = Ukupna_Vrijednost, 
    fill = `Događajna orijentacija`
  )) +
  
  # Koristimo geom_col() za stacked bar chart
  geom_col(width = 0.8) + 
  
  # Primjenjujemo našu definiranu paletu za sentiment
  scale_fill_manual(values = sentiment_palette) +
  
  scale_x_continuous(
    labels = label_comma(suffix = " €", big.mark = ".", decimal.mark = ","),
    expand = expansion(mult = c(0, 0.05)) # Malo prostora na desno
  ) +
  
  labs(
    title = "Vrijednost Top 15 tema",
    subtitle = "",
    x = "Ukupna vrijednost (€)",
    y = "Tema",
    fill = "Sentiment:"
  )

graf_teme_po_sentimentu
```

:::

---


## Potrebni resursi

Projekt mora biti agilan i visoko kolaborativan.

#### Tim
-   1-2 podatkovna znanstvenika / ekonomista.
-   Kontakt točka iz odjela za istraživanje HNB-a.

#### Tehnologija
-   Standardni računalni resursi.
-   Nije potreban specijalizirani hardver za pilot fazu.

#### Podatci
-   Cijeli medijski prostor.
-   Povijesni medijski podatci o HNB.


---

## Umjesto zaključka./ Pitanja?
<br>
**Analiza:**

-   [Repozitorij](https://github.com/lusiki/HNB-Media-Map)
-   [Mapa medijskog ekosustava](https://raw.githack.com/lusiki/HNB-Media-Map/main/Mapa.html)
-   [Anatomija diskursa](https://raw.githack.com/lusiki/HNB-Media-Map/main/Teme.html)
-   [Atmosfera diskursa](https://raw.githack.com/lusiki/HNB-Media-Map/main/Diskurs.html)
-   [Digitalni odjeci](https://raw.githack.com/lusiki/HNB-Media-Map/main/Doga%C4%91aji.html)
-   [HNB osobe](https://raw.githack.com/lusiki/HNB-Media-Map/main/Imena.html)(*u razvoju*)
-   [Teme](https://raw.githack.com/lusiki/HNB-Media-Map/main/Teme2.html)(*u razvoju*)
<br><br>
**Kontakt:**
<br>
-   [Luka Šikić](https://www.unicath.hr/odjeli-i-fakultet/nastavnici/luka-sikic)
<br>
-   [linkedin](https://www.linkedin.com/in/luka-sikic-662ba869/)
<br>
-   luka.sikic@unicath.hr

