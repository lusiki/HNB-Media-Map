# Adjusted ggplot code for the reach plot
plot_reach <- platform_summary %>%
# ADDED: Clean data to ensure it matches the color map names
mutate(SOURCE_TYPE = tolower(trimws(SOURCE_TYPE))) %>%
arrange(year, total_reach) %>%
mutate(
SOURCE_TYPE_ordered = factor(SOURCE_TYPE, levels = unique(SOURCE_TYPE))
) %>%
# CORRECTED: Use the same ordered variable for both y and fill
ggplot(aes(x = total_reach, y = SOURCE_TYPE_ordered, fill = SOURCE_TYPE_ordered)) +
geom_col() +
geom_text(
aes(label = comma(total_reach, accuracy = 1)),
hjust = -0.1, size = 3, color = "black"
) +
facet_wrap(~year, scales = "free_y") +
scale_x_continuous(
labels = label_number(suffix = " M", scale = 1e-6)
) +
# CORRECTED: Use the correct color map variable
scale_fill_manual(values = platform_color_mapping) +
theme_minimal(base_size = 14) +
theme(
legend.position    = "none",
strip.text         = element_text(face = "bold", size = 16),
panel.grid.major.y = element_blank(),
axis.text.x        = element_text(angle = 45, hjust = 1)
) +
labs(
title    = "Ukupan doseg po platformama (2021–2023)",
x        = "Doseg (u milijunima)",
y        = NULL, # Changed for a cleaner look
caption  = "Napomena: Stupci su sortirani po dosegu."
)
print(plot_reach)
plot_share_posts <- proportions_summary %>%
mutate(SOURCE_TYPE = tolower(trimws(SOURCE_TYPE))) %>%
ggplot(aes(x = year, y = post_share, fill = SOURCE_TYPE)) +
geom_col(position = "fill") +
scale_y_continuous(labels = percent_format()) +
scale_x_continuous(breaks = c(2021, 2022, 2023)) +
scale_fill_manual(values = platform_color_mapping) +
theme_minimal(base_size = 14) +
labs(title = "Udio objava", x = "Godina", y = "Postotak", fill = "Platforma") +
# --- ADDED: Move the legend to the right ---
theme(legend.position = "right")
plot_share_interactions <- proportions_summary %>%
filter(total_interactions > 0) %>%
mutate(SOURCE_TYPE = tolower(trimws(SOURCE_TYPE))) %>%
ggplot(aes(x = year, y = interaction_share, fill = SOURCE_TYPE)) +
geom_col(position = "fill") +
scale_y_continuous(labels = percent_format()) +
scale_x_continuous(breaks = c(2021, 2022, 2023)) +
scale_fill_manual(values = platform_color_mapping, guide = "none") +
theme_minimal(base_size = 14) +
labs(title = "Udio interakcija", x = "Godina", y = "Postotak")
plot_share_reach <- proportions_summary %>%
filter(total_reach > 0) %>%
mutate(SOURCE_TYPE = tolower(trimws(SOURCE_TYPE))) %>%
ggplot(aes(x = year, y = reach_share, fill = SOURCE_TYPE)) +
geom_col(position = "fill") +
scale_y_continuous(labels = percent_format()) +
scale_x_continuous(breaks = c(2021, 2022, 2023)) +
scale_fill_manual(values = platform_color_mapping, guide = "none") +
theme_minimal(base_size = 14) +
labs(title = "Udio dosega", x = "Godina", y = "Postotak")
# --- Combine the plots ---
plot_combined_share <- (plot_share_posts + plot_share_interactions + plot_share_reach) +
plot_layout(guides = 'collect') & # Using '&' applies theme to all plots
theme(legend.position = "right") # This is a more robust way with patchwork
plot_combined_share <- plot_combined_share +
plot_annotation(
title    = "Struktura digitalnog ekosustava (2021–2023)",
subtitle = "Usporedba udjela platformi u ukupnom broju objava, interakcija i dosega.",
caption  = "Web generira najviše sadržaja, ali YouTube i Facebook preuzimaju sve veći dio 'kolača' utjecaja."
)
print(plot_combined_share)
create_top_source_plot <- function(data, platform_name, platform_color) {
data <- data %>% arrange(total_interactions) %>% mutate(FROM = factor(FROM, levels = FROM))
ggplot(data, aes(x = FROM, y = total_interactions)) +
geom_segment(aes(x = FROM, xend = FROM, y = 0, yend = total_interactions), color = "grey", linewidth = 0.5) +
geom_point(aes(size = total_posts), color = platform_color, alpha = 0.8) +
coord_flip() +
scale_y_continuous(labels = label_number(suffix = " K", scale = 1e-3)) +
scale_size_continuous(range = c(2, 10), name = "Broj objava") +
theme_light(base_size = 12) +
theme(
panel.grid.major.y = element_blank(), panel.border = element_blank(),
axis.ticks.y = element_blank(), legend.position = "bottom",
axis.text.x = element_text(angle = 45, hjust = 1)
) +
labs(title = platform_name, x = "", y = "Ukupne interakcije (u tisućama)")
}
plot_web <- create_top_source_plot(top_web_sources, "Web portali", "#003366")
plot_youtube <- create_top_source_plot(top_youtube_sources, "YouTube kanali", "#7F7F7F")
plot_facebook <- create_top_source_plot(top_facebook_sources, "Facebook stranice", "#5B9BD5")
final_dashboard <- plot_web + plot_youtube + plot_facebook +
plot_annotation(
title = "Top 20 profila u digitalnom medijskom prostoru o HNB-u (2021-2023)",
subtitle = "Rangirano prema ukupnim interakcijama. Veličina točke predstavlja ukupan broj objava.",
caption = "Izvor: Analiza projekta 'Prikaz i analiza prisutnosti HNB-a u digitalnom medijskom prostoru'",
theme = theme(plot.title = element_text(size = 20, face = "bold"))
)
print(final_dashboard)
create_actor_map_plot <- function(data, platform_name, platform_color) {
if(nrow(data) < 2) { return(ggplot() + labs(title = paste("Nema dovoljno podataka za", platform_name)) + theme_void()) }
median_interactions <- median(data$total_interactions, na.rm = TRUE)
median_reach <- median(data$total_reach, na.rm = TRUE)
ggplot(data, aes(x = total_interactions, y = total_reach)) +
geom_vline(xintercept = median_interactions, linetype = "dashed", color = "grey70") +
geom_hline(yintercept = median_reach, linetype = "dashed", color = "grey70") +
geom_point(aes(size = total_posts), color = platform_color, alpha = 0.7) +
geom_text_repel(aes(label = FROM), size = 3, max.overlaps = 15) +
scale_x_log10(labels = label_number(big.mark = ".", suffix = " K", scale = 1e-3)) +
scale_y_log10(labels = label_number(big.mark = ".", suffix = " M", scale = 1e-6)) +
scale_size_continuous(range = c(2, 12), name = "Broj objava") +
theme_minimal(base_size = 12) +
theme(legend.position = "bottom") +
labs(
title = platform_name, x = "Ukupne interakcije (Log)", y = "Ukupan doseg (Log)"
)
}
plot_map_web <- create_actor_map_plot(web_actors, "Web Portali", "#003366")
plot_map_youtube <- create_actor_map_plot(youtube_actors, "YouTube Kanali", "#7F7F7F")
plot_map_facebook <- create_actor_map_plot(facebook_actors, "Facebook Stranice", "#5B9BD5")
final_map_dashboard <- plot_map_web + plot_map_youtube + plot_map_facebook +
plot_annotation(
title = "Mapa utjecaja najvažnijih profila u raspravama o HNB-u (2021-2023)",
subtitle = "Usporedba dosega i angažmana. Veličina točke predstavlja produktivnost (broj objava).",
caption = "Izvor: Analiza projekta 'Prikaz i analiza prisutnosti HNB-a u digitalnom medijskom prostoru' | Osi su na logaritamskoj skali.",
theme = theme(plot.title = element_text(size = 20, face = "bold"))
) & theme(plot.background = element_rect(fill = "white", color = NA))
print(final_map_dashboard)
create_actor_map_plot <- function(data, platform_name, platform_color) {
if(nrow(data) < 2) { return(ggplot() + labs(title = paste("Nema dovoljno podataka za", platform_name)) + theme_void()) }
median_interactions <- median(data$total_interactions, na.rm = TRUE)
median_reach <- median(data$total_reach, na.rm = TRUE)
ggplot(data, aes(x = total_interactions, y = total_reach)) +
geom_vline(xintercept = median_interactions, linetype = "dashed", color = "grey70") +
geom_hline(yintercept = median_reach, linetype = "dashed", color = "grey70") +
geom_point(aes(size = total_posts), color = platform_color, alpha = 0.7) +
geom_text_repel(aes(label = FROM), size = 3, max.overlaps = 15) +
scale_x_log10(labels = label_number(big.mark = ".", suffix = " K", scale = 1e-3)) +
scale_y_log10(labels = label_number(big.mark = ".", suffix = " M", scale = 1e-6)) +
scale_size_continuous(range = c(2, 12), name = "Broj objava") +
theme_minimal(base_size = 12) +
theme(legend.position = "bottom") +
labs(
title = platform_name, x = "Ukupne interakcije (Log)", y = "Ukupan doseg (Log)"
)
}
plot_map_web <- create_actor_map_plot(web_actors, "Web Portali", "#003366")
plot_map_youtube <- create_actor_map_plot(youtube_actors, "YouTube Kanali", "#7F7F7F")
plot_map_facebook <- create_actor_map_plot(facebook_actors, "Facebook Stranice", "#5B9BD5")
final_map_dashboard <- plot_map_web + plot_map_youtube + plot_map_facebook +
plot_annotation(
title = "Mapa utjecaja najvažnijih profila u raspravama o HNB-u (2021-2023)",
subtitle = "Usporedba dosega i angažmana. Veličina točke predstavlja produktivnost (broj objava).",
caption = "Izvor: Analiza projekta 'Prikaz i analiza prisutnosti HNB-a u digitalnom medijskom prostoru' | Osi su na logaritamskoj skali.",
theme = theme(plot.title = element_text(size = 20, face = "bold"))
) & theme(plot.background = element_rect(fill = "white", color = NA))
print(final_map_dashboard)
sentiment_counts_gold <- nlp_results_df %>%
inner_join(crosentilex_gold_prepared, by = c("lemma" = "word")) %>%
# Filtriramo neutralne riječi jer nam ne trebaju za ovu formulu
filter(sentiment_value != 0) %>%
# Brojimo koliko je pozitivnih (1) i negativnih (-1) riječi
count(doc_id, sentiment_value) %>%
# Pretvaramo u široki format da imamo stupce za 'pozitivne' i 'negativne'
pivot_wider(names_from = sentiment_value, values_from = n, values_fill = 0)
# --- DEFENZIVNI BLOK KODA ---
# Provjeravamo postoji li stupac '1' (pozitivni). Ako ne, dodajemo ga s nulama.
if (!"1" %in% names(sentiment_counts_gold)) {
sentiment_counts_gold <- sentiment_counts_gold %>% mutate(`1` = 0) }
# Provjeravamo postoji li stupac '-1' (negativni). Ako ne, dodajemo ga s nulama.
if (!"-1" %in% names(sentiment_counts_gold)) {
sentiment_counts_gold <- sentiment_counts_gold %>% mutate(`-1` = 0) }
# --- KRAJ DEFENZIVNOG BLOKA ---
# Sada sigurno preimenujemo stupce jer znamo da postoje
sentiment_counts_gold <- sentiment_counts_gold %>%
rename(
positive_words = `1`,
negative_words = `-1` )
epsilon <- 1e-6
document_sentiments_gold <- sentiment_counts_gold %>%
mutate(
sentiment_score_gold = (positive_words - negative_words) / (positive_words + negative_words + epsilon)
) %>%
select(doc_id, sentiment_score_gold)
# Sloj 2: Dominantni Psihološki Proces (NRC)
document_emotions <- nlp_results_df %>%
inner_join(nrc_lexicon_long, by = c("lemma" = "word")) %>%
count(doc_id, emotion) %>%
group_by(doc_id) %>%
slice_max(order_by = n, n = 1, with_ties = FALSE) %>%
ungroup() %>%
select(doc_id, dominant_emotion = emotion)
# Spajanje svega u jedan dataframe
dta_atmosphere <- dta_enriched %>%
left_join(document_sentiments_gold, by = "doc_id") %>%
left_join(document_emotions, by = "doc_id") %>%
mutate(
sentiment_score = ifelse(is.na(sentiment_score_gold), 0, sentiment_score_gold),
dominant_emotion = ifelse(is.na(dominant_emotion), "Neutralno", dominant_emotion)
)
# Priprema podataka za vizualizaciju
heatmap_data <- dta_atmosphere %>%
filter(dominant_topic != "Nema Teme") %>%
group_by(dominant_topic, dominant_emotion) %>%
summarise(avg_sentiment = mean(sentiment_score),
n_articles = n()) %>%
ungroup() %>%
# Prikazujemo samo emocije s dovoljno članaka za analizu
filter(n_articles > 3)
ggplot(heatmap_data, aes(x = dominant_emotion, y = dominant_topic, fill = avg_sentiment)) +
geom_tile(color = "white", linewidth = 0.5) +
geom_text(aes(label = round(avg_sentiment, 2)), size = 3, color = "black") +
scale_fill_gradient2(low = "firebrick", mid = "white", high = "steelblue", midpoint = 0, name = "Prosj. Sentiment") +
theme_minimal(base_size = 12) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(
title = "Matrica atmosfere: Kako psihološki okvir utječe na tonalitet teme",
subtitle = "Boja ćelije predstavlja prosječni sentiment (CroSentilex) unutar svake kombinacije teme i dominantne emocije (NRC)",
x = "Dominantni psihološki proces (NRC)",
y = "Dominantna tema"
)
lemmatized_words_with_freq <- nlp_results_df %>%
count(doc_id, lemma, name = "word_frequency")
# --- 3.2: Izračun Sentiment Score-a (CroSentilex-Gold) ---
sentiment_counts_gold <- lemmatized_words_with_freq %>%
inner_join(crosentilex_gold_prepared, by = c("lemma" = "word")) %>%
filter(sentiment_value != 0) %>%
count(doc_id, sentiment_value) %>%
pivot_wider(names_from = sentiment_value, values_from = n, values_fill = 0)
if (!"1" %in% names(sentiment_counts_gold)) { sentiment_counts_gold <- sentiment_counts_gold %>% mutate(`1` = 0) }
if (!"-1" %in% names(sentiment_counts_gold)) { sentiment_counts_gold <- sentiment_counts_gold %>% mutate(`-1` = 0) }
document_sentiments_gold <- sentiment_counts_gold %>%
rename(positive_words = `1`, negative_words = `-1`) %>%
mutate(sentiment_score_gold = (positive_words - negative_words) / (positive_words + negative_words + 1e-6)) %>%
select(doc_id, sentiment_score_gold)
# --- 3.3: Izračun Dominantne Emocije (NRC) ---
document_emotions <- lemmatized_words_with_freq %>%
inner_join(nrc_lexicon_long, by = c("lemma" = "word")) %>%
group_by(doc_id, emotion) %>%
summarise(total_freq = sum(word_frequency), .groups="drop") %>%
group_by(doc_id) %>%
slice_max(order_by = total_freq, n = 1, with_ties = FALSE) %>%
ungroup() %>%
select(doc_id, dominant_emotion = emotion)
# --- 3.4: Izračun Indeksa Konflikta (CLI i RCI) za financijske teme ---
conflict_lexicon <- unique(c(
(nrc_lexicon_long %>% filter(emotion %in% c("Ljutnja", "Gađenje", "Strah")) %>% pull(word)),
(crosentilex_full %>% filter(sentiment_value <= -0.75) %>% pull(word)),
c("kriza", "kolaps", "neuspjeh", "pogreška", "kritika", "neodgovorno", "rizično", "zabrinjavajuće", "nestabilno", "problematično", "kontroverzno", "sporno", "sumnjivo", "loš", "katastrofal", "kaotičan", "recesija", "inflacija", "deflacija", "bankrot")
))
cli_scores <- lemmatized_words_with_freq %>%
mutate(is_conflict = lemma %in% conflict_lexicon) %>%
group_by(doc_id) %>%
summarise(
total_words = sum(word_frequency),
conflict_words = sum(word_frequency[is_conflict])
) %>%
mutate(cli = (conflict_words / total_words) * 1000) %>% ungroup()
dta_temp <- dta_enriched %>%
left_join(document_sentiments_gold, by = "doc_id") %>%
left_join(document_emotions, by = "doc_id") %>%
left_join(cli_scores %>% select(doc_id, cli), by = "doc_id") %>%
mutate(
sentiment_score = ifelse(is.na(sentiment_score_gold), 0, sentiment_score_gold),
dominant_emotion = ifelse(is.na(dominant_emotion), "Neutralno", dominant_emotion),
cli = ifelse(is.na(cli), 0, cli)
)
avg_cli_media <- dta_temp %>% group_by(FROM) %>% summarise(avg_cli_media = mean(cli))
avg_cli_topic <- dta_temp %>% group_by(dominant_topic) %>% summarise(avg_cli_topic = mean(cli))
dta_final <- dta_temp %>%
left_join(avg_cli_media, by = "FROM") %>%
left_join(avg_cli_topic, by = "dominant_topic") %>%
mutate(
expected_cli = 0.5 * avg_cli_media + 0.5 * avg_cli_topic,
rci = cli - expected_cli
)
# --- KOD ZA DETEKCIJU ANOMALIJA (POBOLJŠANA VERZIJA) ---
daily_summary <- dta_final %>%
mutate(date = as.Date(DATE)) %>%
group_by(date) %>%
summarise(
n_articles = n(),
avg_cli = mean(cli, na.rm = TRUE)
) %>%
ungroup()
# Računamo pragove (99-i percentil)
volume_threshold <- quantile(daily_summary$n_articles, 0.99)
cli_threshold <- quantile(daily_summary$avg_cli, 0.99)
# Identificiramo "potrese"
spikes_detected <- daily_summary %>%
mutate(
is_volume_spike = n_articles > volume_threshold,
is_cli_spike = avg_cli > cli_threshold
)
# Vizualizacija
p_volume <- ggplot(spikes_detected, aes(x = date, y = n_articles)) +
geom_line(color = "grey") +
geom_point(data = filter(spikes_detected, is_volume_spike), color = "red", size = 3) +
geom_hline(yintercept = volume_threshold, linetype="dashed", color="red") +
theme_minimal() +
labs(title = "Ekstremni volumen objava", y = "Broj članaka dnevno", x = "")
p_cli <- ggplot(spikes_detected, aes(x = date, y = avg_cli)) +
geom_line(color = "grey") +
geom_point(data = filter(spikes_detected, is_cli_spike), color = "red", size = 3) +
geom_hline(yintercept = cli_threshold, linetype="dashed", color="red") +
theme_minimal() +
labs(title = "Ekstremni intenzitet konflikta", y = "Prosječni CLI dnevno", x = "Datum")
#p_volume / p_cli
# --- KOD ZA STANDARDIZIRANU DETEKCIJU ANOMALIJA ---
# Agregiramo podatke po danu
daily_summary <- dta_final %>%
mutate(date = as.Date(DATE),
year = year(date)) %>% # Dodajemo godinu za godišnju standardizaciju
group_by(date, year) %>%
summarise(
n_articles = n(),
avg_cli = mean(cli, na.rm = TRUE),
.groups = "drop"
)
# Standardiziramo vrijednosti (računamo Z-score) unutar svake godine
standardized_summary <- daily_summary %>%
group_by(year) %>%
mutate(
# Z-score = (vrijednost - prosjek) / standardna devijacija
z_score_volume = (n_articles - mean(n_articles)) / sd(n_articles),
z_score_cli = (avg_cli - mean(avg_cli)) / sd(avg_cli)
) %>%
ungroup()
# Definiramo prag za "šiljak" (npr. 3 standardne devijacije)
spike_threshold_z <- 3
# Identificiramo "potrese"
spikes_detected_z <- standardized_summary %>%
mutate(
is_volume_spike = z_score_volume > spike_threshold_z,
is_cli_spike = z_score_cli > spike_threshold_z
)
# --- ISPIS DATUMA S ANOMALIJAMA ---
volume_spike_dates <- spikes_detected_z %>%
filter(is_volume_spike) %>%
select(date, n_articles, z_score_volume) %>%
arrange(desc(z_score_volume))
cli_spike_dates <- spikes_detected_z %>%
filter(is_cli_spike) %>%
select(date, avg_cli, z_score_cli) %>%
arrange(desc(z_score_cli))
# # (Ovaj dio ispod će ispisati tablice direktno u vaš HTML dokument)
# cat("### Dani s Ekstremnim Volumom Objava\n\n")
# knitr::kable(volume_spike_dates, caption = "Top datumi rangirani po Z-scoreu volumena.")
#
# cat("\n### Dani s Ekstremnim Intenzitetom Konflikta\n\n")
# knitr::kable(cli_spike_dates, caption = "Top datumi rangirani po Z-scoreu konflikta.")
# --- VIZUALIZACIJA STANDARDIZIRANIH VRIJEDNOSTI ---
p_volume_z <- ggplot(spikes_detected_z, aes(x = date, y = z_score_volume)) +
geom_line(color = "grey") +
geom_point(data = filter(spikes_detected_z, is_volume_spike), color = "red", size = 3) +
geom_hline(yintercept = spike_threshold_z, linetype = "dashed", color = "red") +
theme_minimal() +
labs(
title = "Anomalije u volumenu objava (Standardizirano)",
y = "Odstupanje od prosjeka (u st. dev.)",
x = ""
)
p_cli_z <- ggplot(spikes_detected_z, aes(x = date, y = z_score_cli)) +
geom_line(color = "grey") +
geom_point(data = filter(spikes_detected_z, is_cli_spike), color = "red", size = 3) +
geom_hline(yintercept = spike_threshold_z, linetype = "dashed", color = "red") +
theme_minimal() +
labs(
title = "Anomalije u intenzitetu konflikta (Standardizirano)",
y = "Odstupanje od prosjeka (u st. dev.)",
x = "Datum"
)
p_volume_z
p_cli_z
dbDisconnect(con)
# Load necessary packages for the presentation
library(scales)#
#library(patchwork)
library(ggrepel)
library(udpipe)
library(dplyr)
library(tidytext)
library(stringr)
library(ggplot2)
library(forcats)
library(tidyr)
library(ggridges)
library(widyr)
library(ggraph)
library(igraph)
library(wordcloud)
library(RColorBrewer)
library(tidyverse)
library(lubridate)
library(data.table)
library(readxl)
library(plotly)
library(patchwork)
# --- 0. SETUP (This should already be in your setup chunk) ---
platform_color_mapping <- c(
"web"       = "#003366",  # HNB Dark Blue
"facebook"  = "#5B9BD5",  # HNB Medium Blue
"comment"   = "#C00000",  # HNB Accent Red
"twitter"   = "#BF8F00",  # HNB Accent Gold
"forum"     = "#005F56",  # HNB Dark Green
"youtube"   = "#7F7F7F",  # HNB Medium Grey
"reddit"    = "#A0522D"
)
# theme_hnb <- theme_minimal(base_size = 14, base_family = "Roboto Mono") +
#   theme(
#     plot.title = element_text(face = "bold", size = 16, color = hnb_colors["dark_blue"]),
#     plot.subtitle = element_text(size = 12, color = hnb_colors["medium_grey"]),
#     legend.position = "top"
#   )
# theme_set(theme_hnb)
# --- 1. PREPARE THE COLOR MAPPING ---
# Create the named vector that explicitly tells ggplot which color to use for which platform.
# This is the crucial step you were missing.
# Učitavanje potrebnih paketa
required_packages <- c(
"duckdb",       # Za efikasno upravljanje podacima slično bazi podataka
"dplyr",        # Za manipulaciju podacima
"ggplot2",      # Za vizualizacije
"lubridate",    # Za rad s datumima i vremenom
"scales",       # Za formatiranje brojeva u vizualizacijama
"knitr",        # Za kable tablice
"RColorBrewer", # Za palete boja
"stringr",      # Za manipulaciju tekstom
"tidyr",        # Za pivotiranje podataka za vizualizacije
"ggrepel",      # Za izbjegavanje preklapanja teksta na grafikonima
"fmsb",
"kableExtra"
)
for (pkg in required_packages) {
# Ovdje pretpostavljamo da su svi paketi instalirani
library(pkg, character.only = TRUE)
}
# --- Povezivanje s DuckDB bazom podataka ---
# VAŽNO: Prilagodite putanju do vaše .duckdb datoteke!
duckdb_file_path <- "C:/Users/lukas/Determbaza/DetermDB/determDB.duckdb" # <--- PRILAGODITE OVO!
table_name <- "media_data"
if (!file.exists(duckdb_file_path)) {
stop("DuckDB datoteka nije pronađena na navedenoj putanji: ", duckdb_file_path,
"\nMolimo provjerite putanju ili pokrenite skriptu za učitavanje XLSX datoteka.")
}
con <- dbConnect(duckdb::duckdb(), dbdir = duckdb_file_path, read_only = FALSE)
message("Povezano s perzistentnom DuckDB bazom za analizu.")
l <- dbExecute(con, "SET memory_limit='16GB';") # Održavanje memorijskog limita
# --- Provjera statusa tablice i broja objava ---
# Ispravka za izvlačenje numeričke vrijednosti iz data.frame-a
count_result <- dbGetQuery(con, paste0("SELECT COUNT(*) FROM ", table_name, ";"))[[1]]
# --- 2. Dominacija platformi i njihove napredne performanse (Udio, Učinkovitost i Interakcijski Profil) ---
platform_overview_ultimate <- dbGetQuery(con, paste0("
SELECT
SOURCE_TYPE,
COUNT(*) AS num_posts,
SUM(INTERACTIONS) AS total_interactions,
SUM(REACH) AS total_reach,
AVG(INTERACTIONS) AS avg_interactions_per_post,
AVG(REACH) AS avg_reach_per_post,
AVG(ENGAGEMENT_RATE) AS platform_avg_engagement_rate,
AVG(VIRALITY) AS platform_avg_virality,
(SUM(SHARE_COUNT) * 1.0 / NULLIF(SUM(INTERACTIONS), 0)) * 100 AS platform_shareability_index,
(SUM(LIKE_COUNT) * 1.0 / NULLIF(SUM(INTERACTIONS), 0)) * 100 AS platform_like_ratio,
(SUM(COMMENT_COUNT) * 1.0 / NULLIF(SUM(INTERACTIONS), 0)) * 100 AS platform_comment_ratio
FROM ", table_name, "
GROUP BY SOURCE_TYPE
ORDER BY num_posts DESC;
")) %>%
mutate(across(c(platform_avg_engagement_rate, platform_avg_virality, platform_shareability_index, platform_like_ratio, platform_comment_ratio),
~ifelse(is.nan(.), 0, .))) # Handle potential NaN for display
# Vizualizacija 1: Ukupan broj objava po platformi (General Overview - Posts per Platform)
ggplot(
platform_overview_ultimate,
# Modern syntax for horizontal bars: y-axis is the category, x-axis is the value
aes(x = num_posts, y = reorder(SOURCE_TYPE, num_posts), fill = SOURCE_TYPE)
) +
# geom_col() is the modern replacement for geom_bar(stat="identity")
geom_col() +
# Add formatted text labels that match the plot's font
geom_text(
aes(label = scales::comma(num_posts, accuracy = 1)),
hjust = -0.1,
size = 3.5,
family = "Roboto Mono" # Ensures font consistency with the global theme
) +
# THE FIX: Apply your custom color mapping
scale_fill_manual(values = platform_color_mapping) +
# Format the x-axis and add space for labels
scale_x_continuous(
labels = scales::comma,
expand = expansion(mult = c(0.01, 0.15))
) +
# Remove the redundant legend
guides(fill = "none") +
# Add clearer, more professional titles
labs(
title = "Ukupan broj objava po platformi",
subtitle = "",
x = "Broj objava",
y = "Tip platforme"
) +
# Final theme tweaks for a cleaner look
theme(
panel.grid.major.y = element_blank(), # Remove horizontal grid lines for focus
panel.grid.minor.x = element_blank()
)
