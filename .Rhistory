theme(legend.position = "bottom", axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
print(p1)
str(crisis_periods)
str(performance_data)
p1 <- ggplot(performance_data, aes(x = Date, y = Cumulative_Return)) +
# --- 2. LAYER 1: SHADING (Draw this first, in the back) ---
geom_rect(
data = crisis_periods,  # Use your crisis data
aes(xmin = Start, xmax = End, ymin = -Inf, ymax = Inf),
inherit.aes = FALSE,    # CRITICAL: This is essential for it to work
fill = "gray70",        # A standard gray for shading
alpha = 0.3             # Make it 30% transparent (0.2 is often too light)
) +
# --- 3. LAYER 2: LINES (Draw these on top of the shading) ---
geom_line(
aes(color = Asset),     # We put 'color = Asset' here
linewidth = 1
) +
# --- 4. LAYER 3: SCALES AND LABELS ---
scale_y_log10() +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
# scale_color_manual to control your grayscale
# The 'values' should match your "Asset" names in order
scale_color_manual(values = c(
"60/40 Portfolio" = "gray30",
"S&P 500" = "black",
"20Y+ Treasury" = "gray60"
)) +
labs(
title = "Cumulative Performance: Stock, Bonds, and 60/40 Portfolio",
subtitle = "Log scale, normalized to $1 starting value",
x = "Date",
y = "Cumulative Return (Log Scale)",
color = "Asset Class"
) +
# --- 5. LAYER 4: THEME (Apply this last) ---
theme_bw() +
theme(
legend.position = "bottom",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)
)
# --- 6. Display the Plot ---
print(p1)
p1 <- ggplot(performance_data, aes(x = Date, y = Cumulative_Return)) +
# --- LAYER 1: SHADING ---
geom_rect(
data = crisis_periods,
# --- THIS IS THE FIX ---
# We use a small positive number (0.1) for ymin instead of -Inf
aes(xmin = Start, xmax = End, ymin = 0.1, ymax = Inf),
# ----------------------
inherit.aes = FALSE,
fill = "gray70",
alpha = 0.3
) +
# --- LAYER 2: LINES ---
geom_line(
aes(color = Asset),
linewidth = 1
) +
# --- LAYER 3: SCALES & LABELS ---
scale_y_log10() +  # This should now work
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
# Assign colors by name for safety
scale_color_manual(values = c(
"60/40 Portfolio" = "gray30",
"S&P 500" = "black",
"20Y+ Treasury" = "gray60"
)) +
labs(
title = "Cumulative Performance: Stock, Bonds, and 60/40 Portfolio",
subtitle = "Log scale, normalized to $1 starting value",
x = "Date",
y = "Cumulative Return (Log Scale)",
color = "Asset Class"
) +
# --- LAYER 4: THEME ---
theme_bw() +
theme(
legend.position = "bottom",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)
)
# --- 6. Display the Plot ---
print(p1)
min_y <- min(performance_data$Cumulative_Return) * 0.95
max_y <- max(performance_data$Cumulative_Return) * 1.05
# --- 1. Start the plot ---
p1 <- ggplot(performance_data, aes(x = Date, y = Cumulative_Return)) +
# --- 2. LAYER 1: SHADING ---
geom_rect(
data = crisis_periods,
aes(xmin = Start, xmax = End, ymin = 0.1, ymax = Inf), # Keep 0.1, it's fine
inherit.aes = FALSE,
fill = "gray70",
alpha = 0.3
) +
# --- 3. LAYER 2: LINES ---
geom_line(
aes(color = Asset),
linewidth = 1
) +
# --- 4. LAYER 3: SCALES & LABELS ---
scale_y_log10() +  # Keep the log scale
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
# Assign colors by name for safety
scale_color_manual(values = c(
"60/40 Portfolio" = "gray30",
"S&P 500" = "black",
"20Y+ Treasury" = "gray60"
)) +
labs(
title = "Cumulative Performance: Stock, Bonds, and 60/40 Portfolio",
subtitle = "Log scale, normalized to $1 starting value",
x = "Date",
y = "Cumulative Return (Log Scale)",
color = "Asset Class"
) +
# --- 5. LAYER 4: THEME ---
theme_bw() +
theme(
legend.position = "bottom",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)
) +
# --- 6. LAYER 5: THE FIX (ZOOM) ---
# This zooms the y-axis to our calculated limits (min_y, max_y)
# It does this *after* all calculations, so it doesn't break the log scale
coord_cartesian(ylim = c(min_y, max_y))
# --- 7. Display the Plot ---
print(p1)
# --- 7. Display the Plot ---
print(p1)
min_y <- min(performance_data$Cumulative_Return) * 0.95
max_y <- max(performance_data$Cumulative_Return) * 1.05
# --- 1. Start the plot ---
p1 <- ggplot(performance_data, aes(x = Date, y = Cumulative_Return)) +
# --- 2. LAYER 1: SHADING ---
geom_rect(
data = crisis_periods,
aes(xmin = Start, xmax = End, ymin = 0.1, ymax = Inf), # Keep 0.1, it's fine
inherit.aes = FALSE,
fill = "gray70",
alpha = 0.3
) +
# --- 3. LAYER 2: LINES ---
geom_line(
aes(color = Asset),
linewidth = 1
) +
# --- 4. LAYER 3: SCALES & LABELS ---
scale_y_log10() +  # Keep the log scale
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
# Assign colors by name for safety
scale_color_manual(values = c(
"60/40 Portfolio" = "gray30",
"S&P 500" = "black",
"20Y+ Treasury" = "gray60"
)) +
labs(
title = "",
subtitle = "",
x = "Date",
y = "Cumulative Return (Log Scale)",
color = "Asset Class"
) +
# --- 5. LAYER 4: THEME ---
theme_bw() +
theme(
legend.position = "bottom",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)
) +
# --- 6. LAYER 5: THE FIX (ZOOM) ---
# This zooms the y-axis to our calculated limits (min_y, max_y)
# It does this *after* all calculations, so it doesn't break the log scale
coord_cartesian(ylim = c(min_y, max_y))
# --- 7. Display the Plot ---
print(p1)
ggsave(
filename = "C:/Users/lukas/Dropbox/fig1.png",
plot = p1,
width = 10,  # Width in inches
height = 7,   # Height in inches
dpi = 900     # Use 300 for standard, 600 for extra high-res
)
ggsave(
filename = "C:/Users/lukas/Dropbox/fig1.png",
plot = p1,
width = 10,  # Width in inches
height = 7,   # Height in inches
dpi = 1900     # Use 300 for standard, 600 for extra high-res
)
ggsave(
filename = "C:/Users/lukas/Dropbox/fig1.png",
plot = p1,
width = 10,  # Width in inches
height = 7,   # Height in inches
dpi = 900     # Use 300 for standard, 600 for extra high-res
)
# Load necessary packages for the presentation
library(scales)#
#library(patchwork)
library(ggrepel)
library(udpipe)
library(dplyr)
library(tidytext)
library(stringr)
library(ggplot2)
library(forcats)
library(tidyr)
library(ggridges)
library(widyr)
library(ggraph)
library(igraph)
library(wordcloud)
library(RColorBrewer)
library(tidyverse)
library(lubridate)
library(data.table)
library(readxl)
library(plotly)
library(patchwork)
# --- 0. SETUP (This should already be in your setup chunk) ---
platform_color_mapping <- c(
"web"       = "#003366",  # HNB Dark Blue
"facebook"  = "#5B9BD5",  # HNB Medium Blue
"comment"   = "#C00000",  # HNB Accent Red
"twitter"   = "#BF8F00",  # HNB Accent Gold
"forum"     = "#005F56",  # HNB Dark Green
"youtube"   = "#7F7F7F",  # HNB Medium Grey
"reddit"    = "#A0522D"
)
# theme_hnb <- theme_minimal(base_size = 14, base_family = "Roboto Mono") +
#   theme(
#     plot.title = element_text(face = "bold", size = 16, color = hnb_colors["dark_blue"]),
#     plot.subtitle = element_text(size = 12, color = hnb_colors["medium_grey"]),
#     legend.position = "top"
#   )
# theme_set(theme_hnb)
# --- 1. PREPARE THE COLOR MAPPING ---
# Create the named vector that explicitly tells ggplot which color to use for which platform.
# This is the crucial step you were missing.
library(duckdb)
library(dplyr)
library(ggplot2)
library(lubridate)
library(scales)
library(tidyr)
library(eurostat)
# IMPORTANT: Adjust the path to your .duckdb file!
duckdb_file_path <- "C:/Users/lukas/Determbaza/DetermDB/determDB.duckdb" # <--- ADJUST THIS!
table_name <- "media_data"
# Establish connection to the database
con <- dbConnect(duckdb::duckdb(), dbdir = duckdb_file_path, read_only = TRUE)
dbExecute(con, "SET memory_limit='16GB';")
library(readr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(scales)
library(forcats)
# Postavljanje hrvatskog locale-a za ispravno čitanje datuma i znakova
# Ovo pomaže ako nazivi mjeseci ili posebni znakovi stvaraju problem
# Ako i dalje imate problema, pokušajte s "hr_HR.UTF-8" ili izostavite ovaj redak
tryCatch({
Sys.setlocale("LC_TIME", "hrvatski")
}, warning = function(w) {
message("Nije moguće postaviti 'hrvatski' locale. Koristim defaultni.")
})
# --- 1. Učitavanje i priprema podataka ---
# Učitavanje CSV datoteke
# read_csv će automatski pokušati prepoznati tipove stupaca
file_path <- "C:/Users/lukas/Determbaza/PresscutHNB/HNB 8 2025 puni sadržaj.xlsx"
tryCatch({
# Koristimo read_excel za učitavanje
df <- read_excel(file_path, sheet = "Popis")
}, error = function(e) {
# Ako list 'Popis' ne postoji, pokušaj učitati prvi list
message("List 'Popis' nije pronađen, pokušavam učitati prvi list...")
tryCatch({
df <<- read_excel(file_path, sheet = 1)
}, error = function(e2) {
stop(paste("Nije moguće učitati Excel datoteku:", e2))
})
})
library(readr)
library(dplyr)
library(lubridate)
library(purrr)
library(stringr)
# Preimenujemo stupce iz CSV-a da odgovaraju kodu iz prezentacije
dta <- df %>%
rename(
FULL_TEXT = `Puni sadržaj`,
DATE = `Datum izdanja`,
SOURCE_TYPE = `Vrsta medija`
# Ovdje bi se mogli preimenovati i ostali stupci da su potrebni
) %>%
mutate(
DATE = as.Date(DATE), # Osiguravamo da je Date objekt
year = as.integer(format(DATE, "%Y"))
) %>%
filter(SOURCE_TYPE != "tiktok") %>% # Filter iz vašeg koda
mutate(doc_id = row_number())
date_range <- range(dta$DATE, na.rm = TRUE)
message(paste("CSV podaci učitani. Raspon datuma:", date_range[1], "do", date_range[2]))
message("NAPOMENA: Originalni filter (2021-2023) je uklonjen da bi se mogli analizirati podaci iz 2025.")
# --- 3. Učitavanje NLP podataka (Preskočeno) ---
message("--- UPOZORENJE: Preskačem učitavanje 'nlp_results_df' ---")
message("Nemam pristup lokalnoj putanji 'D:/LUKA/HNB/Language model sample'.")
# files <- list.files("D:/LUKA/HNB/Language model sample", ...)
# nlp_results_df <- ...
# --- 4. Definicija tematskih rječnika (iz vašeg koda) ---
message("--- Učitavam rječnike tema i aktera... ---")
# Definicija tematskih rječnika v3
thematic_dictionaries_v3 <- list(
MONETARNA_POLITIKA_I_INFLACIJA = sort(c(
"agregat", "cijen", "ciljan", "deflacij", "dezinflacij", "eskontn",
"ekspanzivn", "hro", "inflacij", "kamatn", "kamatna stopa", "kreditni plasmani",
"likvidnost", "mas", "monetarn", "novčan", "obvezna pričuva", "otvoreno tržište",
"ponud", "potražnj", "referentn", "repo", "restriktivn", "stabilnost cijena",
"stop", "transmisijsk"
)),
FINANCIJSKA_STABILNOST_I_NADZOR_BANAKA = sort(c(
"adekvatnost kapitala", "aml", "bank", "basel", "bonitet", "depozit", "financijsk",
"hanfa", "institucij", "kapitalni zahtjev", "kreditn", "leasing", "likvidacij",
"loš kredit", "makrobonitetn", "nadzor", "nenaplativ", "npl", "osiguranje",
"osiguranje depozita", "regulacij", "rizik", "sanacij", "sistemsk",
"sprečavanje pranja novca", "stabilnost", "stečaj", "stres test", "supervizij"
)),
UVODJENJE_EURA_I_TECAJ = sort(c(
"aprecijacij", "cent", "deprecijacij", "devizn", "devizni tečaj", "dvostruki optjecaj",
"erm ii", "eur", "eurozon", "eurosustav", "fiksni tečaj", "konverzij", "kovnica novca",
"kuna", "lipa", "prilagodb", "tečaj", "uvođenj", "zamjen", "zaokruživanj"
)),
MAKROEKONOMSKE_ANALIZE_I_PROGNOZE = sort(c(
"analiz", "bdp", "bilten", "dug", "ekonomsk", "fiskaln", "gospodarsk",
"industrijska proizvodnja", "investicij", "izvoz", "izvješć", "javni dug",
"konkurentnost", "kretanj", "makroekonomsk", "nezaposlenost", "očekivanj",
"potrošnj", "prognoz", "projekcij", "rast", "recesij", "uvoz", "zaposlenost"
)),
UPRAVLJANJE_I_TRANSPARENTNOST_HNB = sort(c(
"devizne pričuve", "dobit", "guverner", "gubitak", "hnb", "izvješće saboru",
"mandat", "neovisnost", "odluk", "pričuv", "proračun hnb", "revizij", "savjet hnb",
"sjednic", "statut", "transparentnost", "viceguverner", "zakon o hnb", "zlato",
"zlatne rezerve"
)),
PLATNI_PROMET_I_GOTOVINA = sort(c(
"beskontaktn", "cbdc", "digitalna valuta", "digitalni euro", "digitalni novac",
"fintech", "gotovin", "gotovinsk", "kartic", "kovanic", "kriptovalut", "nks",
"novčanic", "platni promet", "target2", "transakcij"
)),
MEDJUNARODNI_ODNOSI_I_EU = sort(c(
"banka za međunarodne namire", "bis", "članstv", "ebrd", "ecb", "esb",
"europska komisija", "europska središnja banka", "europsk", "fitch", "imf",
"kreditni rejting", "mmf", "moody's", "s&p", "suradnj", "svjetska banka"
)),
JAVNA_PERCEPCIJA_I_KRITIKE = sort(c(
"afer", "dužnic", "etika", "franak", "klub", "kritik", "netransparentnost",
"odgovornost", "plać", "polemik", "potrošač", "povjerenj", "presud", "skandal",
"sukob interesa", "švicarac", "troškov", "tužb", "udruga franak", "zaštita potrošača"
))
)
# Definicija rječnika aktera
hnb_duznosnici_dict <- list(HNB_DUZNOSNICI = c("boris vujčić", "vujčić", "sandra švaljek", "švaljek", "tomislav ćorić", "ćorić", "michael faulend", "faulend", "bojan fras", "fras", "ivana jakir-bajo", "martina jakir-bajo", "jakir-bajo", "jakir", "maroje lang", "lang", "roman šubić", "šubić", "slavko tešija", "tešija", "martina drvar", "drvar", "željko rohatinski", "rohatinski", "marko škreb", "škreb", "evan kraft", "kraft"))
politicki_akteri_dict <- list(POLITICKI_AKTERI = c("andrej plenković", "plenković", "zoran milanović", "milanović", "davor škrlec", "škrlec"))
analiticari_i_mediji_dict <- list(ANALITICARI_I_MEDIJI = c("velimir šonje", "šonje", "ljubo jurčić", "jurčić", "ivo družić", "družić", "marina klepo", "klepo", "boris pavković", "pavković"))
financijske_institucije_dict <- list(FINANCIJSKE_INSTITUCIJE = c("ante žigman", "žigman", "ante matek", "matek", "tamara perko", "perko", "zdenko rogić", "rogić", "miroslav gržetić", "gržetić"))
medjunarodni_duznosnici_dict <- list(MEDJUNARODNI_DUZNOSNICI = c("christine lagarde", "lagarde", "mario draghi", "draghi", "jan kees martijn", "martijn", "hans-jörg rudloff", "rudloff"))
sindikati_i_drugi_dict <- list(SINDIKATI_I_DRUGI = c("krešimir sever", "sever", "mladen novosel", "novosel"))
svi_ljudi_dictionary <- c(
hnb_duznosnici_dict,
politicki_akteri_dict,
analiticari_i_mediji_dict,
financijske_institucije_dict,
medjunarodni_duznosnici_dict,
sindikati_i_drugi_dict
)
# --- 5. Definicija funkcije (iz vašeg koda) ---
calculate_theme_scores <- function(text, dictionaries) {
text_lower <- tolower(text)
total_words <- str_count(text_lower, "\\w+")
if (total_words == 0) return(NULL)
scores <- purrr::map(dictionaries, ~sum(str_count(text_lower, .x)))
normalized_scores <- purrr::map(scores, ~(.x / total_words) * 1000)
names(normalized_scores) <- paste0("norm_", names(scores))
scores_vec <- unlist(scores)
if(all(scores_vec == 0)){
dominant_topic <- "Nema Teme"
} else {
dominant_topic <- names(scores)[which.max(scores_vec)]
}
return(c(as.list(scores), as.list(normalized_scores), dominant_topic = dominant_topic))
}
# --- 6. Izvršavanje analize ---
if("FULL_TEXT" %in% names(dta) && nrow(dta) > 0) {
message("--- 6a. Pokrećem analizu glavnih tema (thematic_dictionaries_v3)... ---")
theme_analysis_data <- purrr::map_dfr(dta$FULL_TEXT, ~calculate_theme_scores(., thematic_dictionaries_v3))
dta_enriched <- bind_cols(dta, theme_analysis_data)
message("...završeno. Kreiran 'dta_enriched'.")
message("--- 6b. Pokrećem analizu aktera (svi_ljudi_dictionary)... ---")
people_analysis_data <- purrr::map_dfr(dta$FULL_TEXT, ~calculate_theme_scores(., svi_ljudi_dictionary))
# Kreiramo poseban dataframe za ljude da se ne miješa s dta_enriched
dta_enriched_people <- bind_cols(dta, people_analysis_data)
message("...završeno. Kreiran 'dta_enriched_people'.")
message("\n--- Analiza uspješna! ---")
message("Prikazujem pregled NOVIH programatskih tema vs. STARIH tema iz CSV-a:")
print(dta_enriched %>%
select(doc_id,
Tema, # Stari stupac iz CSV-a
dominant_topic # Novi stupac iz R koda
) %>%
head())
message("\nPrikazujem pregled NOVIH programatskih aktera vs. STARIH autora iz CSV-a:")
print(dta_enriched_people %>%
select(doc_id,
Autor, # Stari stupac iz CSV-a
dominant_topic # Novi stupac (akter) iz R koda
) %>%
head())
} else {
if(nrow(dta) == 0) {
message("Greška: Nema podataka za analizu (vjerojatno zbog filtriranja).")
} else {
message("GREŠKA: Stupac 'FULL_TEXT' (originalno 'Puni sadržaj') nije pronađen.")
}
}
theme_analysis_data <- purrr::map_dfr(dta$FULL_TEXT, ~calculate_theme_scores(., thematic_dictionaries_v3))
dta_enriched <- bind_cols(dta, theme_analysis_data)
dta_with_themes <- bind_cols(dta, theme_analysis_data)
theme_analysis_data2 <- purrr::map_dfr(dta$FULL_TEXT, ~calculate_theme_scores(., svi_ljudi_dictionary))
dta_enriched2 <- bind_cols(dta, theme_analysis_data2)
dta_with_themes2 <- bind_cols(dta, theme_analysis_data2)
dbDisconnect(con)
#| cache: true
# Load necessary packages for the presentation
library(scales)#
#library(patchwork)
library(ggrepel)
library(udpipe)
library(dplyr)
library(tidytext)
library(stringr)
library(ggplot2)
library(forcats)
library(tidyr)
library(ggridges)
library(widyr)
library(ggraph)
library(igraph)
library(wordcloud)
library(RColorBrewer)
library(tidyverse)
library(lubridate)
library(data.table)
library(readxl)
library(plotly)
library(patchwork)
# --- 0. SETUP (This should already be in your setup chunk) ---
platform_color_mapping <- c(
"web"       = "#003366",  # HNB Dark Blue
"facebook"  = "#5B9BD5",  # HNB Medium Blue
"comment"   = "#C00000",  # HNB Accent Red
"twitter"   = "#BF8F00",  # HNB Accent Gold
"forum"     = "#005F56",  # HNB Dark Green
"youtube"   = "#7F7F7F",  # HNB Medium Grey
"reddit"    = "#A0522D"
)
# theme_hnb <- theme_minimal(base_size = 14, base_family = "Roboto Mono") +
#   theme(
#     plot.title = element_text(face = "bold", size = 16, color = hnb_colors["dark_blue"]),
#     plot.subtitle = element_text(size = 12, color = hnb_colors["medium_grey"]),
#     legend.position = "top"
#   )
# theme_set(theme_hnb)
# --- 1. PREPARE THE COLOR MAPPING ---
# Create the named vector that explicitly tells ggplot which color to use for which platform.
# This is the crucial step you were missing.
platform_color_mapping <- c(
"web"       = "#003366",  # HNB Dark Blue
"facebook"  = "#5B9BD5",  # HNB Medium Blue
"comment"   = "#C00000",  # HNB Accent Red
"twitter"   = "#BF8F00",  # HNB Accent Gold
"forum"     = "#005F56",  # HNB Dark Green
"youtube"   = "#7F7F7F",  # HNB Medium Grey
"reddit"    = "#A0522D"
)
plot_volume <- platform_summary %>%
# No need for tolower() as your data is already lowercase
arrange(year, total_posts) %>%
mutate(SOURCE_TYPE_ordered = factor(SOURCE_TYPE, levels = unique(SOURCE_TYPE))) %>%
# --- CORRECTED AES MAPPING ---
ggplot(aes(x = total_posts, y = SOURCE_TYPE_ordered, fill = SOURCE_TYPE_ordered)) +
geom_col() +
geom_text(aes(label = comma(total_posts, accuracy = 1)), hjust = -0.1, size = 3, color = "black") +
facet_wrap(~year, scales = "free_y") +
scale_x_continuous(labels = label_number(suffix = " K", scale = 1e-3)) +
scale_fill_manual(values = platform_color_mapping) +
theme_minimal(base_size = 14) +
theme(
legend.position = "none",
strip.text = element_text(face = "bold", size = 16),
panel.grid.major.y = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1)
) +
labs(
title = "Broj objava po platformama (2021-2023)",
subtitle = "",
x = "Ukupan broj objava (u tisućama)",
y = NULL, # Removed redundant y-axis title
caption = "Napomena: Stupci su sortirani po volumenu."
)
print(plot_volume)
files <- list.files("C:/Users/lukas/Determbaza/Language model sample II", full.names = TRUE, pattern = "\\.rds")
