) +
scale_color_manual(name = "Indicator", values = c("CPI YoY %" = "black", "Fed Funds Rate %" = "blue")) +
labs(
title = "Macroeconomic Context and Crisis Regime Probability",
subtitle = "Crisis regime probability (red area) rises with inflation and Fed rate hikes"
) +
theme_bw() +
theme(legend.position = "bottom")
print(p5)
# Calculate regime-specific performance
analysis_data <- analysis_data %>%
mutate(Regime = ifelse(Crisis_Prob > 0.5, "Crisis", "Normal"))
regime_performance <- analysis_data %>%
group_by(Regime) %>%
summarise(
`Annualized Return (SPY)` = mean(SPY_Return) * 252 * 100,
`Annualized Return (TLT)` = mean(TLT_Return) * 252 * 100,
`Annualized Return (60/40)` = mean(Portfolio_60_40) * 252 * 100,
`Annualized Volatility (60/40)` = sd(Portfolio_60_40) * sqrt(252) * 100,
`Stock-Bond Correlation` = cor(SPY_Return, TLT_Return),
`Share of Period (%)` = n() / nrow(analysis_data) * 100,
.groups = 'drop'
)
kable(regime_performance, digits = 2,
caption = "Performance Statistics by Market Regime") %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE)
# Drawdown analysis
drawdown_data <- analysis_data %>%
arrange(Date) %>%
mutate(
Portfolio_Cumulative = cumprod(1 + Portfolio_60_40),
Portfolio_Peak = cummax(Portfolio_Cumulative),
Portfolio_Drawdown = (Portfolio_Cumulative / Portfolio_Peak - 1) * 100
)
p6 <- ggplot(drawdown_data, aes(x = Date, y = Portfolio_Drawdown)) +
geom_area(aes(fill = Regime), alpha = 0.7) +
geom_line() +
scale_fill_manual(values = c("Crisis" = "darkred", "Normal" = "steelblue")) +
labs(
title = "60/40 Portfolio Drawdowns by Market Regime",
subtitle = "Largest drawdowns occur during the 'Crisis' regime",
x = "Date", y = "Drawdown (%)"
) +
scale_y_continuous(labels = scales::percent_format(scale = 1)) +
theme_bw()
print(p6)
# Test different correlation measures for the 2022-2023 period
crisis_period_2022_2023 <- full_data %>%
filter(year(Date) %in% c(2022, 2023))
correlation_measures <- data.frame(
Measure = c("Pearson (linear)", "Spearman (rank)", "Kendall (rank)"),
Correlation_2022_2023 = c(
cor(crisis_period_2022_2023$SPY_Return, crisis_period_2022_2023$TLT_Return, method = "pearson"),
cor(crisis_period_2022_2023$SPY_Return, crisis_period_2022_2023$TLT_Return, method = "spearman"),
cor(crisis_period_2022_2023$SPY_Return, crisis_period_2022_2023$TLT_Return, method = "kendall")
)
)
kable(correlation_measures, digits = 3,
caption = "Alternative Correlation Measures for the 2022-2023 Period") %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE)
# Extract key metrics for the summary table from the regime_performance data frame
crisis_row <- filter(regime_performance, Regime == "Crisis")
normal_row <- filter(regime_performance, Regime == "Normal")
period_2022_2023 <- regime_stats %>% filter(Year %in% c(2022, 2023))
avg_crisis_prob_2022_2023 <- mean(period_2022_2023$Avg_Crisis_Prob) * 100
key_findings <- data.frame(
Metric = c(
"Normal Regime Stock-Bond Correlation",
"Crisis Regime Stock-Bond Correlation",
"Normal Regime 60/40 Volatility (%)",
"Crisis Regime 60/40 Volatility (%)",
"Avg. Crisis Probability in 2022-2023 (%)"
),
Value = c(
normal_row$`Stock-Bond Correlation`,
crisis_row$`Stock-Bond Correlation`,
normal_row$`Annualized Volatility (60/40)`,
crisis_row$`Annualized Volatility (60/40)`,
avg_crisis_prob_2022_2023
)
)
kable(key_findings, digits = 2,
caption = "Summary of Key Empirical Findings") %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE)
# Map 'Asset' to linetype instead of color
p1 <- ggplot(performance_data, aes(x = Date, y = Cumulative_Return, linetype = Asset)) +
# Make the lines black (color = "black" is outside aes())
geom_line(linewidth = 1, color = "black") +
scale_y_log10() +
# Manually define the linetypes (optional, but recommended for consistency)
# Adjust "solid", "dashed", "dotted" as needed for your assets
scale_linetype_manual(values = c("solid", "dashed", "dotted")) +
labs(
title = "Cumulative Performance: Stock, Bonds, and 60/40 Portfolio",
subtitle = "Log scale, normalized to $1 starting value",
x = "Date", y = "Cumulative Return (Log Scale)",
linetype = "Asset Class"  # IMPORTANT: Change lab from 'color' to 'linetype'
) +
theme_bw() + # theme_bw() is already great for B&W
theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, hjust = 1))
# Add crisis period shading (your code is already perfect for B&W)
for(i in 1:nrow(crisis_periods)) {
p1 <- p1 + annotate("rect",
xmin = crisis_periods$Start[i], xmax = crisis_periods$End[i],
ymin = -Inf, ymax = Inf, alpha = 0.2, fill = "gray70")
}
ggsave(
filename = "C:/Users/lukas/Dropbox/fig1.png",
plot = p1,
width = 10,  # Width in inches
height = 7,   # Height in inches
dpi = 600     # Use 300 for standard, 600 for extra high-res
)
crisis_periods <- data.frame(
Period = c("Global Financial Crisis", "COVID-19 Crash", "2022-23 Inflation Crisis"),
Start = as.Date(c("2008-09-15", "2020-02-19", "2022-01-01")),
End = as.Date(c("2009-03-09", "2020-04-30", "2023-12-31")),
Type = c("Credit/Liquidity", "Pandemic/Liquidity", "Inflation/Monetary")
)
kable(crisis_periods, caption = "Crisis Periods for Reference") %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE)
# --- 1. Build the Grayscale Plot ---
p1 <- ggplot(performance_data, aes(x = Date, y = Cumulative_Return, color = Asset)) +
geom_line(linewidth = 1) +
scale_y_log10() +
# --- ADD THIS LINE to control the x-axis ---
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
# ----------------------------------------------
scale_color_manual(values = c("black", "gray30", "gray60")) +
labs(
title = "Cumulative Performance: Stock, Bonds, and 60/40 Portfolio",
subtitle = "Log scale, normalized to $1 starting value",
x = "Date", y = "Cumulative Return (Log Scale)",
color = "Asset Class"
) +
theme_bw() +
# --- I've modified this line for better label alignment ---
theme(
legend.position = "bottom",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)
)
# --------------------------------------------------------
# Add crisis period shading (no change here)
for(i in 1:nrow(crisis_periods)) {
p1 <- p1 + annotate("rect",
xmin = crisis_periods$Start[i], xmax = crisis_periods$End[i],
ymin = -Inf, ymax = Inf, alpha = 0.2, fill = "gray70")
}
ggsave(
filename = "C:/Users/lukas/Dropbox/fig1.png",
plot = p1,
width = 10,  # Width in inches
height = 7,   # Height in inches
dpi = 600     # Use 300 for standard, 600 for extra high-res
)
p1 <- ggplot(performance_data, aes(x = Date, y = Cumulative_Return, color = Asset)) +
geom_line(linewidth = 1) +
scale_y_log10() +
# --- ADD THIS LINE to control the x-axis ---
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
# ----------------------------------------------
scale_color_manual(values = c("black", "gray30", "gray60")) +
labs(
title = "",
subtitle = "",
x = "Date", y = "Cumulative Return (Log Scale)",
color = "Asset Class"
) +
theme_bw() +
# --- I've modified this line for better label alignment ---
theme(
legend.position = "bottom",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)
)
# Add crisis period shading (no change here)
for(i in 1:nrow(crisis_periods)) {
p1 <- p1 + annotate("rect",
xmin = crisis_periods$Start[i], xmax = crisis_periods$End[i],
ymin = -Inf, ymax = Inf, alpha = 0.2, fill = "gray70")
}
crisis_periods
# --- 1. Build the Grayscale Plot ---
p1 <- ggplot(performance_data, aes(x = Date, y = Cumulative_Return, color = Asset)) +
geom_line(linewidth = 1) +
scale_y_log10() +
# --- ADD THIS LINE to control the x-axis ---
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
# ----------------------------------------------
scale_color_manual(values = c("black", "gray30", "gray60")) +
labs(
title = "",
subtitle = "",
x = "Date", y = "Cumulative Return (Log Scale)",
color = "Asset Class"
) +
theme_bw() +
# --- I've modified this line for better label alignment ---
theme(
legend.position = "bottom",
axis.text.x = element_text(angle = 0, vjust = 0.5, hjust = 1)
)
# --------------------------------------------------------
# Add crisis period shading (no change here)
for(i in 1:nrow(crisis_periods)) {
p1 <- p1 + annotate("rect",
xmin = crisis_periods$Start[i], xmax = crisis_periods$End[i],
ymin = -Inf, ymax = Inf, alpha = 0.2, fill = "gray70")
}
ggsave(
filename = "C:/Users/lukas/Dropbox/fig1.png",
plot = p1,
width = 10,  # Width in inches
height = 7,   # Height in inches
dpi = 600     # Use 300 for standard, 600 for extra high-res
)
ggsave(
filename = "C:/Users/lukas/Dropbox/fig1.png",
plot = p1,
width = 10,  # Width in inches
height = 7,   # Height in inches
dpi = 900     # Use 300 for standard, 600 for extra high-res
)
# Convert the columns to Date objects
crisis_periods$Start <- as.Date(crisis_periods$Start)
crisis_periods$End   <- as.Date(crisis_periods$End)
# Now check str() again to confirm they are Dates
str(crisis_periods)
p1 <- p1 +
geom_rect(
data = crisis_periods,  # Use the crisis_periods data for this layer only
aes(xmin = Start, xmax = End, ymin = -Inf, ymax = Inf),
inherit.aes = FALSE,    # VERY IMPORTANT: tells ggplot not to look for 'Asset'
fill = "gray70",
alpha = 0.2
)
ggsave(
filename = "C:/Users/lukas/Dropbox/fig1.png",
plot = p1,
width = 10,  # Width in inches
height = 7,   # Height in inches
dpi = 900     # Use 300 for standard, 600 for extra high-res
)
p1
crisis_periods
p1 <- ggplot(performance_data, aes(x = Date, y = Cumulative_Return, color = Asset)) +
geom_line(linewidth = 1) +
scale_y_log10() +
labs(
title = "Cumulative Performance: Stock, Bonds, and 60/40 Portfolio",
subtitle = "Log scale, normalized to $1 starting value",
x = "Date", y = "Cumulative Return (Log Scale)", color = "Asset Class"
) +
theme_bw() +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, hjust = 1))
# Add crisis period shading
for(i in 1:nrow(crisis_periods)) {
p1 <- p1 + annotate("rect",
xmin = crisis_periods$Start[i], xmax = crisis_periods$End[i],
ymin = -Inf, ymax = Inf, alpha = 0.2, fill = "gray70")
}
print(p1)
# --- 1. Build the Grayscale Plot ---
p1 <- ggplot(performance_data, aes(x = Date, y = Cumulative_Return, color = Asset)) +
# --- Add Shading FIRST (so it's in the background) ---
# This uses geom_rect() instead of a 'for' loop. It's the standard way.
geom_rect(
data = crisis_periods,  # Use the crisis_periods data for this layer
aes(xmin = Start, xmax = End, ymin = -Inf, ymax = Inf), # Define rectangle bounds
inherit.aes = FALSE,    # IMPORTANT: Don't inherit 'color = Asset'
fill = "gray70",
alpha = 0.2
) +
# --- Add the Asset Lines (on top of the shading) ---
geom_line(linewidth = 1) +
# --- Add All Your Customizations ---
# Log scale for y-axis
scale_y_log10() +
# X-axis ticks for every year, formatted as "20XX"
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
# Grayscale color palette
# Make sure the number of colors matches your number of assets
scale_color_manual(values = c("black", "gray30", "gray60")) +
# Labels and Titles
labs(
title = "",
subtitle = "",
x = "Date",
y = "Cumulative Return (Log Scale)",
color = "Asset Class" # Matches the 'color' aesthetic
) +
# Theme
theme_bw() +
theme(
legend.position = "bottom",
# Rotate x-axis labels to be vertical for clarity
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)
)
# --- 5. Display the Plot ---
print(p1)
p1 <- ggplot(performance_data, aes(x = Date, y = Cumulative_Return, color = Asset)) +
# --- TEST CODE ---
geom_rect(
data = crisis_periods,
aes(xmin = Start, xmax = End, ymin = -Inf, ymax = Inf),
inherit.aes = FALSE,
fill = "red",  # Make it bright red
alpha = 1      # Make it fully opaque
) +
# --- END TEST ---
geom_line(linewidth = 1) +
scale_y_log10() +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
scale_color_manual(values = c("black", "gray30", "gray60")) +
labs(title = "Test Plot") +
theme_bw() +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
print(p1)
str(crisis_periods)
str(performance_data)
p1 <- ggplot(performance_data, aes(x = Date, y = Cumulative_Return)) +
# --- 2. LAYER 1: SHADING (Draw this first, in the back) ---
geom_rect(
data = crisis_periods,  # Use your crisis data
aes(xmin = Start, xmax = End, ymin = -Inf, ymax = Inf),
inherit.aes = FALSE,    # CRITICAL: This is essential for it to work
fill = "gray70",        # A standard gray for shading
alpha = 0.3             # Make it 30% transparent (0.2 is often too light)
) +
# --- 3. LAYER 2: LINES (Draw these on top of the shading) ---
geom_line(
aes(color = Asset),     # We put 'color = Asset' here
linewidth = 1
) +
# --- 4. LAYER 3: SCALES AND LABELS ---
scale_y_log10() +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
# scale_color_manual to control your grayscale
# The 'values' should match your "Asset" names in order
scale_color_manual(values = c(
"60/40 Portfolio" = "gray30",
"S&P 500" = "black",
"20Y+ Treasury" = "gray60"
)) +
labs(
title = "Cumulative Performance: Stock, Bonds, and 60/40 Portfolio",
subtitle = "Log scale, normalized to $1 starting value",
x = "Date",
y = "Cumulative Return (Log Scale)",
color = "Asset Class"
) +
# --- 5. LAYER 4: THEME (Apply this last) ---
theme_bw() +
theme(
legend.position = "bottom",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)
)
# --- 6. Display the Plot ---
print(p1)
p1 <- ggplot(performance_data, aes(x = Date, y = Cumulative_Return)) +
# --- LAYER 1: SHADING ---
geom_rect(
data = crisis_periods,
# --- THIS IS THE FIX ---
# We use a small positive number (0.1) for ymin instead of -Inf
aes(xmin = Start, xmax = End, ymin = 0.1, ymax = Inf),
# ----------------------
inherit.aes = FALSE,
fill = "gray70",
alpha = 0.3
) +
# --- LAYER 2: LINES ---
geom_line(
aes(color = Asset),
linewidth = 1
) +
# --- LAYER 3: SCALES & LABELS ---
scale_y_log10() +  # This should now work
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
# Assign colors by name for safety
scale_color_manual(values = c(
"60/40 Portfolio" = "gray30",
"S&P 500" = "black",
"20Y+ Treasury" = "gray60"
)) +
labs(
title = "Cumulative Performance: Stock, Bonds, and 60/40 Portfolio",
subtitle = "Log scale, normalized to $1 starting value",
x = "Date",
y = "Cumulative Return (Log Scale)",
color = "Asset Class"
) +
# --- LAYER 4: THEME ---
theme_bw() +
theme(
legend.position = "bottom",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)
)
# --- 6. Display the Plot ---
print(p1)
min_y <- min(performance_data$Cumulative_Return) * 0.95
max_y <- max(performance_data$Cumulative_Return) * 1.05
# --- 1. Start the plot ---
p1 <- ggplot(performance_data, aes(x = Date, y = Cumulative_Return)) +
# --- 2. LAYER 1: SHADING ---
geom_rect(
data = crisis_periods,
aes(xmin = Start, xmax = End, ymin = 0.1, ymax = Inf), # Keep 0.1, it's fine
inherit.aes = FALSE,
fill = "gray70",
alpha = 0.3
) +
# --- 3. LAYER 2: LINES ---
geom_line(
aes(color = Asset),
linewidth = 1
) +
# --- 4. LAYER 3: SCALES & LABELS ---
scale_y_log10() +  # Keep the log scale
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
# Assign colors by name for safety
scale_color_manual(values = c(
"60/40 Portfolio" = "gray30",
"S&P 500" = "black",
"20Y+ Treasury" = "gray60"
)) +
labs(
title = "Cumulative Performance: Stock, Bonds, and 60/40 Portfolio",
subtitle = "Log scale, normalized to $1 starting value",
x = "Date",
y = "Cumulative Return (Log Scale)",
color = "Asset Class"
) +
# --- 5. LAYER 4: THEME ---
theme_bw() +
theme(
legend.position = "bottom",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)
) +
# --- 6. LAYER 5: THE FIX (ZOOM) ---
# This zooms the y-axis to our calculated limits (min_y, max_y)
# It does this *after* all calculations, so it doesn't break the log scale
coord_cartesian(ylim = c(min_y, max_y))
# --- 7. Display the Plot ---
print(p1)
# --- 7. Display the Plot ---
print(p1)
min_y <- min(performance_data$Cumulative_Return) * 0.95
max_y <- max(performance_data$Cumulative_Return) * 1.05
# --- 1. Start the plot ---
p1 <- ggplot(performance_data, aes(x = Date, y = Cumulative_Return)) +
# --- 2. LAYER 1: SHADING ---
geom_rect(
data = crisis_periods,
aes(xmin = Start, xmax = End, ymin = 0.1, ymax = Inf), # Keep 0.1, it's fine
inherit.aes = FALSE,
fill = "gray70",
alpha = 0.3
) +
# --- 3. LAYER 2: LINES ---
geom_line(
aes(color = Asset),
linewidth = 1
) +
# --- 4. LAYER 3: SCALES & LABELS ---
scale_y_log10() +  # Keep the log scale
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
# Assign colors by name for safety
scale_color_manual(values = c(
"60/40 Portfolio" = "gray30",
"S&P 500" = "black",
"20Y+ Treasury" = "gray60"
)) +
labs(
title = "",
subtitle = "",
x = "Date",
y = "Cumulative Return (Log Scale)",
color = "Asset Class"
) +
# --- 5. LAYER 4: THEME ---
theme_bw() +
theme(
legend.position = "bottom",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)
) +
# --- 6. LAYER 5: THE FIX (ZOOM) ---
# This zooms the y-axis to our calculated limits (min_y, max_y)
# It does this *after* all calculations, so it doesn't break the log scale
coord_cartesian(ylim = c(min_y, max_y))
# --- 7. Display the Plot ---
print(p1)
ggsave(
filename = "C:/Users/lukas/Dropbox/fig1.png",
plot = p1,
width = 10,  # Width in inches
height = 7,   # Height in inches
dpi = 900     # Use 300 for standard, 600 for extra high-res
)
ggsave(
filename = "C:/Users/lukas/Dropbox/fig1.png",
plot = p1,
width = 10,  # Width in inches
height = 7,   # Height in inches
dpi = 1900     # Use 300 for standard, 600 for extra high-res
)
ggsave(
filename = "C:/Users/lukas/Dropbox/fig1.png",
plot = p1,
width = 10,  # Width in inches
height = 7,   # Height in inches
dpi = 900     # Use 300 for standard, 600 for extra high-res
)
